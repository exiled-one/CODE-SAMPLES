***********************************
Filename: Connection Resiliency and Command Interception.html
***********************************
<!DOCTYPE html>
<html>
<head>
</head>
<body style="font-family: arial, helvetica, sans-serif;font-size: 12px;">
<div class="important important-box-article">
<p>So far the application has been running locally in IIS Express on your development computer. To make a real application available for other people to use over the Internet, you have to deploy it to a web hosting provider, and you have to deploy the database to a database server.</p>
</div>
<p>In this tutorial you'll learn how to use two features of Entity Framework 6 that are especially valuable when you are deploying to the cloud environment: connection resiliency (automatic retries for transient errors) and command interception (catch all SQL queries sent to the database in order to log or change them).</p>
<p>This connection resiliency and command interception tutorial is optional. If you skip this tutorial, a few minor adjustments will have to be made in subsequent tutorials.</p>
<h2>Enable connection resiliency</h2>
<p>When you deploy the application to Windows Azure, you'll deploy the database to Windows Azure SQL Database, a cloud database service. Transient connection errors are typically more frequent when you connect to a cloud database service than when your web server and your database server are directly connected together in the same data center. Even if a cloud web server and a cloud database service are hosted in the same data center, there are more network connections between them that can have problems, such as load balancers.</p>
<p>Also a cloud service is typically shared by other users, which means its responsiveness can be affected by them.&nbsp;And your access to the database might be subject to throttling. Throttling means the database service throws exceptions when you try to access it more frequently than is allowed in your Service Level Agreement (SLA).</p>
<p>Many or most connection problems when you're accessing a cloud service are transient, that is, they resolve themselves in a short period of time. So when you try a database operation and get a type of error that is typically transient, you could try the operation again after a short wait, and the operation might be successful. You can provide a much better experience for your users if you handle transient errors by automatically trying again, making most of them invisible to the customer. The connection resiliency feature in Entity Framework 6 automates that process of retrying failed SQL queries.</p>
<p>The connection resiliency feature must be configured appropriately for a particular database service:</p>
<ul>
<li>It has to know which exceptions are likely to be transient. You want to retry errors caused by a temporary loss in network connectivity, not errors caused by program bugs, for example.</li>
<li>It has to wait an appropriate amount of time between retries of a failed operation. You can wait longer between retries for a batch process than you can for an online web page where a user is waiting for a response.</li>
<li>It has to retry an appropriate number of times before it gives up. You might want to retry more times in a batch process that you would in an online application.</li>
</ul>
<p>You can configure these settings manually for any database environment supported by an Entity Framework provider, but default values that typically work well for an online application that uses Windows Azure SQL Database have already been configured for you, and those are the settings you'll implement for the Contoso University application.</p>
<p>All you have to do to enable connection resiliency is create a class in your assembly that derives from the <a href="http://msdn.microsoft.com/en-us/data/jj680699.aspx">DbConfiguration</a> class, and in that class set the SQL Database <em>execution strategy</em>, which in EF is another term for <em>retry policy</em>.</p>
<ol>
<li>
<p>In the DAL folder, add a class file named <em>SchoolConfiguration.cs</em>.</p>
</li>
<li>
<p>Replace the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">SqlServer</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SchoolConfiguration</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbConfiguration</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SchoolConfiguration</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">SetExecutionStrategy</span><span class="pun">(</span><span class="str">"System.Data.SqlClient"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SqlAzureExecutionStrategy</span><span class="pun">());</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The Entity Framework automatically runs the code it finds in a class that derives from <code>DbConfiguration</code>. You can use the<code>DbConfiguration</code> class to do configuration tasks in code that you would otherwise do in the <em>Web.config</em> file. For more information, see<a href="http://msdn.microsoft.com/en-us/data/jj680699">EntityFramework Code-Based Configuration</a>.</p>
</li>
<li>
<p>In <em>StudentController.cs</em>, add a <code>using</code> statement for <code>System.Data.Entity.Infrastructure</code>.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">Infrastructure</span><span class="pun">;</span></pre>
</li>
<li>
<p>Change all of the <code>catch</code> blocks that catch <code>DataException</code> exceptions so that they catch <code>RetryLimitExceededException</code> exceptions instead. For example:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><mark><span class="typ">RetryLimitExceededException</span></mark><span class="pln"> </span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.</span><span class="pln">
    </span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">AddModelError</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Unable to save changes. Try again, and if the problem persists see your system administrator."</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>You were using <code>DataException</code> to try to identify errors that might be transient in order to give a friendly "try again" message. But now that you've turned on a retry policy, the only errors likely to be transient will already have been tried and failed several times and the actual exception returned will be wrapped in the <code>RetryLimitExceededException</code> exception.</p>
</li>
</ol>
<p>For more information, see <a href="http://msdn.microsoft.com/en-us/data/dn456835">Entity Framework Connection Resiliency / Retry Logic</a>.&nbsp;</p>
<h2>Enable Command Interception</h2>
<p>Now that you've turned on a retry policy, how do you test to verify that it is working as expected?&nbsp; It's not so easy to force a transient error to happen, especially when you're running locally, and it would be especially difficult to integrate actual transient errors into an automated unit test. To test the connection resiliency feature, you need a way to intercept queries that Entity Framework sends to SQL Server and replace the SQL Server response with an exception type that is typically transient.</p>
<p>You can also use query interception in order to implement a best practice for cloud applications: <a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log">log the latency and success or failure of all calls to external services</a> such as database services. EF6 provides a <a href="http://msdn.microsoft.com/en-us/data/dn469464">dedicated logging API</a> that can make it easier to do logging, but in this section of the tutorial you'll learn how to use the Entity Framework's <a href="http://msdn.microsoft.com/en-us/data/dn469464">interception feature</a> directly, both for logging and for simulating transient errors.</p>
<h3>Create a logging interface and class</h3>
<p>A <a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log">best practice for logging</a> is to do it by using an interface rather than hard-coding calls to System.Diagnostics.Trace or a logging class. That makes it easier to change your logging mechanism later if you ever need to do that. So in this section you'll create the logging interface and a class to implement it./p&gt;</p>
<ol>
<li>
<p>Create a folder in the project and name it <em>Logging</em>.</p>
</li>
<li>
<p>In the <em>Logging</em> folder, create a class file named <em>ILogger.cs</em>, and replace the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Logging</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">ILogger</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Information</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> message</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Information</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Information</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> exception</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">

        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Warning</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> message</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Warning</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Warning</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> exception</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">

        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> message</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> exception</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">

        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">TraceApi</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> componentName</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pln"> timespan</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">TraceApi</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> componentName</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pln"> timespan</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> properties</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">TraceApi</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> componentName</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pln"> timespan</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">

    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The interface provides three tracing levels to indicate the relative importance of logs, and one designed to provide latency information for external service calls such as database queries. The logging methods have overloads that let you pass in an exception. This is so that exception information including stack trace and inner exceptions is reliably logged by the class that implements the interface, instead of relying on that being done in each logging method call throughout the application.</p>
<p>The TraceApi methods enable you to track the latency of each call to an external service such as SQL Database.</p>
</li>
<li>
<p>In the <em>Logging</em> folder, create a class file named <em>Logger.cs</em>, and replace the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Diagnostics</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Text</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Logging</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Logger</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ILogger</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Information</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> message</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceInformation</span><span class="pun">(</span><span class="pln">message</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Information</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceInformation</span><span class="pun">(</span><span class="pln">fmt</span><span class="pun">,</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Information</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> exception</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceInformation</span><span class="pun">(</span><span class="typ">FormatExceptionMessage</span><span class="pun">(</span><span class="pln">exception</span><span class="pun">,</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> vars</span><span class="pun">));</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Warning</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> message</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceWarning</span><span class="pun">(</span><span class="pln">message</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Warning</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceWarning</span><span class="pun">(</span><span class="pln">fmt</span><span class="pun">,</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Warning</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> exception</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceWarning</span><span class="pun">(</span><span class="typ">FormatExceptionMessage</span><span class="pun">(</span><span class="pln">exception</span><span class="pun">,</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> vars</span><span class="pun">));</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> message</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceError</span><span class="pun">(</span><span class="pln">message</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceError</span><span class="pun">(</span><span class="pln">fmt</span><span class="pun">,</span><span class="pln"> vars</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> exception</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceError</span><span class="pun">(</span><span class="typ">FormatExceptionMessage</span><span class="pun">(</span><span class="pln">exception</span><span class="pun">,</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> vars</span><span class="pun">));</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">TraceApi</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> componentName</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pln"> timespan</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">TraceApi</span><span class="pun">(</span><span class="pln">componentName</span><span class="pun">,</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> timespan</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">);</span><span class="pln"> 
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">TraceApi</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> componentName</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pln"> timespan</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">TraceApi</span><span class="pun">(</span><span class="pln">componentName</span><span class="pun">,</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> timespan</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">.</span><span class="typ">Format</span><span class="pun">(</span><span class="pln">fmt</span><span class="pun">,</span><span class="pln"> vars</span><span class="pun">));</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">TraceApi</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> componentName</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pln"> timespan</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> properties</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">string</span><span class="pln"> message </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="typ">Concat</span><span class="pun">(</span><span class="str">"Component:"</span><span class="pun">,</span><span class="pln"> componentName</span><span class="pun">,</span><span class="pln"> </span><span class="str">";Method:"</span><span class="pun">,</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> </span><span class="str">";Timespan:"</span><span class="pun">,</span><span class="pln"> timespan</span><span class="pun">.</span><span class="typ">ToString</span><span class="pun">(),</span><span class="pln"> </span><span class="str">";Properties:"</span><span class="pun">,</span><span class="pln"> properties</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">Trace</span><span class="pun">.</span><span class="typ">TraceInformation</span><span class="pun">(</span><span class="pln">message</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FormatExceptionMessage</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> exception</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> fmt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> vars</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// Simple exception formatting: for a more comprehensive version see </span><span class="pln">
            </span><span class="com">// http://code.msdn.microsoft.com/windowsazure/Fix-It-app-for-Building-cdd80df4</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> sb </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">StringBuilder</span><span class="pun">();</span><span class="pln">
            sb</span><span class="pun">.</span><span class="typ">Append</span><span class="pun">(</span><span class="kwd">string</span><span class="pun">.</span><span class="typ">Format</span><span class="pun">(</span><span class="pln">fmt</span><span class="pun">,</span><span class="pln"> vars</span><span class="pun">));</span><span class="pln">
            sb</span><span class="pun">.</span><span class="typ">Append</span><span class="pun">(</span><span class="str">" Exception: "</span><span class="pun">);</span><span class="pln">
            sb</span><span class="pun">.</span><span class="typ">Append</span><span class="pun">(</span><span class="pln">exception</span><span class="pun">.</span><span class="typ">ToString</span><span class="pun">());</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln">  sb</span><span class="pun">.</span><span class="typ">ToString</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The implementation uses System.Diagnostics to do the tracing. This is a built-in feature of .NET which makes it easy to generate and use tracing information. There are many "listeners" you can use with System.Diagnostics tracing, to write logs to files, for example, or to write them to blob storage in Azure.<span>&nbsp; </span>See some of the options, and links to other resources for more information, in <a href="http://www.windowsazure.com/en-us/develop/net/tutorials/troubleshoot-web-sites-in-visual-studio/">Troubleshooting Azure Web Sites in Visual Studio</a><span>. For this tutorial you'll only look at logs in the Visual Studio <strong>Output</strong> window.</span></p>
<p>In a production application you might want to consider tracing packages other than System.Diagnostics, and the ILogger interface makes it relatively easy to switch to a different tracing mechanism if you decide to do that.</p>
</li>
</ol>
<h3>Create interceptor classes</h3>
<p>Next you'll create the classes that the Entity Framework will call into every time it is going to send a query to the database, one to simulate transient errors and one to do logging. These interceptor classes must derive from the <code>DbCommandInterceptor</code> class. In them you write method overrides that are automatically called when query is about to be executed. In these methods you can examine or log the query that is being sent to the database, and you can change the query before it's sent to the database or return something to Entity Framework yourself without even passing the query to the database.</p>
<ol>
<li>
<p>To create the interceptor class that will log every SQL query that is sent to the database, create a class file named<em>SchoolInterceptorLogging.cs</em> in the <em>DAL</em> folder, and replace the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Common</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">Infrastructure</span><span class="pun">.</span><span class="typ">Interception</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">SqlServer</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">SqlClient</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Diagnostics</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Reflection</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Linq</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Logging</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SchoolInterceptorLogging</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbCommandInterceptor</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">ILogger</span><span class="pln"> _logger </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="typ">Stopwatch</span><span class="pln"> _stopwatch </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Stopwatch</span><span class="pun">();</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ScalarExecuting</span><span class="pun">(</span><span class="typ">DbCommand</span><span class="pln"> command</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DbCommandInterceptionContext</span><span class="str">&lt;object&gt;</span><span class="pln"> interceptionContext</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">ScalarExecuting</span><span class="pun">(</span><span class="pln">command</span><span class="pun">,</span><span class="pln"> interceptionContext</span><span class="pun">);</span><span class="pln">
            _stopwatch</span><span class="pun">.</span><span class="typ">Restart</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ScalarExecuted</span><span class="pun">(</span><span class="typ">DbCommand</span><span class="pln"> command</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DbCommandInterceptionContext</span><span class="str">&lt;object&gt;</span><span class="pln"> interceptionContext</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            _stopwatch</span><span class="pun">.</span><span class="typ">Stop</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">interceptionContext</span><span class="pun">.</span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                _logger</span><span class="pun">.</span><span class="typ">Error</span><span class="pun">(</span><span class="pln">interceptionContext</span><span class="pun">.</span><span class="typ">Exception</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Error executing command: {0}"</span><span class="pun">,</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">CommandText</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">else</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                _logger</span><span class="pun">.</span><span class="typ">TraceApi</span><span class="pun">(</span><span class="str">"SQL Database"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"SchoolInterceptor.ScalarExecuted"</span><span class="pun">,</span><span class="pln"> _stopwatch</span><span class="pun">.</span><span class="typ">Elapsed</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Command: {0}: "</span><span class="pun">,</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">CommandText</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">ScalarExecuted</span><span class="pun">(</span><span class="pln">command</span><span class="pun">,</span><span class="pln"> interceptionContext</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">NonQueryExecuting</span><span class="pun">(</span><span class="typ">DbCommand</span><span class="pln"> command</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DbCommandInterceptionContext</span><span class="str">&lt;int&gt;</span><span class="pln"> interceptionContext</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">NonQueryExecuting</span><span class="pun">(</span><span class="pln">command</span><span class="pun">,</span><span class="pln"> interceptionContext</span><span class="pun">);</span><span class="pln">
            _stopwatch</span><span class="pun">.</span><span class="typ">Restart</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">NonQueryExecuted</span><span class="pun">(</span><span class="typ">DbCommand</span><span class="pln"> command</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DbCommandInterceptionContext</span><span class="str">&lt;int&gt;</span><span class="pln"> interceptionContext</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            _stopwatch</span><span class="pun">.</span><span class="typ">Stop</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">interceptionContext</span><span class="pun">.</span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                _logger</span><span class="pun">.</span><span class="typ">Error</span><span class="pun">(</span><span class="pln">interceptionContext</span><span class="pun">.</span><span class="typ">Exception</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Error executing command: {0}"</span><span class="pun">,</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">CommandText</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">else</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                _logger</span><span class="pun">.</span><span class="typ">TraceApi</span><span class="pun">(</span><span class="str">"SQL Database"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"SchoolInterceptor.NonQueryExecuted"</span><span class="pun">,</span><span class="pln"> _stopwatch</span><span class="pun">.</span><span class="typ">Elapsed</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Command: {0}: "</span><span class="pun">,</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">CommandText</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">NonQueryExecuted</span><span class="pun">(</span><span class="pln">command</span><span class="pun">,</span><span class="pln"> interceptionContext</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ReaderExecuting</span><span class="pun">(</span><span class="typ">DbCommand</span><span class="pln"> command</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DbCommandInterceptionContext</span><span class="pun">&lt;</span><span class="typ">DbDataReader</span><span class="pun">&gt;</span><span class="pln"> interceptionContext</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">ReaderExecuting</span><span class="pun">(</span><span class="pln">command</span><span class="pun">,</span><span class="pln"> interceptionContext</span><span class="pun">);</span><span class="pln">
            _stopwatch</span><span class="pun">.</span><span class="typ">Restart</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ReaderExecuted</span><span class="pun">(</span><span class="typ">DbCommand</span><span class="pln"> command</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DbCommandInterceptionContext</span><span class="pun">&lt;</span><span class="typ">DbDataReader</span><span class="pun">&gt;</span><span class="pln"> interceptionContext</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            _stopwatch</span><span class="pun">.</span><span class="typ">Stop</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">interceptionContext</span><span class="pun">.</span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                _logger</span><span class="pun">.</span><span class="typ">Error</span><span class="pun">(</span><span class="pln">interceptionContext</span><span class="pun">.</span><span class="typ">Exception</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Error executing command: {0}"</span><span class="pun">,</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">CommandText</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">else</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                _logger</span><span class="pun">.</span><span class="typ">TraceApi</span><span class="pun">(</span><span class="str">"SQL Database"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"SchoolInterceptor.ReaderExecuted"</span><span class="pun">,</span><span class="pln"> _stopwatch</span><span class="pun">.</span><span class="typ">Elapsed</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Command: {0}: "</span><span class="pun">,</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">CommandText</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">ReaderExecuted</span><span class="pun">(</span><span class="pln">command</span><span class="pun">,</span><span class="pln"> interceptionContext</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>For successful queries or commands, this code writes an Information log with latency information. For exceptions, it creates an Error log.&nbsp;</p>
</li>
<li>
<p>To create the interceptor class that will generate dummy transient errors when you enter "Throw" in the <strong>Search</strong> box, create a class file named <em>SchoolInterceptorTransientErrors.cs</em> in the <em>DAL</em> folder, and replace the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Common</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">Infrastructure</span><span class="pun">.</span><span class="typ">Interception</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">SqlServer</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">SqlClient</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Diagnostics</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Reflection</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Linq</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Logging</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SchoolInterceptorTransientErrors</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbCommandInterceptor</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> _counter </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">ILogger</span><span class="pln"> _logger </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">();</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ReaderExecuting</span><span class="pun">(</span><span class="typ">DbCommand</span><span class="pln"> command</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DbCommandInterceptionContext</span><span class="pun">&lt;</span><span class="typ">DbDataReader</span><span class="pun">&gt;</span><span class="pln"> interceptionContext</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">bool</span><span class="pln"> throwTransientErrors </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">command</span><span class="pun">.</span><span class="typ">Parameters</span><span class="pun">.</span><span class="typ">Count</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">Parameters</span><span class="pun">[</span><span class="lit">0</span><span class="pun">].</span><span class="typ">Value</span><span class="pun">.</span><span class="typ">ToString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"%Throw%"</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                throwTransientErrors </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
                command</span><span class="pun">.</span><span class="typ">Parameters</span><span class="pun">[</span><span class="lit">0</span><span class="pun">].</span><span class="typ">Value</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"%an%"</span><span class="pun">;</span><span class="pln">
                command</span><span class="pun">.</span><span class="typ">Parameters</span><span class="pun">[</span><span class="lit">1</span><span class="pun">].</span><span class="typ">Value</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"%an%"</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">throwTransientErrors </span><span class="pun">&amp;&amp;</span><span class="pln"> _counter </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                _logger</span><span class="pun">.</span><span class="typ">Information</span><span class="pun">(</span><span class="str">"Returning transient error for command: {0}"</span><span class="pun">,</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">CommandText</span><span class="pun">);</span><span class="pln">
                _counter</span><span class="pun">++;</span><span class="pln">
                interceptionContext</span><span class="pun">.</span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">CreateDummySqlException</span><span class="pun">();</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">SqlException</span><span class="pln"> </span><span class="typ">CreateDummySqlException</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// The instance of SQL Server you attempted to connect to does not support encryption</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> sqlErrorNumber </span><span class="pun">=</span><span class="pln"> </span><span class="lit">20</span><span class="pun">;</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> sqlErrorCtor </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pun">(</span><span class="typ">SqlError</span><span class="pun">).</span><span class="typ">GetConstructors</span><span class="pun">(</span><span class="typ">BindingFlags</span><span class="pun">.</span><span class="typ">Instance</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="typ">BindingFlags</span><span class="pun">.</span><span class="typ">NonPublic</span><span class="pun">).</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">GetParameters</span><span class="pun">().</span><span class="typ">Count</span><span class="pun">()</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">7</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> sqlError </span><span class="pun">=</span><span class="pln"> sqlErrorCtor</span><span class="pun">.</span><span class="typ">Invoke</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> sqlErrorNumber</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">});</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> errorCollection </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Activator</span><span class="pun">.</span><span class="typ">CreateInstance</span><span class="pun">(</span><span class="kwd">typeof</span><span class="pun">(</span><span class="typ">SqlErrorCollection</span><span class="pun">),</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> addMethod </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pun">(</span><span class="typ">SqlErrorCollection</span><span class="pun">).</span><span class="typ">GetMethod</span><span class="pun">(</span><span class="str">"Add"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">BindingFlags</span><span class="pun">.</span><span class="typ">Instance</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="typ">BindingFlags</span><span class="pun">.</span><span class="typ">NonPublic</span><span class="pun">);</span><span class="pln">
            addMethod</span><span class="pun">.</span><span class="typ">Invoke</span><span class="pun">(</span><span class="pln">errorCollection</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> sqlError </span><span class="pun">});</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> sqlExceptionCtor </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pun">(</span><span class="typ">SqlException</span><span class="pun">).</span><span class="typ">GetConstructors</span><span class="pun">(</span><span class="typ">BindingFlags</span><span class="pun">.</span><span class="typ">Instance</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="typ">BindingFlags</span><span class="pun">.</span><span class="typ">NonPublic</span><span class="pun">).</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">GetParameters</span><span class="pun">().</span><span class="typ">Count</span><span class="pun">()</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">4</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> sqlException </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">SqlException</span><span class="pun">)</span><span class="pln">sqlExceptionCtor</span><span class="pun">.</span><span class="typ">Invoke</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"Dummy"</span><span class="pun">,</span><span class="pln"> errorCollection</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Guid</span><span class="pun">.</span><span class="typ">NewGuid</span><span class="pun">()</span><span class="pln"> </span><span class="pun">});</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> sqlException</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code only overrides the <code>ReaderExecuting</code> method, which is called for queries that can return multiple rows of data. If you wanted to check connection resiliency for other types of queries, you could also override the <code>NonQueryExecuting</code> and <code>ScalarExecuting</code> methods, as the logging interceptor does.</p>
<p>When you run the Student page and enter "Throw" as the search string, this code creates a dummy SQL Database exception for error number 20, a type known to be typically transient. Other error numbers currently recognized as transient are 64, 233, 10053, 10054, 10060, 10928, 10929, 40197, 40501, abd 40613, but these are subject to change in new versions of SQL Database.</p>
<p>The code returns the exception to Entity Framework instead of running the query and passing back query results. The transient exception is returned four times, and then the code reverts to the normal procedure of passing the query to the database.</p>
<p>Because everything is logged, you'll be able to see that Entity Framework tries to execute the query four times before finally succeeding, and the only difference in the application is that it takes longer to render a page with query results.</p>
<p>The number of times the Entity Framework will retry is configurable; the code specifies four times because that's the default value for the SQL Database execution policy. If you change the execution policy, you'd also change the code here that specifies how many times transient errors are generated. You could also change the code to generate more exceptions so that Entity Framework will throw the<code>RetryLimitExceededException</code> exception.</p>
<p>The value you enter in the Search box will be in <code>command.Parameters[0]</code> and <code>command.Parameters[1]</code> (one is used for the first name and one for the last name). When the value "%Throw%" is found, "Throw" is replaced in those parameters by "an" so that some students will be found and returned.&nbsp;</p>
<p>This is just a convenient way to test connection resiliency based on changing some input to the application UI. You can also write code that generates transient errors for all queries or updates, as explained later in the comments about the <em>DbInterception.Add</em> method.</p>
</li>
<li>
<p>In <em>Global.asax</em>, add the following <code>using</code> statements:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">Infrastructure</span><span class="pun">.</span><span class="typ">Interception</span><span class="pun">;</span></pre>
</li>
<li>
<p>Add the highlighted lines to the <code>Application_Start</code> method:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Application_Start</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="typ">AreaRegistration</span><span class="pun">.</span><span class="typ">RegisterAllAreas</span><span class="pun">();</span><span class="pln">
    </span><span class="typ">FilterConfig</span><span class="pun">.</span><span class="typ">RegisterGlobalFilters</span><span class="pun">(</span><span class="typ">GlobalFilters</span><span class="pun">.</span><span class="typ">Filters</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">RouteConfig</span><span class="pun">.</span><span class="typ">RegisterRoutes</span><span class="pun">(</span><span class="typ">RouteTable</span><span class="pun">.</span><span class="typ">Routes</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">BundleConfig</span><span class="pun">.</span><span class="typ">RegisterBundles</span><span class="pun">(</span><span class="typ">BundleTable</span><span class="pun">.</span><span class="typ">Bundles</span><span class="pun">);</span><span class="pln">
    </span><mark><span class="typ">DbInterception</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SchoolInterceptorTransientErrors</span><span class="pun">());</span></mark><span class="pln">
    </span><mark><span class="typ">DbInterception</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SchoolInterceptorLogging</span><span class="pun">());</span></mark><span class="pln">
</span><span class="pun">}</span></pre>
<p>These lines of code are what causes your interceptor code to be run when Entity Framework sends queries to the database. Notice that because you created separate interceptor classes for transient error simulation and logging, you can independently enable and disable them.</p>
<p>You can add interceptors using the <code>DbInterception.Add</code> method anywhere in your code; it doesn't have to be in the<code>Application_Start</code> method. Another option is to put this code in the DbConfiguration class that you created earlier to configure the execution policy.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SchoolConfiguration</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbConfiguration</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SchoolConfiguration</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">SetExecutionStrategy</span><span class="pun">(</span><span class="str">"System.Data.SqlClient"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SqlAzureExecutionStrategy</span><span class="pun">());</span><span class="pln">
        </span><mark><span class="typ">DbInterception</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SchoolInterceptorTransientErrors</span><span class="pun">());</span></mark><span class="pln">
        </span><mark><span class="typ">DbInterception</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SchoolInterceptorLogging</span><span class="pun">());</span></mark><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>Wherever you put this code, be careful not to execute <code>DbInterception.Add</code> for the same interceptor more than once, or you'll get additional interceptor instances.&nbsp; For example, if you add the logging interceptor twice, you'll see two logs for every SQL query.</p>
<p>Interceptors are executed in the order of registration (the order in which the <code>DbInterception.Add</code> method is called). The order might matter depending on what you're doing in the interceptor. For example, an interceptor might change the SQL command that it gets in the <code>CommandText</code> property. If it does change the SQL command, the next interceptor will get the changed SQL command, not the original SQL command.</p>
<p>You've written the transient error simulation code in a way that lets you cause transient errors by entering a different value in the UI.&nbsp; As an alternative, you could write the interceptor code to always generate the sequence of transient exceptions without checking for a particular parameter value. You could then add the interceptor only when you want to generate transient errors. If you do this, however, don't add the interceptor until after database initialization has completed. In other words, do at least one database operation such as a query on one of your entity sets before you start generating transient errors. The Entity Framework executes several queries during database initialization, and they aren't executed in a transaction, so errors during initialization could cause the context to get into an inconsistent state.&nbsp;</p>
</li>
</ol>
<h2>Test logging and connection resiliency</h2>
<ol>
<li>
<p>Press F5 to run the application in debug mode, and then click the <strong>Students</strong> tab.</p>
</li>
<li>
<p>Look at the Visual Studio <strong>Output</strong> window to see the tracing output. You might have to scroll up past some JavaScript errors to get to the logs written by your logger.</p>
<p>Notice that you can see the actual SQL queries sent to the database. You see some initial queries and commands that Entity Framework does to get started, checking the database version and migration history table (you'll learn about migrations in the next tutorial). And you see a query for paging, to find out how many students there are, and finally you see the query that gets the student data.</p>
<p><img alt="Logging for normal query" src="http://media-www-asp.azureedge.net/media/4661762/logsinoutputwindow.png" data-original="//media-www-asp.azureedge.net/media/4661762/logsinoutputwindow.png" /></p>
</li>
<li>
<p>In the <strong>Students</strong> page, enter "Throw" as the search string, and click <strong>Search</strong>.</p>
<p><img alt="Throw search string" src="http://media-www-asp.azureedge.net/media/48053/throwsearch.png" data-original="//media-www-asp.azureedge.net/media/48053/throwsearch.png" /></p>
<p>You'll notice that the browser seems to hang for several seconds while Entity Framework is retrying the query several times. The first retry happens very quickly, then the wait before increases before each additional retry. This process of waiting longer before each retry is called<em>exponential backoff</em>.</p>
<p>When the page displays, showing students who have "an" in their names, look at the output window, and you'll see that the same query was attempted five times, the first four times returning transient exceptions.&nbsp; For each transient error you'll see the log that you write when generating the transient error in the&nbsp; <code>SchoolInterceptorTransientErrors</code> class ("Returning transient error for command...") and you'll see the log written when <code>SchoolInterceptorLogging</code> gets the exception.</p>
<p><img alt="Logging output showing retries" src="http://media-www-asp.azureedge.net/media/4661756/transienterrorsinoutputwindow.png" data-original="//media-www-asp.azureedge.net/media/4661756/transienterrorsinoutputwindow.png" /></p>
<p>Since you entered a search string, the query that returns student data is parameterized:</p>
<pre class="prettyprint prettyprinted"><span class="pln">SELECT TOP </span><span class="pun">(</span><span class="lit">3</span><span class="pun">)</span><span class="pln"> 
    </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="pln">ID</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="pln">ID</span><span class="pun">],</span><span class="pln"> 
    </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="typ">LastName</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">LastName</span><span class="pun">],</span><span class="pln"> 
    </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="typ">FirstMidName</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">FirstMidName</span><span class="pun">],</span><span class="pln"> 
    </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="typ">EnrollmentDate</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">EnrollmentDate</span><span class="pun">]</span><span class="pln">
    FROM </span><span class="pun">(</span><span class="pln"> SELECT </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="pln">ID</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="pln">ID</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="typ">LastName</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">LastName</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="typ">FirstMidName</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">FirstMidName</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="typ">EnrollmentDate</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">EnrollmentDate</span><span class="pun">],</span><span class="pln"> row_number</span><span class="pun">()</span><span class="pln"> OVER </span><span class="pun">(</span><span class="pln">ORDER BY </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="typ">LastName</span><span class="pun">]</span><span class="pln"> ASC</span><span class="pun">)</span><span class="pln"> AS </span><span class="pun">[</span><span class="pln">row_number</span><span class="pun">]</span><span class="pln">
        FROM </span><span class="pun">(</span><span class="pln"> SELECT 
            </span><span class="pun">[</span><span class="typ">Extent1</span><span class="pun">].[</span><span class="pln">ID</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="pln">ID</span><span class="pun">],</span><span class="pln"> 
            </span><span class="pun">[</span><span class="typ">Extent1</span><span class="pun">].[</span><span class="typ">LastName</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">LastName</span><span class="pun">],</span><span class="pln"> 
            </span><span class="pun">[</span><span class="typ">Extent1</span><span class="pun">].[</span><span class="typ">FirstMidName</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">FirstMidName</span><span class="pun">],</span><span class="pln"> 
            </span><span class="pun">[</span><span class="typ">Extent1</span><span class="pun">].[</span><span class="typ">EnrollmentDate</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">EnrollmentDate</span><span class="pun">]</span><span class="pln">
            FROM </span><span class="pun">[</span><span class="pln">dbo</span><span class="pun">].[</span><span class="typ">Student</span><span class="pun">]</span><span class="pln"> AS </span><span class="pun">[</span><span class="typ">Extent1</span><span class="pun">]</span><span class="pln">
            WHERE </span><span class="pun">([</span><span class="typ">Extent1</span><span class="pun">].[</span><span class="typ">LastName</span><span class="pun">]</span><span class="pln"> LIKE </span><span class="lit">@p__linq__0</span><span class="pln"> ESCAPE N</span><span class="str">'~'</span><span class="pun">)</span><span class="pln"> OR </span><span class="pun">([</span><span class="typ">Extent1</span><span class="pun">].[</span><span class="typ">FirstMidName</span><span class="pun">]</span><span class="pln"> LIKE </span><span class="lit">@p__linq__1</span><span class="pln"> ESCAPE N</span><span class="str">'~'</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">)</span><span class="pln">  AS </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">]</span><span class="pln">
    </span><span class="pun">)</span><span class="pln">  AS </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">]</span><span class="pln">
    WHERE </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="pln">row_number</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pln">
    ORDER BY </span><span class="pun">[</span><span class="typ">Project1</span><span class="pun">].[</span><span class="typ">LastName</span><span class="pun">]</span><span class="pln"> ASC</span><span class="pun">:</span></pre>
<p>You're not logging the value of the parameters, but you could do that. If you want to see the parameter values, you can write logging code to get parameter values from the <code>Parameters</code> property of the <code>DbCommand</code> object that you get in the interceptor methods.&nbsp;&nbsp;</p>
<p>Note that you can't repeat this test unless you stop the application and restart it. If you wanted to be able to test connection resiliency multiple times in a single run of the application, you could write code to reset the error counter in<code>SchoolInterceptorTransientErrors</code>.</p>
</li>
<li>
<p>To see the difference the execution strategy (retry policy) makes, comment out the <code>SetExecutionStrategy</code> line in <em>SchoolConfiguration.cs</em>, run the Students page in debug mode again, and search for "Throw" again.</p>
<p>This time the debugger stops on the first generated exception immediately when it tries to execute the query the first time.</p>
<p><img alt="Dummy Exception" src="http://media-www-asp.azureedge.net/media/48012/dummyexception.png" data-original="//media-www-asp.azureedge.net/media/48012/dummyexception.png" /></p>
</li>
<li>
<p>Uncomment the <em>SetExecutionStrategy</em> line in <em>SchoolConfiguration.cs</em>.</p>
</li>
</ol>
<h2>Summary</h2>
<p>In this tutorial you've seen how to enable connection resiliency and log SQL commands that Entity Framework composes and sends to the database. In the next tutorial you'll deploy the application to the Internet, using Code First Migrations to deploy the database.</p>
</body>
</html>
***********************************
Filename: Creating a More Complex Data Model.html
***********************************
<!DOCTYPE html>
<html>
<head>
</head>
<body style="font-family: arial, helvetica, sans-serif;font-size: 12px;">
<div class="important important-box-article">
<p>In the previous tutorials you worked with a simple data model that was composed of three entities. In this tutorial you'll add more entities and relationships and you'll customize the data model by specifying formatting, validation, and database mapping rules. You'll see two ways to customize the data model:&nbsp; by adding attributes to entity classes and by adding code to the database context class.</p>
</div>
<p>When you're finished, the entity classes will make up the completed data model that's shown in the following illustration:</p>
<p><img src="http://media-www-asp.azureedge.net/media/48014/entitydiagram.png" data-original="//media-www-asp.azureedge.net/media/48014/entitydiagram.png" alt="School_class_diagram" border="0" /></p>
<h2>Customize the Data Model by Using Attributes</h2>
<p>In this section you'll see how to customize the data model by using attributes that specify formatting, validation, and database mapping rules. Then in several of the following sections you'll create the complete <code>School</code> data model by adding attributes to the classes you already created and creating new classes for the remaining entity types in the model.</p>
<h3>The DataType Attribute</h3>
<p>For student enrollment dates, all of the web pages currently display the time along with the date, although all you care about for this field is the date. By using data annotation attributes, you can make one code change that will fix the display format in every view that shows the data. To see an example of how to do that, you'll add an attribute to the <code>EnrollmentDate</code> property in the <code>Student</code> class.</p>
<p>In <em>Models\Student.cs</em>, add a <code>using</code> statement for the <code>System.ComponentModel.DataAnnotations</code> namespace and add <code>DataType</code> and<code>DisplayFormat</code> attributes to the <code>EnrollmentDate</code> property, as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><mark><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span></mark><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Student</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> ID </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">DataFormatString</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{0:yyyy-MM-dd}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ApplyFormatInEditMode</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)]</span></mark><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatypeattribute.aspx">DataType</a> attribute is used to specify a data type that is more specific than the database intrinsic type. In this case we only want to keep track of the date, not the date and time. The&nbsp; <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatype.aspx">DataType Enumeration</a> provides for many data types, such as <em>Date, Time, PhoneNumber, Currency, EmailAddress</em> and more. The <code>DataType</code> attribute can also enable the application to automatically provide type-specific features. For example, a <code>mailto:</code> link can be created for <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatype.aspx">DataType.EmailAddress</a>, and a date selector can be provided for <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatype.aspx">DataType.Date</a> in browsers that support <a href="http://html5.org/">HTML5</a>. The <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatypeattribute.aspx">DataType</a> attributes emits HTML 5 <a href="http://ejohn.org/blog/html-5-data-attributes/">data-</a> (pronounced <em>data dash</em>) attributes that HTML 5 browsers can understand. The<a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatypeattribute.aspx">DataType</a> attributes do not provide any validation.&nbsp;</p>
<p><code>DataType.Date</code> does not specify the format of the date that is displayed. By default, the data field is displayed according to the default formats based on the server's <a href="http://msdn.microsoft.com/en-us/library/vstudio/system.globalization.cultureinfo(v=vs.110).aspx">CultureInfo</a>.</p>
<p>The <code>DisplayFormat</code> attribute is used to explicitly specify the date format:</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">DataFormatString</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{0:yyyy-MM-dd}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ApplyFormatInEditMode</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)]</span></pre>
<p>The <code>ApplyFormatInEditMode</code> setting specifies that the specified formatting should also be applied when the value is displayed in a text box for editing. (You might not want that for some fields &mdash; for example, for currency values, you might not want the currency symbol in the text box for editing.)</p>
<p>You can use the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.displayformatattribute.aspx">DisplayFormat</a> attribute by itself, but it's generally a good idea to use the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatypeattribute.aspx">DataType</a> attribute also. The <code>DataType</code> attribute conveys the <em>semantics</em> of the data as opposed to how to render it on a screen, and provides the following benefits that you don't get with<code>DisplayFormat</code>:</p>
<ul>
<li>The browser can enable HTML5 features (for example to show a calendar control, the locale-appropriate currency symbol, email links, some client-side input validation, etc.).</li>
<li>By default, the browser will render data using the correct format based on your <a href="http://msdn.microsoft.com/en-us/library/vstudio/wyzd2bce.aspx">locale</a>.</li>
<li>The <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatypeattribute.aspx">DataType</a> attribute can enable MVC to choose the right field template to render the data (the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.displayformatattribute.aspx">DisplayFormat</a> uses the string template). For more information, see Brad Wilson's <a href="http://bradwilson.typepad.com/blog/2009/10/aspnet-mvc-2-templates-part-1-introduction.html">ASP.NET MVC 2 Templates</a>. (Though written for MVC 2, this article still applies to the current version of ASP.NET MVC.)</li>
</ul>
<p>If you use the <code>DataType</code> attribute with a date field, you have to specify the <code>DisplayFormat</code> attribute also in order to ensure that the field renders correctly in Chrome browsers. For more information, see <a href="http://stackoverflow.com/questions/12633471/mvc4-datatype-date-editorfor-wont-display-date-value-in-chrome-fine-in-ie">this StackOverflow thread</a>.</p>
<p>For more information about how to handle other date formats in MVC, go to <a href="http://www.asp.net/mvc/tutorials/mvc-5/introduction/examining-the-edit-methods-and-edit-view">MVC 5 Introduction: Examining the Edit Methods and Edit View</a>and search in the page for "internationalization".</p>
<p>Run the Student Index page again and notice that times are no longer displayed for the enrollment dates. The same will be true for any view that uses the <code>Student </code>model.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48007/dateformat.png" data-original="//media-www-asp.azureedge.net/media/48007/dateformat.png" alt="Students_index_page_with_formatted_date" /></p>
<h3>The StringLengthAttribute</h3>
<p>You can also specify data validation rules and validation error messages using attributes. The <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.stringlengthattribute.aspx">StringLength attribute</a> sets the maximum length&nbsp; in the database and provides client side and server side validation for ASP.NET MVC. You can also specify the minimum string length in this attribute, but the minimum value has no impact on the database schema.</p>
<p>Suppose you want to ensure that users don't enter more than 50 characters for a name. To add this limitation, add <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.stringlengthattribute.aspx">StringLength</a> attributes to the <code>LastName</code> and <code>FirstMidName</code> properties, as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Student</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> ID </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">)]</span></mark><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ErrorMessage</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"First name cannot be longer than 50 characters."</span><span class="pun">)]</span></mark><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">DataFormatString</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{0:yyyy-MM-dd}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ApplyFormatInEditMode</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.stringlengthattribute.aspx">StringLength</a> attribute won't prevent a user from entering white space for a name. You can use the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.regularexpressionattribute.aspx">RegularExpression</a> attribute to apply restrictions to the input. For example the following code requires the first character to be upper case and the remaining characters to be alphabetical:</p>
<p><code>[RegularExpression(@"^[A-Z]+[a-zA-Z''-'\s]*$")]</code></p>
<p>The <a href="http://msdn.microsoft.com/en-us/library/System.ComponentModel.DataAnnotations.MaxLengthAttribute.aspx">MaxLength</a> attribute provides similar functionality to the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.stringlengthattribute.aspx">StringLength</a> attribute but doesn't provide client side validation.</p>
<p>Run the application and click the <strong>Students</strong> tab. You get the following error:</p>
<p class="ErrorFont"><em>The model backing the 'SchoolContext' context has changed since the database was created. Consider using Code First Migrations to update the database (<a href="http://go.microsoft.com/fwlink/?LinkId=238269">http://go.microsoft.com/fwlink/?LinkId=238269</a>).</em></p>
<p>The database model&nbsp; has changed in a way that requires a change in the database schema, and Entity Framework detected that. You'll use migrations to update the schema without losing any data that you added to the database by using the UI. If you changed data that was created by the <code>Seed</code> method, that will be changed back to its original state because of the <a href="http://msdn.microsoft.com/en-us/library/hh846520(v=vs.103).aspx">AddOrUpdate</a> method that you're using in the <code>Seed</code>method. (<a href="http://msdn.microsoft.com/en-us/library/hh846520(v=vs.103).aspx">AddOrUpdate</a> is equivalent to an "upsert" operation from database terminology.)</p>
<p>In the Package Manager Console (PMC), enter the following commands:</p>
<p>a<code>dd-migration MaxLengthOnNames<br />update-database</code></p>
<p>The <code>add-migration</code> command creates a file named <em>&lt;timeStamp&gt;_MaxLengthOnNames.cs</em>. This file contains code in the <code>Up</code> method that will update the database to match the current data model. The <code>update-database</code> command ran that code.</p>
<p>The timestamp prepended to the migrations file name is used by Entity Framework to order the migrations. You can create multiple migrations before running the <code>update-database</code> command, and then all of the migrations are applied in the order in which they were created.</p>
<p>Run the <strong>Create</strong> page, and enter either name longer than 50 characters. When you click <strong>Create</strong>, client side validation shows an error message.<span class="crossOut"></span></p>
<p>&nbsp;<img src="http://media-www-asp.azureedge.net/media/4481984/longnameerr.png" data-original="//media-www-asp.azureedge.net/media/4481984/longnameerr.png" alt="client side val error" /></p>
<h3>The Column Attribute</h3>
<p>You can also use attributes to control how your classes and properties are mapped to the database. Suppose you had used the name<code>FirstMidName</code> for the first-name field because the field might also contain a middle name. But you want the database column to be named<code>FirstName</code>, because users who will be writing ad-hoc queries against the database are accustomed to that name. To make this mapping, you can use the <code>Column</code> attribute.</p>
<p>The <code>Column</code> attribute specifies that when the database is created, the column of the <code>Student</code> table that maps to the <code>FirstMidName</code> property will be named <code>FirstName</code>. In other words, when your code refers to <code>Student.FirstMidName</code>, the data will come from or be updated in the<code>FirstName</code> column of the <code>Student</code> table. If you don't specify column names, they are given the same name as the property name.</p>
<p>In the <em>Student.cs</em> file, add a <code>using</code> statement for <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.schema.aspx">System.ComponentModel.DataAnnotations.Schema</a> and add the column name attribute to the<code>FirstMidName</code> property, as shown in the following highlighted code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span><span class="pln">
</span><mark><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">.</span><span class="typ">Schema</span><span class="pun">;</span></mark><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Student</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> ID </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">)]</span><span class="pln">       
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ErrorMessage</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"First name cannot be longer than 50 characters."</span><span class="pun">)]</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">Column</span><span class="pun">(</span><span class="str">"FirstName"</span><span class="pun">)]</span></mark><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">DataFormatString</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{0:yyyy-MM-dd}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ApplyFormatInEditMode</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)]</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The addition of the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.schema.columnattribute.aspx">Column attribute </a>changes the model backing the SchoolContext, so it won't match the database. Enter the following commands in the PMC to create another migration:</p>
<p><code>add-migration ColumnFirstName<br />update-database</code></p>
<p>In <strong>Server Explorer</strong>, open the <em>Student</em> table designer by double-clicking the <em>Student</em> table.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48050/studenttableafter.png" data-original="//media-www-asp.azureedge.net/media/48050/studenttableafter.png" /></p>
<p>The following image shows the original column name as it was before you applied the first two migrations. In addition to the column name changing from <code>FirstMidName </code>to <code>FirstName</code>, the two name columns have changed from <code>MAX </code>length to 50 characters.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48051/studenttablebefore.png" data-original="//media-www-asp.azureedge.net/media/48051/studenttablebefore.png" /></p>
<p>You can also make database mapping changes using the <a href="http://msdn.microsoft.com/en-us/data/jj591617">Fluent API</a>, as you'll see later in this tutorial.</p>
<div class="note"><span></span>
<p><strong>Note</strong> If you try to compile before you finish creating all of the entity classes in the following sections, you might get compiler errors.</p>
</div>
<h2>Complete Changes to the Student Entity</h2>
<p><img src="http://media-www-asp.azureedge.net/media/4359330/student_entity.png" data-original="//media-www-asp.azureedge.net/media/4359330/student_entity.png" alt="Student_entity" border="0" /></p>
<p>In <em>Models\Student.cs</em>, replace the code you added earlier with the following code. The changes are highlighted.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">.</span><span class="typ">Schema</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Student</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> ID </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">Required</span><span class="pun">]</span></mark><span class="pln">
        </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">)]</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Last Name"</span><span class="pun">)]</span></mark><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">Required</span><span class="pun">]</span></mark><span class="pln">
        </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ErrorMessage</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"First name cannot be longer than 50 characters."</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">Column</span><span class="pun">(</span><span class="str">"FirstName"</span><span class="pun">)]</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"First Name"</span><span class="pun">)]</span></mark><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">DataFormatString</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{0:yyyy-MM-dd}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ApplyFormatInEditMode</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)]</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Enrollment Date"</span><span class="pun">)]</span></mark><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><mark><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Full Name"</span><span class="pun">)]</span></mark><span class="pln">
        </span><mark><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FullName</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">get</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">", "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span></mark><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<h3>The Required Attribute</h3>
<p>The <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.requiredattribute.aspx">Required attribute</a> makes the name properties required fields. The <code>Required attribute</code> is not needed for value types such as DateTime, int, double, and float. Value types cannot be assigned a null value, so they are inherently treated as required fields. You could remove the<a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.requiredattribute.aspx">Required attribute</a> and replace it with a minimum length parameter for the <code>StringLength</code> attribute:</p>
<pre class="prettyprint prettyprinted"><span class="pln">      </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Last Name"</span><span class="pun">)]</span><span class="pln">
      </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><mark><span class="pun">,</span><span class="pln"> </span><span class="typ">MinimumLength</span><span class="pun">=</span><span class="lit">1</span></mark><span class="pun">)]</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
<h3>The Display Attribute</h3>
<p>The <code>Display</code> attribute specifies that the caption for the text boxes should be "First Name", "Last Name", "Full Name", and "Enrollment Date" instead of the property name in each instance (which has no space dividing the words).</p>
<h3>The FullName Calculated Property</h3>
<p><code>FullName</code> is a calculated property that returns a value that's created by concatenating two other properties. Therefore it has only a <code>get</code>accessor, and no <code>FullName</code> column will be generated in the database.&nbsp;</p>
<h2>Create the Instructor Entity</h2>
<p><img src="http://media-www-asp.azureedge.net/media/4359306/instructor_entity.png" data-original="//media-www-asp.azureedge.net/media/4359306/instructor_entity.png" alt="Instructor_entity" border="0" /></p>
<p>Create <em>Models\Instructor.cs</em>, replacing the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">.</span><span class="typ">Schema</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> ID </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><span class="pun">[</span><span class="typ">Required</span><span class="pun">]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Last Name"</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><span class="pun">[</span><span class="typ">Required</span><span class="pun">]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">Column</span><span class="pun">(</span><span class="str">"FirstName"</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"First Name"</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">DataFormatString</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{0:yyyy-MM-dd}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ApplyFormatInEditMode</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hire Date"</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">HireDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Full Name"</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FullName</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">get</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">", "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>Notice that several properties are the same in the <code>Student</code> and <code>Instructor</code> entities. In the <a href="http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/implementing-inheritance-with-the-entity-framework-in-an-asp-net-mvc-application">Implementing Inheritance</a> tutorial later in this series, you'll refactor this code to eliminate the redundancy.</p>
<p>You can put multiple attributes on one line, so you could also write the instructor class as follows:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> ID </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

   </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Last Name"</span><span class="pun">),</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">,</span><span class="pln"> </span><span class="typ">MinimumLength</span><span class="pun">=</span><span class="lit">1</span><span class="pun">)]</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

   </span><span class="pun">[</span><span class="typ">Column</span><span class="pun">(</span><span class="str">"FirstName"</span><span class="pun">),</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"First Name"</span><span class="pun">),</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">,</span><span class="pln"> </span><span class="typ">MinimumLength</span><span class="pun">=</span><span class="lit">1</span><span class="pun">)]</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

   </span><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">),</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hire Date"</span><span class="pun">),</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">DataFormatString</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{0:yyyy-MM-dd}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ApplyFormatInEditMode</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)]</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">HireDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

   </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Full Name"</span><span class="pun">)]</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FullName</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">get</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">", "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">

   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<h3>The Courses and OfficeAssignment Navigation Properties</h3>
<p>The <code>Courses</code> and <code>OfficeAssignment</code> properties are navigation properties. As was explained earlier, they are typically defined as <a href="http://msdn.microsoft.com/en-us/library/9fkccyh4(v=vs.110).aspx">virtual</a> so that they can take advantage of an Entity Framework feature called <a href="http://msdn.microsoft.com/en-us/magazine/hh205756.aspx">lazy loading</a>. In addition, if a navigation property can hold multiple entities, its type must implement the <a href="http://msdn.microsoft.com/en-us/library/92t2ye13.aspx">ICollection&lt;T&gt;</a> Interface. For example <a href="http://msdn.microsoft.com/en-us/library/5y536ey6.aspx">IList&lt;T&gt;</a> qualifies but not <a href="http://msdn.microsoft.com/en-us/library/9eekhta0.aspx">IEnumerable&lt;T&gt;</a> because <code>IEnumerable&lt;T&gt;</code> doesn't implement <a href="http://msdn.microsoft.com/en-us/library/63ywd54z.aspx">Add</a>.</p>
<p>An instructor can teach any number of courses, so <code>Courses</code> is defined as a collection of <code>Course</code> entities.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
<p>Our business rules state an instructor can only have at most&nbsp;one office, so <code>OfficeAssignment</code> is defined as a single <code>OfficeAssignment</code> entity (which may be <code>null </code>if no office is assigned).</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
<h2>Create the OfficeAssignment Entity</h2>
<p><img src="http://media-www-asp.azureedge.net/media/4359318/officeassignment_entity.png" data-original="//media-www-asp.azureedge.net/media/4359318/officeassignment_entity.png" alt="OfficeAssignment_entity" border="0" /></p>
<p>Create <em>Models\OfficeAssignment.cs</em> with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">.</span><span class="typ">Schema</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">Key</span><span class="pun">]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">ForeignKey</span><span class="pun">(</span><span class="str">"Instructor"</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">)]</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Office Location"</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Location</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>Build the project, which saves your changes and verifies you haven't made any copy and paste errors the compiler can catch.</p>
<h3>The Key Attribute</h3>
<p>There's a one-to-zero-or-one relationship&nbsp; between the <code>Instructor</code> and the <code>OfficeAssignment</code> entities. An office assignment only exists in relation to the instructor it's assigned to, and therefore its primary key is also its foreign key to the <code>Instructor</code> entity. But the Entity Framework can't automatically recognize <code>InstructorID</code> as the primary key of this entity because its name doesn't follow the <code>ID</code> or<em>classname</em><code>ID</code> naming convention. Therefore, the <code><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.keyattribute.aspx">Key</a></code> attribute is used to identify it as the key:</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">Key</span><span class="pun">]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ForeignKey</span><span class="pun">(</span><span class="str">"Instructor"</span><span class="pun">)]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
<p>You can also use the <code><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.keyattribute.aspx">Key</a></code> attribute if the entity does have its own primary key but you want to name the property something different than<code><em>classname</em>ID</code> or <code>ID</code>. By default EF treats the key as non-database-generated because the column is for an identifying relationship.</p>
<h3>The ForeignKey Attribute</h3>
<p>When there is a&nbsp; one-to-zero-or-one relationship or a&nbsp; one-to-one relationship between two entities (such as between <code>OfficeAssignment</code>and <code>Instructor</code>), EF can't work out which end of the relationship is the principal and which end is dependent.&nbsp; One-to-one relationships have a reference navigation property in each class to the other class. The <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.schema.foreignkeyattribute.aspx">ForeignKey Attribute</a> can be applied to the dependent class to establish the relationship. If you omit the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.schema.foreignkeyattribute.aspx">ForeignKey Attribute</a>, you get the following error when you try to create the migration:</p>
<p><em>Unable to determine the principal end of an association between the types 'ContosoUniversity.Models.OfficeAssignment' and 'ContosoUniversity.Models.Instructor'. The principal end of this association must be explicitly configured using either the relationship fluent API or data annotations.</em></p>
<p>Later in the tutorial you'll see how to configure this relationship with the fluent API.</p>
<h3>The Instructor Navigation Property</h3>
<p>The <code>Instructor</code> entity has a nullable <code>OfficeAssignment</code> navigation property (because an instructor might not have an office assignment), and the <code>OfficeAssignment</code> entity has a non-nullable <code>Instructor</code> navigation property (because an office assignment can't exist without an instructor -- <code>InstructorID</code> is non-nullable). When an <code>Instructor</code> entity has a related <code>OfficeAssignment</code> entity, each entity will have a reference to the other one in its navigation property.</p>
<p>You could put a <code>[Required]</code> attribute on the Instructor navigation property to specify that there must be a related instructor, but you don't have to do that because the InstructorID foreign key (which is also the key to this table) is non-nullable.</p>
<h2>Modify the Course Entity</h2>
<p><img src="http://media-www-asp.azureedge.net/media/4359288/course_entity.png" data-original="//media-www-asp.azureedge.net/media/4359288/course_entity.png" alt="Course_entity" border="0" /></p>
<p>In <em>Models\Course.cs</em>, replace the code you added earlier with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">.</span><span class="typ">Schema</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Course</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="pun">[</span><span class="typ">DatabaseGenerated</span><span class="pun">(</span><span class="typ">DatabaseGeneratedOption</span><span class="pun">.</span><span class="kwd">None</span><span class="pun">)]</span><span class="pln">
      </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Number"</span><span class="pun">)]</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">,</span><span class="pln"> </span><span class="typ">MinimumLength</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">)]</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="pun">[</span><span class="typ">Range</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)]</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Department</span><span class="pln"> </span><span class="typ">Department</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The course entity has a foreign key property <code>DepartmentID</code> which points to the related <code>Department</code> entity and it has a <code>Department</code> navigation property. The Entity Framework doesn't require you to add a foreign key property to your data model when you have a navigation property for a related entity.&nbsp; EF automatically creates foreign keys in the database wherever they are needed. But having the foreign key in the data model can make updates simpler and more efficient. For example, when you fetch a course entity to edit, the&nbsp; <code>Department</code> entity is null if you don't load it, so when you update the course entity, you would have to first fetch the <code>Department</code> entity. When the foreign key&nbsp;property<code>DepartmentID</code> is included in the data model, you don't need to fetch the <code>Department</code> entity before you update.</p>
<h3>The DatabaseGenerated Attribute</h3>
<p>The <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.schema.databasegeneratedattribute.aspx">DatabaseGenerated attribute</a> with the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.schema.databasegeneratedoption(v=vs.110).aspx">None</a> parameter on the <code>CourseID</code> property specifies that primary key values are provided by the user rather than generated by the database.</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">DatabaseGenerated</span><span class="pun">(</span><span class="typ">DatabaseGeneratedOption</span><span class="pun">.</span><span class="kwd">None</span><span class="pun">)]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Number"</span><span class="pun">)]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
<p>By default, the Entity Framework assumes that primary key values are generated by the database. That's what you want in most scenarios. However, for <code>Course</code> entities, you'll use a user-specified course number such as a 1000 series for one department, a 2000 series for another department, and so on.</p>
<h3>Foreign Key and Navigation Properties</h3>
<p>The foreign key properties and navigation properties in the <code>Course</code> entity reflect the following relationships:</p>
<ul>
<li>A course is assigned to one department, so there's a <code>DepartmentID</code> foreign key and a <code>Department</code> navigation property for the reasons mentioned above.
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Department</span><span class="pln"> </span><span class="typ">Department</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
</li>
<li>A course can have any number of students enrolled in it, so the <code>Enrollments</code> navigation property is a collection:
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
</li>
<li>A course may be taught by multiple instructors, so the <code>Instructors</code> navigation property is a collection:
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
</li>
</ul>
<h2>Create the Department Entity</h2>
<p><img src="http://media-www-asp.azureedge.net/media/4359294/department_entity.png" data-original="//media-www-asp.azureedge.net/media/4359294/department_entity.png" alt="Department_entity" border="0" /></p>
<p>Create <em>Models\Department.cs </em>with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">.</span><span class="typ">Schema</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Department</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="pun">[</span><span class="typ">StringLength</span><span class="pun">(</span><span class="lit">50</span><span class="pun">,</span><span class="pln"> </span><span class="typ">MinimumLength</span><span class="pun">=</span><span class="lit">3</span><span class="pun">)]</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Name</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Currency</span><span class="pun">)]</span><span class="pln">
      </span><span class="pun">[</span><span class="typ">Column</span><span class="pun">(</span><span class="typ">TypeName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"money"</span><span class="pun">)]</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">decimal</span><span class="pln"> </span><span class="typ">Budget</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">)]</span><span class="pln">
      </span><span class="pun">[</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">DataFormatString</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{0:yyyy-MM-dd}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ApplyFormatInEditMode</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)]</span><span class="pln">
      </span><span class="pun">[</span><span class="typ">Display</span><span class="pun">(</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Start Date"</span><span class="pun">)]</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">StartDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> </span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="typ">Administrator</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<h3>The Column Attribute</h3>
<p>Earlier you used the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.schema.columnattribute.aspx">Column attribute</a> to change column name mapping. In the code for the <code>Department</code> entity, the <code>Column</code> attribute is being used to change SQL data type mapping so that the column will be defined using the SQL Server <a href="http://msdn.microsoft.com/en-us/library/ms179882.aspx">money</a> type in the database:</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">Column</span><span class="pun">(</span><span class="typ">TypeName</span><span class="pun">=</span><span class="str">"money"</span><span class="pun">)]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">decimal</span><span class="pln"> </span><span class="typ">Budget</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
<p>Column mapping is generally not required, because the Entity Framework usually chooses the appropriate SQL Server data type based on the CLR type that you define for the property. The CLR <code>decimal</code> type maps to a SQL Server <code>decimal</code> type. But in this case you know that the column will be holding currency amounts, and the <a href="http://msdn.microsoft.com/en-us/library/ms179882.aspx">money</a> data type is more appropriate for that. For more information about CLR data types and how they match to SQL Server data types, see <a href="http://msdn.microsoft.com/en-us/library/bb896344.aspx">SqlClient for Entity FrameworkTypes</a>.</p>
<h3>Foreign Key and Navigation Properties</h3>
<p>The foreign key and navigation properties reflect the following relationships:</p>
<ul>
<li>A department may or may not have an administrator, and an administrator is always an instructor. Therefore the <code>InstructorID</code> property is included as the foreign key to the <code>Instructor</code> entity, and a question mark is added after the <code>int</code> type designation to mark the property as nullable.The navigation property is named <code>Administrator</code> but holds an <code>Instructor</code> entity:
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> </span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="typ">Administrator</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
</li>
<li>A department may have many courses, so there's a <code>Courses</code> navigation property:
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
</li>
</ul>
<p><span class="Note"><strong>Note</strong> By convention, the Entity Framework enables cascade delete for non-nullable foreign keys and for many-to-many relationships. This can result in circular cascade delete rules, which will cause an exception when you try to add a migration. For example, if you didn't define the<code>Department.InstructorID</code> property as nullable, you'd get the following exception message: "The referential relationship will result in a cyclical reference that's not allowed." If your business rules required <code>InstructorID</code> property to be non-nullable, you would have to use the following fluent API statement to disable cascade delete on the relationship:</span></p>
<pre class="prettyprint prettyprinted"><span><span class="pln">modelBuilder</span><span class="pun">.</span><span class="typ">Entity</span></span><department><span class="pun">().</span><span class="typ">HasRequired</span><span class="pun">(</span><span class="pln">d </span><span class="pun">=&gt;</span><span class="pln"> d</span><span class="pun">.</span><span class="typ">Administrator</span><span class="pun">).</span><span class="typ">WithMany</span><span class="pun">().</span><span class="typ">WillCascadeOnDelete</span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span></department></pre>
<h2>Modify the Enrollment Entity</h2>
<p><img src="http://media-www-asp.azureedge.net/media/4358039/e.png" data-original="//media-www-asp.azureedge.net/media/4358039/e.png" alt="Enrollment_entity" /></p>
<p><span>In </span><em>Models\Enrollment.cs</em><span>, replace the code you added earlier with the following code</span></p>
<pre class="prettyprint prettyprinted"><mark><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span></mark><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="typ">Grade</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        A</span><span class="pun">,</span><span class="pln"> B</span><span class="pun">,</span><span class="pln"> C</span><span class="pun">,</span><span class="pln"> D</span><span class="pun">,</span><span class="pln"> F
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">EnrollmentID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><mark><span class="pun">[</span><span class="typ">DisplayFormat</span><span class="pun">(</span><span class="typ">NullDisplayText</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"No grade"</span><span class="pun">)]</span></mark><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">?</span><span class="pln"> </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<h3>Foreign Key and Navigation Properties</h3>
<p>The foreign key properties and navigation properties reflect the following relationships:</p>
<ul>
<li>An enrollment record is for a single course, so there's a <code>CourseID</code> foreign key property and a <code>Course</code> navigation property:
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
</li>
<li>An enrollment record is for a single student, so there's a <code>StudentID</code> foreign key property and a <code>Student</code> navigation property:
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
</li>
</ul>
<h3>Many-to-Many Relationships</h3>
<p>There's a many-to-many relationship between the <code>Student</code> and <code>Course</code> entities, and the <code>Enrollment</code> entity functions as a many-to-many join table <em>with payload</em> in the database. This means that the <code>Enrollment</code> table contains additional data besides foreign keys for the joined tables (in this case, a primary key and a <code>Grade</code> property).</p>
<p>The following illustration shows what these relationships look like in an entity diagram. (This diagram was generated using the <a href="http://visualstudiogallery.msdn.microsoft.com/72a60b14-1581-4b9b-89f2-846072eff19d">Entity Framework Power Tools</a>; creating the diagram isn't part of the tutorial, it's just being used here as an illustration.)</p>
<p><img src="http://media-www-asp.azureedge.net/media/48029/manytomany.png" data-original="//media-www-asp.azureedge.net/media/48029/manytomany.png" alt="Student-Course_many-to-many_relationship" border="0" /></p>
<p>Each relationship line has a 1 at one end and an asterisk (*) at the other, indicating a one-to-many relationship.</p>
<p>If the <code>Enrollment</code> table didn't include grade information, it would only need to contain the two foreign keys <code>CourseID</code> and <code>StudentID</code>. In that case, it would correspond to a many-to-many join table <em>without payload</em> (or a <em>pure join table</em>) in the database, and you wouldn't have to create a model class for it at all. The <code>Instructor</code> and <code>Course</code> entities have that kind of many-to-many relationship, and as you can see, there is no entity class between them:</p>
<p><img src="http://media-www-asp.azureedge.net/media/48018/instructorcourse.png" data-original="//media-www-asp.azureedge.net/media/48018/instructorcourse.png" alt="Instructor-Course_many-to-many_relationship" border="0" /></p>
<p>A join table is required in the database, however, as shown in the following database diagram:</p>
<p><img src="http://media-www-asp.azureedge.net/media/48008/dbmanytomany.png" data-original="//media-www-asp.azureedge.net/media/48008/dbmanytomany.png" alt="Instructor-Course_many-to-many_relationship_tables" border="0" /></p>
<p>The Entity Framework automatically creates the <code>CourseInstructor</code> table, and you read and update it indirectly by reading and updating the<code>Instructor.Courses</code> and <code>Course.Instructors</code> navigation properties.</p>
<h2>Entity Diagram Showing Relationships</h2>
<p>The following illustration shows the diagram that the Entity Framework Power Tools create for the completed School model.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48014/entitydiagram.png" data-original="//media-www-asp.azureedge.net/media/48014/entitydiagram.png" alt="School_data_model_diagram" border="0" /></p>
<p>Besides the many-to-many relationship lines (* to *) and the one-to-many relationship lines (1 to *), you can see here the one-to-zero-or-one relationship line (1 to 0..1) between the <code>Instructor</code> and <code>OfficeAssignment</code> entities and the zero-or-one-to-many relationship line (0..1 to *) between the <span>Instructor</span> and <span>Department</span> entities.</p>
<h2>Customize the Data Model by adding Code to the Database Context</h2>
<p>Next you'll add the new entities to the <code>SchoolContext</code> class and customize some of the mapping using <a href="http://msdn.microsoft.com/en-us/data/jj591617">fluent API</a> calls. The API is "fluent" because it's often used by stringing a series of method calls together into a single statement, as in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="pln"> modelBuilder</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;()</span><span class="pln">
     </span><span class="pun">.</span><span class="typ">HasMany</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">).</span><span class="typ">WithMany</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">)</span><span class="pln">
     </span><span class="pun">.</span><span class="typ">Map</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">MapLeftKey</span><span class="pun">(</span><span class="str">"CourseID"</span><span class="pun">)</span><span class="pln">
         </span><span class="pun">.</span><span class="typ">MapRightKey</span><span class="pun">(</span><span class="str">"InstructorID"</span><span class="pun">)</span><span class="pln">
         </span><span class="pun">.</span><span class="typ">ToTable</span><span class="pun">(</span><span class="str">"CourseInstructor"</span><span class="pun">));</span></pre>
<p>In this tutorial you'll use the fluent API only for database mapping that you can't do with attributes. However, you can also use the fluent API to specify most of the formatting, validation, and mapping rules that you can do by using attributes. Some attributes such as <code>MinimumLength</code>can't be applied with the fluent API. As mentioned previously, <code>MinimumLength </code>doesn't change the schema, it only applies a client and server side validation rule</p>
<p>Some developers prefer to use the fluent API exclusively so that they can keep their entity classes "clean." You can mix attributes and fluent API if you want, and there are a few customizations that can only be done by using fluent API, but in general the recommended practice is to choose one of these two approaches and use that consistently as much as possible.</p>
<p>To add the new entities to the data model and perform database mapping that you didn't do by using attributes, replace the code in<em>DAL\SchoolContext.cs</em> with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">ModelConfiguration</span><span class="pun">.</span><span class="typ">Conventions</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL
</span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SchoolContext</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbContext</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">Department</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Departments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">Student</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Students</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">OfficeAssignment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">OfficeAssignments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

      </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">OnModelCreating</span><span class="pun">(</span><span class="typ">DbModelBuilder</span><span class="pln"> modelBuilder</span><span class="pun">)</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
         modelBuilder</span><span class="pun">.</span><span class="typ">Conventions</span><span class="pun">.</span><span class="typ">Remove</span><span class="pun">&lt;</span><span class="typ">PluralizingTableNameConvention</span><span class="pun">&gt;();</span><span class="pln">

         modelBuilder</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;()</span><span class="pln">
             </span><span class="pun">.</span><span class="typ">HasMany</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">).</span><span class="typ">WithMany</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">)</span><span class="pln">
             </span><span class="pun">.</span><span class="typ">Map</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">MapLeftKey</span><span class="pun">(</span><span class="str">"CourseID"</span><span class="pun">)</span><span class="pln">
                 </span><span class="pun">.</span><span class="typ">MapRightKey</span><span class="pun">(</span><span class="str">"InstructorID"</span><span class="pun">)</span><span class="pln">
                 </span><span class="pun">.</span><span class="typ">ToTable</span><span class="pun">(</span><span class="str">"CourseInstructor"</span><span class="pun">));</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The new statement in the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext.onmodelcreating(v=vs.103).aspx">OnModelCreating</a> method configures the many-to-many join table:</p>
<ul>
<li>
<p>For the many-to-many relationship between the <code>Instructor</code> and <code>Course</code> entities, the code specifies the table and column names for the join table. Code First can configure the many-to-many relationship for you without this code, but if you don't call it, you will get default names such as <code>InstructorInstructorID</code> for the <code>InstructorID</code> column.</p>
<pre class="prettyprint prettyprinted"><span class="pln">modelBuilder</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;()</span><span class="pln">
    </span><span class="pun">.</span><span class="typ">HasMany</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">).</span><span class="typ">WithMany</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">.</span><span class="typ">Map</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">MapLeftKey</span><span class="pun">(</span><span class="str">"CourseID"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">MapRightKey</span><span class="pun">(</span><span class="str">"InstructorID"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">ToTable</span><span class="pun">(</span><span class="str">"CourseInstructor"</span><span class="pun">));</span></pre>
</li>
</ul>
<p>The following code provides an example of how you could have used fluent API instead of attributes to specify the relationship between the<code>Instructor</code> and <code>OfficeAssignment</code> entities:&nbsp;</p>
<pre class="prettyprint prettyprinted"><span class="pln">modelBuilder</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln">
    </span><span class="pun">.</span><span class="typ">HasOptional</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">).</span><span class="typ">WithRequired</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">Instructor</span><span class="pun">);</span></pre>
<p>For information about what "fluent API" statements are doing behind the scenes, see the <a href="http://blogs.msdn.com/b/aspnetue/archive/2011/05/04/entity-framework-code-first-tutorial-supplement-what-is-going-on-in-a-fluent-api-call.aspx">Fluent API</a> blog post.</p>
<h2>Seed the Database with Test Data</h2>
<p>Replace the code in the <em>Migrations\Configuration.cs</em> file with the following code in order to provide seed data for the new entities you've created.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Migrations</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">Migrations</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Linq</span><span class="pun">;</span><span class="pln">
    
    </span><span class="kwd">internal</span><span class="pln"> </span><span class="kwd">sealed</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Configuration</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbMigrationsConfiguration</span><span class="pun">&lt;</span><span class="typ">SchoolContext</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Configuration</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">AutomaticMigrationsEnabled</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Seed</span><span class="pun">(</span><span class="typ">SchoolContext</span><span class="pln"> context</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> students </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Student</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Carson"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2010-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Meredith"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Alonso"</span><span class="pun">,</span><span class="pln">    
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2012-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Arturo"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Anand"</span><span class="pun">,</span><span class="pln">     
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2013-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Gytis"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Barzdukas"</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2012-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Yan"</span><span class="pun">,</span><span class="pln">      </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Li"</span><span class="pun">,</span><span class="pln">        
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2012-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Peggy"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Justice"</span><span class="pun">,</span><span class="pln">   
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2011-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Laura"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Norman"</span><span class="pun">,</span><span class="pln">    
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2013-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Nino"</span><span class="pun">,</span><span class="pln">     </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Olivetto"</span><span class="pun">,</span><span class="pln">  
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2005-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">


            students</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> instructors </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Kim"</span><span class="pun">,</span><span class="pln">     </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Abercrombie"</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">HireDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"1995-03-11"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Fadi"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Fakhouri"</span><span class="pun">,</span><span class="pln">    
                    </span><span class="typ">HireDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2002-07-06"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Roger"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Harui"</span><span class="pun">,</span><span class="pln">       
                    </span><span class="typ">HireDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"1998-07-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Candace"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Kapoor"</span><span class="pun">,</span><span class="pln">      
                    </span><span class="typ">HireDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2001-01-15"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Roger"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Zheng"</span><span class="pun">,</span><span class="pln">      
                    </span><span class="typ">HireDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2004-02-12"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
            instructors</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> departments </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Department</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Department</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"English"</span><span class="pun">,</span><span class="pln">     </span><span class="typ">Budget</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">350000</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">StartDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2007-09-01"</span><span class="pun">),</span><span class="pln"> 
                    </span><span class="typ">InstructorID</span><span class="pln">  </span><span class="pun">=</span><span class="pln"> instructors</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Abercrombie"</span><span class="pun">).</span><span class="pln">ID </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Department</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Mathematics"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Budget</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">100000</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">StartDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2007-09-01"</span><span class="pun">),</span><span class="pln"> 
                    </span><span class="typ">InstructorID</span><span class="pln">  </span><span class="pun">=</span><span class="pln"> instructors</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Fakhouri"</span><span class="pun">).</span><span class="pln">ID </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Department</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Engineering"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Budget</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">350000</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">StartDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2007-09-01"</span><span class="pun">),</span><span class="pln"> 
                    </span><span class="typ">InstructorID</span><span class="pln">  </span><span class="pun">=</span><span class="pln"> instructors</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Harui"</span><span class="pun">).</span><span class="pln">ID </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Department</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Economics"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">Budget</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">100000</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">StartDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2007-09-01"</span><span class="pun">),</span><span class="pln"> 
                    </span><span class="typ">InstructorID</span><span class="pln">  </span><span class="pun">=</span><span class="pln"> instructors</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Kapoor"</span><span class="pun">).</span><span class="pln">ID </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
            departments</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Departments</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> courses </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1050</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pun">,</span><span class="pln">      </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> departments</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Engineering"</span><span class="pun">).</span><span class="typ">DepartmentID</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln"> 
                </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4022</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Microeconomics"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> departments</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Economics"</span><span class="pun">).</span><span class="typ">DepartmentID</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln"> 
                </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4041</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Macroeconomics"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> departments</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Economics"</span><span class="pun">).</span><span class="typ">DepartmentID</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln"> 
                </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1045</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Calculus"</span><span class="pun">,</span><span class="pln">       </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> departments</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Mathematics"</span><span class="pun">).</span><span class="typ">DepartmentID</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln"> 
                </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3141</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Trigonometry"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> departments</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Mathematics"</span><span class="pun">).</span><span class="typ">DepartmentID</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln"> 
                </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2021</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Composition"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> departments</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"English"</span><span class="pun">).</span><span class="typ">DepartmentID</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln"> 
                </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2042</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Literature"</span><span class="pun">,</span><span class="pln">     </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> departments</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"English"</span><span class="pun">).</span><span class="typ">DepartmentID</span><span class="pun">,</span><span class="pln">
                  </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln"> 
                </span><span class="pun">},</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
            courses</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> officeAssignments </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">OfficeAssignment</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> instructors</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Fakhouri"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Location</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Smith 17"</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> instructors</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Harui"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Location</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Gowan 27"</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> instructors</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Kapoor"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Location</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Thompson 304"</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
            officeAssignments</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">OfficeAssignments</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="pln">context</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Kapoor"</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="pln">context</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Harui"</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="pln">context</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Microeconomics"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Zheng"</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="pln">context</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Macroeconomics"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Zheng"</span><span class="pun">);</span><span class="pln">

            </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="pln">context</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Calculus"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Fakhouri"</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="pln">context</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Trigonometry"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Harui"</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="pln">context</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Composition"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Abercrombie"</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="pln">context</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Literature"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Abercrombie"</span><span class="pun">);</span><span class="pln">

            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> enrollments </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">A 
                </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Microeconomics"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">C 
                 </span><span class="pun">},</span><span class="pln">                            
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Macroeconomics"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                     </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alonso"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Calculus"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B 
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                     </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alonso"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Trigonometry"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B 
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alonso"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Composition"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B 
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Anand"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pln">
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Anand"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Microeconomics"</span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B         
                 </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Barzdukas"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B         
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Li"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Composition"</span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B         
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Justice"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Literature"</span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B         
                 </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">

            </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Enrollment</span><span class="pln"> e </span><span class="kwd">in</span><span class="pln"> enrollments</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">var</span><span class="pln"> enrollmentInDataBase </span><span class="pun">=</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">
                    s </span><span class="pun">=&gt;</span><span class="pln">
                         s</span><span class="pun">.</span><span class="typ">Student</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln">
                         s</span><span class="pun">.</span><span class="typ">Course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">).</span><span class="typ">SingleOrDefault</span><span class="pun">();</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">enrollmentInDataBase </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    context</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">AddOrUpdateInstructor</span><span class="pun">(</span><span class="typ">SchoolContext</span><span class="pln"> context</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> courseTitle</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> instructorName</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> crs </span><span class="pun">=</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">SingleOrDefault</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> courseTitle</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> inst </span><span class="pun">=</span><span class="pln"> crs</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">SingleOrDefault</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> instructorName</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">inst </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
                crs</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">context</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> instructorName</span><span class="pun">));</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>As you saw in the first tutorial, most of this code simply updates or creates new entity objects and loads sample data into properties as required for testing. However, notice how the <code>Course</code> entity, which has a many-to-many relationship with the <code>Instructor</code> entity, is handled:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">var</span><span class="pln"> courses </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1050</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pun">,</span><span class="pln">      </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln">
      </span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> departments</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln"> s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Engineering"</span><span class="pun">).</span><span class="typ">DepartmentID</span><span class="pun">,</span><span class="pln">
      </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;()</span><span class="pln"> 
    </span><span class="pun">},</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
</span><span class="pun">};</span><span class="pln">
courses</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">));</span><span class="pln">
context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span></pre>
<p>When you create a <code>Course</code> object, you initialize the <code>Instructors</code> navigation property as an empty collection using the code <code>Instructors = new List&lt;Instructor&gt;()</code>. This makes it possible to add <code>Instructor</code> entities that are related to this <code>Course</code> by using the <code>Instructors.Add</code>method. If you didn't create an empty list, you wouldn't be able to add these relationships, because the <code>Instructors</code> property would be null and wouldn't have an <code>Add</code> method. You could also add the list initialization to the constructor.</p>
<h2>Add a Migration and Update the Database</h2>
<p>From the PMC, enter the <code>add-migration</code> command (don't do the <code>update-database</code> command yet):</p>
<p><code>add-Migration ComplexDataModel</code></p>
<p>If you tried to run the <code>update-database</code> command at this point (don't do it yet), you would get the following error:</p>
<p><em>The ALTER TABLE statement conflicted with the FOREIGN KEY constraint "FK_dbo.Course_dbo.Department_DepartmentID". The conflict occurred in database "ContosoUniversity", table "dbo.Department", column 'DepartmentID'.</em></p>
<p>Sometimes when you execute migrations with existing data, you need to insert stub data into the database to satisfy foreign key constraints, and that's what you have to do now. The generated code in the ComplexDataModel <code>Up</code> method adds a non-nullable <code>DepartmentID</code> foreign key to the <code>Course</code> table. Because there are already rows in the <code>Course</code> table when the code runs, the <code>AddColumn</code> operation will fail because SQL Server doesn't know what value to put in the column that can't be null. Therefore have to change the code to give the new column a default value, and create a stub department named "Temp" to act as the default department. As a result, existing <code>Course</code> rows will all be related to the "Temp" department after the <code>Up</code> method runs.&nbsp; You can relate them to the correct departments in the <code>Seed</code> method.</p>
<p>Edit the &lt;<em>timestamp&gt;_ComplexDataModel.cs</em> file, comment out the line of code that adds the DepartmentID column to the Course table, and add the following highlighted code (the commented line is also highlighted):</p>
<pre class="prettyprint prettyprinted"><span class="pln">   </span><span class="typ">CreateTable</span><span class="pun">(</span><span class="pln">
        </span><span class="str">"dbo.CourseInstructor"</span><span class="pun">,</span><span class="pln">
        c </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">),</span><span class="pln">
                </span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">),</span><span class="pln">
            </span><span class="pun">})</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">PrimaryKey</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">})</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">ForeignKey</span><span class="pun">(</span><span class="str">"dbo.Course"</span><span class="pun">,</span><span class="pln"> t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> cascadeDelete</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">ForeignKey</span><span class="pun">(</span><span class="str">"dbo.Instructor"</span><span class="pun">,</span><span class="pln"> t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pun">,</span><span class="pln"> cascadeDelete</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Index</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Index</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pun">);</span><span class="pln">

</span><mark><span class="pln">    </span><span class="com">// Create  a department for course to point to.</span><span class="pln">
    </span><span class="typ">Sql</span><span class="pun">(</span><span class="str">"INSERT INTO dbo.Department (Name, Budget, StartDate) VALUES ('Temp', 0.00, GETDATE())"</span><span class="pun">);</span><span class="pln">
    </span><span class="com">//  default value for FK points to department created above.</span><span class="pln">
    </span><span class="typ">AddColumn</span><span class="pun">(</span><span class="str">"dbo.Course"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"DepartmentID"</span><span class="pun">,</span><span class="pln"> c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln"> defaultValue</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">));</span><span class="pln"> 
    </span><span class="com">//AddColumn("dbo.Course", "DepartmentID", c =&gt; c.Int(nullable: false));</span></mark><span class="pln">

    </span><span class="typ">AlterColumn</span><span class="pun">(</span><span class="str">"dbo.Course"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Title"</span><span class="pun">,</span><span class="pln"> c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">String</span><span class="pun">(</span><span class="pln">maxLength</span><span class="pun">:</span><span class="pln"> </span><span class="lit">50</span><span class="pun">));</span></pre>
<p>When the <code>Seed</code> method runs, it will insert rows in the <code>Department</code> table and it will relate existing <code>Course</code> rows to those new <code>Department</code> rows. If you haven't added any courses in the UI, you would then no longer need the "Temp" department or the default value on the<code>Course.DepartmentID</code> column. To allow for the possibility that someone might have added courses by using the application, you'd also want to update the <code>Seed</code> method code to ensure that all <code>Course</code> rows (not just the ones inserted by earlier runs of the <code>Seed</code> method) have valid<code>DepartmentID</code> values before you remove the default value from the column and delete the "Temp" department.</p>
<p>After you have finished editing the &lt;<em>timestamp&gt;_ComplexDataModel.cs</em> file, enter the <code>update-database</code> command in the PMC to execute the migration.</p>
<pre class="prettyprint prettyprinted"><span class="pln">update</span><span class="pun">-</span><span class="pln">database</span></pre>
<div class="note"><span></span>
<p><strong>Note:</strong> It's possible to get other errors when migrating data and making schema changes. If you get migration errors you can't resolve, you can either change the database name in the connection string or delete the database. The simplest approach is to rename the database in <em>Web.config</em> file. The following example shows the name changed to CU_Test:</p>
<pre class="prettyprint prettyprinted"><span class="pln"> </span><span class="tag">&lt;add</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"SchoolContext"</span><span class="pln"> </span><span class="atn">connectionString</span><span class="pun">=</span><span class="atv">"Data Source=(LocalDb)\v11.0;Initial Catalog=</span><mark><span class="atv">CU_Test</span></mark><span class="atv">;Integrated Security=SSPI;"</span><span class="pln"> 
      </span><span class="atn">providerName</span><span class="pun">=</span><span class="atv">"System.Data.SqlClient"</span><span class="pln"> </span><span class="tag">/&gt;</span></pre>
<p>With a new database, there is no data to migrate, and the <code>update-database</code> command is much more likely to complete without errors. For instructions on how to delete the database, see <a href="http://romiller.com/2013/05/17/how-to-drop-a-database-from-visual-studio-2012/">How to Drop a Database from Visual Studio 2012</a>.</p>
<p>If that fails, another thing you can try is re-initialize the database by entering the following command in the PMC:</p>
<p><code>update-database -TargetMigration:0</code></p>
</div>
<p>Open the database in <strong>Server Explorer</strong> as you did earlier, and expand the <strong>Tables</strong> node to see that all of the tables have been created. (If you still have <strong>Server Explorer</strong> open from the earlier time, click the <strong>Refresh</strong> button.)</p>
<p><img src="http://media-www-asp.azureedge.net/media/48000/chap5tables.png" data-original="//media-www-asp.azureedge.net/media/48000/chap5tables.png" /></p>
<p>You didn't create a model class for the <code>CourseInstructor</code> table. As explained earlier, this is a join table for the many-to-many relationship between the <code>Instructor</code> and <code>Course</code> entities.</p>
<p>Right-click the <code>CourseInstructor</code> table and select <strong>Show Table Data</strong> to verify that it has data in it as a result of the <code>Instructor</code> entities you added to the <code>Course.Instructors</code> navigation property.</p>
<p><img src="http://media-www-asp.azureedge.net/media/4367439/ci.png" data-original="//media-www-asp.azureedge.net/media/4367439/ci.png" alt="Table_data_in_CourseInstructor_table" border="0" /></p>
<h2>Summary</h2>
<p>You now have a more complex data model and corresponding database. In the following tutorial you'll learn more about different ways to access related data.</p>
</body>
</html>
***********************************
Filename: Deployment to Azure Cloud.html
***********************************
<!DOCTYPE html>
<html>
<head>
</head>
<body style="font-family: arial, helvetica, sans-serif;font-size: 12px;">
<div class="important important-box-article">
<p>Please watch this video to help with creating the Web App (website) and SQL Database. Do this instead of the following section:&nbsp;Create a web site and a SQL database in Azure</p>
<p><a href="https://youtu.be/E_U3g__9oDQ">https://youtu.be/E_U3g__9oDQ</a></p>
<p></p>
<p>So far the application has been running locally in IIS Express on your development computer. To make a real application available for other people to use over the Internet, you have to deploy it to a web hosting provider. In this tutorial you'll deploy the Contoso University application to the cloud in Azure.</p>
</div>
<p>The tutorial contains the following sections:</p>
<ul>
<li>Enable Code First Migrations. The Migrations feature enables you to change the data model and deploy your changes to production by updating the database schema without having to drop and re-create the database.</li>
<li>Deploy to Azure. This step is optional; you can continue with the remaining tutorials without having deployed the project.</li>
</ul>
<p>We recommend that you use a continuous integration process with source control for deployment, but this tutorial does not cover those topics. For more information, see the <a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control">source control</a> and <a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/continuous-integration-and-continuous-delivery">continuous integration</a> chapters of the <a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/introduction">Building Real-World Cloud Apps with Azure</a> e-book.</p>
<h2>Enable Code First Migrations</h2>
<p>When you develop a new application, your data model changes frequently, and each time the model changes, it gets out of sync with the database. You have configured the Entity Framework to automatically drop and re-create the database each time you change the data model. When you add, remove, or change entity classes or change your <code>DbContext</code> class, the next time you run the application it automatically deletes your existing database, creates a new one that matches the model, and seeds it with test data.</p>
<p>This method of keeping the database in sync with the data model works well until you deploy the application to production. When the application is running in production it is usually storing data that you want to keep, and you don't want to lose everything each time you make a change such as adding a new column. The <a href="http://msdn.microsoft.com/en-us/data/jj591621">Code First Migrations</a> feature solves this problem by enabling Code First to update the database schema instead of dropping and re-creating the database. In this tutorial, you'll deploy the application, and to prepare for that you'll enable Migrations. &nbsp;</p>
<ol>
<li>
<p>Disable the initializer that you set up earlier by commenting out or deleting the <code>contexts</code> element that you added to the application Web.config file.</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;entityFramework&gt;</span><span class="pln">
  </span><mark><span class="com">&lt;!--</span></mark><span class="com">&lt;contexts&gt;
    &lt;context type="ContosoUniversity.DAL.SchoolContext, ContosoUniversity"&gt;
      &lt;databaseInitializer type="ContosoUniversity.DAL.SchoolInitializer, ContosoUniversity" /&gt;
    &lt;/context&gt;
  &lt;/contexts&gt;</span><mark><span class="com">--&gt;</span></mark><span class="pln">
  </span><span class="tag">&lt;defaultConnectionFactory</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;parameters&gt;</span><span class="pln">
      </span><span class="tag">&lt;parameter</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"v11.0"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/parameters&gt;</span><span class="pln">
  </span><span class="tag">&lt;/defaultConnectionFactory&gt;</span><span class="pln">
  </span><span class="tag">&lt;providers&gt;</span><span class="pln">
    </span><span class="tag">&lt;provider</span><span class="pln"> </span><span class="atn">invariantName</span><span class="pun">=</span><span class="atv">"System.Data.SqlClient"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/providers&gt;</span><span class="pln">
</span><span class="tag">&lt;/entityFramework&gt;</span></pre>
</li>
<li>
<p>Also in the application <em>Web.config</em> file, change the name of the database in the connection string to ContosoUniversity2.</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;connectionStrings&gt;</span><span class="pln">
  </span><span class="tag">&lt;add</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"SchoolContext"</span><span class="pln"> </span><span class="atn">connectionString</span><span class="pun">=</span><span class="atv">"Data Source=(LocalDb)\v11.0;Initial Catalog=</span><mark><span class="atv">ContosoUniversity2</span></mark><span class="atv">;Integrated Security=SSPI;"</span><span class="pln"> </span><span class="atn">providerName</span><span class="pun">=</span><span class="atv">"System.Data.SqlClient"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/connectionStrings&gt;</span></pre>
<p>This change sets up the project so that the first migration will create a new database. This isn't required but you'll see later why it's a good idea.</p>
</li>
<li>
<p>From the <strong>Tools</strong> menu, click <strong>Library Package Manager</strong> and then <strong>Package Manager Console</strong>.</p>
<p><img alt="Selecting_Package_Manager_Console" src="http://asp.net/media/4336350/1pm.png" data-original="http://asp.net/media/4336350/1pm.png" /></p>
</li>
<li>
<p>At the <code>PM&gt;</code> prompt enter the following commands:</p>
<code>enable-migrations</code><br /><code>add-migration InitialCreate</code>
<p><img alt="enable-migrations command" src="http://media-www-asp.azureedge.net/media/48035/pmcenablemigrations.png" data-original="//media-www-asp.azureedge.net/media/48035/pmcenablemigrations.png" /></p>
<p>The <code>enable-migrations</code> command creates a <em>Migrations</em> folder in the ContosoUniversity project, and it puts in that folder a<em>Configuration.cs</em> file that you can edit to configure Migrations.</p>
<p>(If you missed the step above that directs you to change the database name, Migrations will find the existing database and automatically do the <code>add-migration</code> command. That's OK, it just means you won't run a test of the migrations code before you deploy the database. Later when you run the <code>update-database</code> command nothing will happen because the database will already exist.)</p>
<p><img alt="Migrations folder" src="http://media-www-asp.azureedge.net/media/48031/migrationsconfigfile.png" data-original="//media-www-asp.azureedge.net/media/48031/migrationsconfigfile.png" /></p>
<p>Like the initializer class that you saw earlier, the <code>Configuration</code> class includes a <code>Seed</code> method.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">internal</span><span class="pln"> </span><span class="kwd">sealed</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Configuration</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbMigrationsConfiguration</span><span class="pun">&lt;</span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL</span><span class="pun">.</span><span class="typ">SchoolContext</span><span class="pun">&gt;</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Configuration</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">AutomaticMigrationsEnabled</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Seed</span><span class="pun">(</span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL</span><span class="pun">.</span><span class="typ">SchoolContext</span><span class="pln"> context</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//  This method will be called after migrating to the latest version.</span><span class="pln">

        </span><span class="com">//  You can use the DbSet&lt;T&gt;.AddOrUpdate() helper extension method </span><span class="pln">
        </span><span class="com">//  to avoid creating duplicate seed data. E.g.</span><span class="pln">
        </span><span class="com">//</span><span class="pln">
        </span><span class="com">//    context.People.AddOrUpdate(</span><span class="pln">
        </span><span class="com">//      p =&gt; p.FullName,</span><span class="pln">
        </span><span class="com">//      new Person { FullName = "Andrew Peters" },</span><span class="pln">
        </span><span class="com">//      new Person { FullName = "Brice Lambson" },</span><span class="pln">
        </span><span class="com">//      new Person { FullName = "Rowan Miller" }</span><span class="pln">
        </span><span class="com">//    );</span><span class="pln">
        </span><span class="com">//</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The purpose of the <a href="http://msdn.microsoft.com/en-us/library/hh829453(v=vs.103).aspx">Seed</a> method is to enable you to insert or update test data after Code First creates or updates the database. The method is called when the database is created and every time the database schema is updated after a data model change.</p>
</li>
</ol>
<h3>Set up the Seed Method</h3>
<p>When you are dropping and re-creating the database for every data model change, you use the initializer class's <code>Seed</code> method to insert test data, because after every model change the database is dropped and all the test data is lost. With Code First Migrations, test data is retained after database changes, so including test data in the <a href="http://msdn.microsoft.com/en-us/library/hh829453(v=vs.103).aspx">Seed</a> method is typically not necessary. <span>In fact, you don't want the <code>Seed </code>method to insert test data if you'll be using Migrations to deploy the database to production, because the <code>Seed </code>method will run in production. In that case you</span>want the <code>Seed </code>method to insert into the database only the data that you need in production. For example, you might want the database to include actual department names in the <code>Department</code> table when the application becomes available in production.</p>
<p>For this tutorial, you'll be using Migrations for deployment, but your <code>Seed </code>method will insert test data anyway in order to make it easier to see how application functionality works without having to manually insert a lot of data.</p>
<ol>
<li>Replace the contents of the <em>Configuration.cs </em>file with the following code, which will load test data into the new database.&nbsp;
<pre class="prettyprint prettyprinted"><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Migrations</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">Migrations</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Linq</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">internal</span><span class="pln"> </span><span class="kwd">sealed</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Configuration</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbMigrationsConfiguration</span><span class="pun">&lt;</span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL</span><span class="pun">.</span><span class="typ">SchoolContext</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Configuration</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">AutomaticMigrationsEnabled</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Seed</span><span class="pun">(</span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL</span><span class="pun">.</span><span class="typ">SchoolContext</span><span class="pln"> context</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> students </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Student</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Carson"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2010-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Meredith"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Alonso"</span><span class="pun">,</span><span class="pln">    
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2012-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Arturo"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Anand"</span><span class="pun">,</span><span class="pln">     
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2013-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Gytis"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Barzdukas"</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2012-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Yan"</span><span class="pun">,</span><span class="pln">      </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Li"</span><span class="pun">,</span><span class="pln">        
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2012-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Peggy"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Justice"</span><span class="pun">,</span><span class="pln">   
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2011-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Laura"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Norman"</span><span class="pun">,</span><span class="pln">    
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2013-09-01"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Nino"</span><span class="pun">,</span><span class="pln">     </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Olivetto"</span><span class="pun">,</span><span class="pln">  
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2005-08-11"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
            students</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> courses </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1050</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pun">,</span><span class="pln">      </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4022</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Microeconomics"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4041</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Macroeconomics"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1045</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Calculus"</span><span class="pun">,</span><span class="pln">       </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3141</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Trigonometry"</span><span class="pun">,</span><span class="pln">   </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2021</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Composition"</span><span class="pun">,</span><span class="pln">    </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2042</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Literature"</span><span class="pun">,</span><span class="pln">     </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
            courses</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">Title</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> enrollments </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">A 
                </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Microeconomics"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">C 
                 </span><span class="pun">},</span><span class="pln">                            
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Macroeconomics"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                     </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alonso"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Calculus"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B 
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                     </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alonso"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Trigonometry"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B 
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alonso"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Composition"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B 
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Anand"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pln">
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Anand"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Microeconomics"</span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B         
                 </span><span class="pun">},</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Barzdukas"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B         
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Li"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Composition"</span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B         
                 </span><span class="pun">},</span><span class="pln">
                 </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Justice"</span><span class="pun">).</span><span class="pln">ID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Literature"</span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B         
                 </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">

            </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Enrollment</span><span class="pln"> e </span><span class="kwd">in</span><span class="pln"> enrollments</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">var</span><span class="pln"> enrollmentInDataBase </span><span class="pun">=</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">
                    s </span><span class="pun">=&gt;</span><span class="pln">
                         s</span><span class="pun">.</span><span class="typ">Student</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln">
                         s</span><span class="pun">.</span><span class="typ">Course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">).</span><span class="typ">SingleOrDefault</span><span class="pun">();</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">enrollmentInDataBase </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    context</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <a href="http://msdn.microsoft.com/en-us/library/hh829453(v=vs.103).aspx">Seed</a> method takes the database context object as an input parameter, and the code in the method uses that object to add new entities to the database. For each entity type, the code creates a collection of new entities, adds them to the appropriate <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbset(v=vs.103).aspx">DbSet</a> property, and then saves the changes to the database. It isn't necessary to call the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext.savechanges(v=VS.103).aspx">SaveChanges</a> method after each group of entities, as is done here, but doing that helps you locate the source of a problem if an exception occurs while the code is writing to the database.</p>
<p>Some of the statements that insert data use the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.migrations.idbsetextensions.addorupdate(v=vs.103).aspx">AddOrUpdate</a> method to perform an "upsert" operation. Because the <code>Seed </code>method runs every time you execute the <code>update-database</code> command, typically after each migration, you can't just insert data, because the rows you are trying to add will already be there after the first migration that creates the database. The "upsert" operation prevents errors that would happen if you try to insert a row that already exists, but it <strong><em>overrides</em></strong> any changes to data that you may have made while testing the application. With test data in some tables you might not want that to happen:&nbsp; in some cases when you change data while testing you want your changes to remain after database updates. In that case you want to do a conditional insert operation: insert a row only if it doesn't already exist. The Seed method uses both approaches.</p>
<p>The first parameter passed to the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.migrations.idbsetextensions.addorupdate(v=vs.103).aspx">AddOrUpdate</a> method specifies the property to use to check if a row already exists. For the test student data that you are providing, the <code>LastName</code> property can be used for this purpose since each last name in the list is unique:</p>
<pre class="prettyprint prettyprinted"><span class="pln">context</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">AddOrUpdate</span><span class="pun">(</span><span class="pln">p </span><span class="pun">=&gt;</span><span class="pln"> p</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">)</span></pre>
<p>This code assumes that last names are unique. If you manually add a student with a duplicate last name, you'll get the following exception the next time you perform a migration.</p>
<p><span color="red" class="LucidaCon" style="color: red;">Sequence contains more than one element</span></p>
<p>For information about how to handle redundant data such as two students named "Alexander Carson", see <a href="http://blogs.msdn.com/b/rickandy/archive/2013/02/12/seeding-and-debugging-entity-framework-ef-dbs.aspx">Seeding and Debugging Entity Framework (EF) DBs</a> on Rick Anderson's blog.&nbsp; For more information about the <code>AddOrUpdate</code> method, see <a href="http://thedatafarm.com/blog/data-access/take-care-with-ef-4-3-addorupdate-method/">Take care with EF 4.3 AddOrUpdate Method</a> on Julie Lerman's blog.</p>
<p>The code that creates <code>Enrollment</code> entities assumes you have the <code>ID</code> value in the entities in the <code>students</code> collection, although you didn't set that property in the code that creates the collection.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Alexander"</span><span class="pun">)</span><mark><span class="pun">.</span><span class="pln">ID</span></mark><span class="pun">,</span><span class="pln"> 
    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courses</span><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Title</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Chemistry"</span><span class="pln"> </span><span class="pun">).</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> 
    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">A 
</span><span class="pun">},</span></pre>
<p>You can use the <code>ID</code> property here because the <code>ID</code> value is set when you call <code>SaveChanges</code> for the <code>students</code> collection. EF automatically gets the primary key value when it inserts an entity into the database, and it updates the <code>ID</code> property of the entity in memory.&nbsp;</p>
<p>The code that adds each <code>Enrollment</code> entity to the <code>Enrollments</code> entity set doesn't use the <code>AddOrUpdate</code> method. It checks if an entity already exists and inserts the entity if it doesn't exist. This approach will preserve changes you make to an enrollment grade by using the application UI. The code loops through each member of the <code>Enrollment </code><a href="http://msdn.microsoft.com/en-us/library/6sh2ey19.aspx">List</a> and if the enrollment is not found in the database, it adds the enrollment to the database. The first time you update the database, the database will be empty, so it will add each enrollment.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Enrollment</span><span class="pln"> e </span><span class="kwd">in</span><span class="pln"> enrollments</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> enrollmentInDataBase </span><span class="pun">=</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">
        s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Student</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">Student</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">&amp;&amp;</span><span class="pln">
             s</span><span class="pun">.</span><span class="typ">Course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">Course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">).</span><span class="typ">SingleOrDefault</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">enrollmentInDataBase </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        context</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
</li>
<li>
<p>Build the project.</p>
</li>
</ol>
<h3>Execute the First Migration</h3>
<p>When you executed the <code>add-migration</code> command, Migrations generated the code that would create the database from scratch. This code is also in the <em>Migrations</em> folder, in the file named <em>&lt;timestamp&gt;_InitialCreate.cs</em>. The <code>Up</code> method of the <code>InitialCreate</code> class creates the database tables that correspond to the data model entity sets, and the <code>Down</code> method deletes them.&nbsp;</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">partial</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">InitialCreate</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbMigration</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Up</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">CreateTable</span><span class="pun">(</span><span class="pln">
            </span><span class="str">"dbo.Course"</span><span class="pun">,</span><span class="pln">
            c </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">),</span><span class="pln">
                    </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">String</span><span class="pun">(),</span><span class="pln">
                    </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">),</span><span class="pln">
                </span><span class="pun">})</span><span class="pln">
            </span><span class="pun">.</span><span class="typ">PrimaryKey</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">);</span><span class="pln">
        
        </span><span class="typ">CreateTable</span><span class="pun">(</span><span class="pln">
            </span><span class="str">"dbo.Enrollment"</span><span class="pun">,</span><span class="pln">
            c </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    </span><span class="typ">EnrollmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln"> identity</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">),</span><span class="pln">
                    </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">),</span><span class="pln">
                    </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">),</span><span class="pln">
                    </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(),</span><span class="pln">
                </span><span class="pun">})</span><span class="pln">
            </span><span class="pun">.</span><span class="typ">PrimaryKey</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">EnrollmentID</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">.</span><span class="typ">ForeignKey</span><span class="pun">(</span><span class="str">"dbo.Course"</span><span class="pun">,</span><span class="pln"> t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln"> cascadeDelete</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">.</span><span class="typ">ForeignKey</span><span class="pun">(</span><span class="str">"dbo.Student"</span><span class="pun">,</span><span class="pln"> t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">StudentID</span><span class="pun">,</span><span class="pln"> cascadeDelete</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">.</span><span class="typ">Index</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">.</span><span class="typ">Index</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="typ">StudentID</span><span class="pun">);</span><span class="pln">
        
        </span><span class="typ">CreateTable</span><span class="pun">(</span><span class="pln">
            </span><span class="str">"dbo.Student"</span><span class="pun">,</span><span class="pln">
            c </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    ID </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Int</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln"> identity</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">),</span><span class="pln">
                    </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">String</span><span class="pun">(),</span><span class="pln">
                    </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">String</span><span class="pun">(),</span><span class="pln">
                    </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">DateTime</span><span class="pun">(</span><span class="pln">nullable</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">),</span><span class="pln">
                </span><span class="pun">})</span><span class="pln">
            </span><span class="pun">.</span><span class="typ">PrimaryKey</span><span class="pun">(</span><span class="pln">t </span><span class="pun">=&gt;</span><span class="pln"> t</span><span class="pun">.</span><span class="pln">ID</span><span class="pun">);</span><span class="pln">
        
    </span><span class="pun">}</span><span class="pln">
    
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Down</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">DropForeignKey</span><span class="pun">(</span><span class="str">"dbo.Enrollment"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"StudentID"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"dbo.Student"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">DropForeignKey</span><span class="pun">(</span><span class="str">"dbo.Enrollment"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"CourseID"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"dbo.Course"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">DropIndex</span><span class="pun">(</span><span class="str">"dbo.Enrollment"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"StudentID"</span><span class="pln"> </span><span class="pun">});</span><span class="pln">
        </span><span class="typ">DropIndex</span><span class="pun">(</span><span class="str">"dbo.Enrollment"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"CourseID"</span><span class="pln"> </span><span class="pun">});</span><span class="pln">
        </span><span class="typ">DropTable</span><span class="pun">(</span><span class="str">"dbo.Student"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">DropTable</span><span class="pun">(</span><span class="str">"dbo.Enrollment"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">DropTable</span><span class="pun">(</span><span class="str">"dbo.Course"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>Migrations calls the <code>Up</code> method to implement the data model changes for a migration. When you enter a command to roll back the update, Migrations calls the <code>Down</code> method.</p>
<p>This is the initial migration that was created when you entered the <code>add-migration&nbsp;InitialCreate</code> command. The parameter (<code>InitialCreate</code> in the example) is used for the file name and can be whatever you want; you typically choose a word or phrase that summarizes what is being done in the migration. For example, you might name a later migration "AddDepartmentTable".</p>
<p>If you created the initial migration when the database already exists, the database creation code is generated but it doesn't have to run because the database already matches the data model. When you deploy the app to another environment where the database doesn't exist yet, this code will run to create your database, so it's a good idea to test it first. That's why you changed the name of the database in the connection string earlier -- so that migrations can create a new one from scratch.</p>
<ol>
<li>
<p>In the <strong>Package Manager Console</strong> window, enter the following command:</p>
<code>update-database</code>
<p><img src="http://media-www-asp.azureedge.net/media/48054/updatedatabase.png" data-original="//media-www-asp.azureedge.net/media/48054/updatedatabase.png" /></p>
<p>The <code>update-database</code> command runs the <code>Up</code> method to create the database and then it runs the <code>Seed </code>method to populate the database. The same process will run automatically in production after you deploy the application, as you'll see in the following section.</p>
</li>
<li>
<p>Use <strong>Server Explorer</strong> to inspect the database as you did in the first tutorial, and run the application to verify that everything still works the same as before.</p>
</li>
</ol>
<h2>Deploy to Azure</h2>
<p>So far the application has been running locally in IIS Express on your development computer.&nbsp; To make it available for other people to use over the Internet, you have to deploy it to a web hosting provider. In this section of the tutorial you'll deploy it to Azure.&nbsp; This section is optional; you can skip this and continue with the following tutorial, or you can adapt the instructions in this section for a different hosting provider of your choice.</p>
<h3>Using Code First Migrations to Deploy the Database</h3>
<p>To deploy the database you'll use Code First Migrations.&nbsp; When you create the publish profile that you use to configure settings for deploying from Visual Studio, you'll select a check box labeled <span class="label"><strong>Execute Code First Migrations (runs on application start)</strong></span>.&nbsp; This setting causes the deployment process to automatically configure the application <em>Web.config</em> file on the destination server so that Code First uses the<span class="code"><code>MigrateDatabaseToLatestVersion</code></span> initializer class.</p>
<p>Visual Studio doesn't do anything with the database during the deployment process while it is copying your project to the destination server. When you run the deployed application and it accesses the database for the first time after deployment, Code First checks if the database matches the data model. If there's a mismatch, Code First automatically creates the database (if it doesn't exist yet) or updates the database schema to the latest version (if a database exists but doesn't match the model). If the application implements a Migrations <span class="code"><code>Seed</code></span> method, the method runs after the database is created or the schema is updated.</p>
<p>Your Migrations <code>Seed</code> method inserts test data. If you were deploying to a production environment, you would have to change the <code>Seed</code>method so that it only inserts data that you want to be inserted into your production database. For example, in your current data model you might want to have real courses but fictional students in the development database. You can write a <code>Seed</code> method to load both in development, and then comment out the fictional students before you deploy to production. Or you can write a <code>Seed</code> method to load only courses, and enter the fictional students in the test database manually by using the application's UI.</p>
<h3>Get an Azure account</h3>
<p>You'll need an Azure account. If you don't already have one, but you do have an MSDN subscription, you can <a href="http://www.windowsazure.com/en-us/pricing/member-offers/msdn-benefits-details/?WT.mc_id=A443DD604">activate your MSDN subscription benefits</a>. Otherwise, you can create a free trial account in just a couple of minutes. For details, see <a href="http://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=A443DD604">Azure Free Trial</a>.</p>
<h3>Create a web site and a SQL database in Azure</h3>
<p>Watch this instructional video prior to reading this section as it has changed.</p>
<p><a href="https://youtu.be/E_U3g__9oDQ">https://youtu.be/E_U3g__9oDQ</a></p>
<p>Your web app in Azure will run in a shared hosting environment, which means it runs on virtual machines (VMs) that are shared with other Azure clients. A shared hosting environment is a low-cost way to get started in the cloud. Later, if your web traffic increases, the application can scale to meet the need by running on dedicated VMs.</p>
<p>You'll deploy the database to Azure SQL Database. SQL Database is a cloud-based relational database service that is built on SQL Server technologies. Tools and applications that work with SQL Server also work with SQL Database.</p>
<ol>
<li>In the <a href="https://manage.windowsazure.com/">Azure Management Portal</a>, click <strong>Web Sites</strong> in the left tab, and then click <strong>New</strong>.
<p><img alt="New button in Management Portal" src="http://media-www-asp.azureedge.net/media/51881/rxwsnew2.png" data-original="//media-www-asp.azureedge.net/media/51881/rxwsnew2.png" /></p>
</li>
<li>Click <strong>CUSTOM CREATE</strong>.
<p><img alt="Create with Database link in Management Portal" src="http://media-www-asp.azureedge.net/media/51879/rxcreatewswithdb.png" data-original="//media-www-asp.azureedge.net/media/51879/rxcreatewswithdb.png" /></p>
The <strong>New Web Site - Custom Create</strong> wizard opens.</li>
<li>In the <strong>New Web Site</strong> step of the wizard, enter a string in the <strong>URL</strong> box to use as the unique URL for your application. The complete URL will consist of what you enter here plus the suffix that you see next to the text box. The illustration shows "ConU", but that URL is probably taken so you will have to choose a different one.
<p><img alt="Create with Database link in Management Portal" src="http://media-www-asp.azureedge.net/media/4342450/3a-n.png" data-original="//media-www-asp.azureedge.net/media/4342450/3a-n.png" /></p>
</li>
<li>In the <strong>Region</strong> drop-down list, choose a region close to you. This setting specifies which data center your web site will run in.</li>
<li>In the <strong>Database</strong> drop-down list, choose <strong>Create a free 20 MB SQL database</strong>.
<p><img src="http://media-www-asp.azureedge.net/media/4342432/3a-20.png" data-original="//media-www-asp.azureedge.net/media/4342432/3a-20.png" /></p>
</li>
<li>In the <strong>DB CONNECTION STRING NAME</strong>, enter <em>SchoolContext</em>.
<p><img src="http://media-www-asp.azureedge.net/media/4342480/3a-x.png" data-original="//media-www-asp.azureedge.net/media/4342480/3a-x.png" /></p>
</li>
<li>Click the arrow that points to the right at the bottom of the box. The wizard advances to the <strong>Database Settings</strong> step.</li>
<li>In the <strong>Name</strong> box, enter <em>ContosoUniversityDB</em>.</li>
<li>In the <strong>Server</strong> box, select <strong>New SQL Database server</strong>. Alternatively, if you previously created a server, you can select that server from the drop-down list.</li>
<li>Enter an administrator <strong>LOGIN NAME</strong> and <strong>PASSWORD</strong>. If you selected <strong>New SQL Database server</strong> you aren't entering an existing name and password here, you're entering a new name and password that you're defining now to use later when you access the database. If you selected a server that you created previously, you&rsquo;ll enter credentials for that server. For this tutorial, you won't select the <em><strong>Advanced</strong></em>&nbsp;check box. The <em><strong>Advanced</strong> </em>&nbsp;options enable you to set&nbsp; the database <a href="http://msdn.microsoft.com/en-us/library/aa174903(v=SQL.80).aspx">collation</a>.</li>
<li>Choose the same <strong>Region</strong> that you chose for the web site.<br /><br /></li>
<li>Click the check mark at the bottom right of the box to indicate that you're finished. <br /><br /><img alt="Database Settings step of New Web Site - Create with Database wizard" src="http://media-www-asp.azureedge.net/media/51874/dntutmobile-setup-azure-site-004.png" data-original="//media-www-asp.azureedge.net/media/51874/dntutmobile-setup-azure-site-004.png" /><br /><br />The Management Portal returns to the Web Sites page, and the <strong>Status</strong> column shows that the site is being created. After a while (typically less than a minute), the <strong>Status</strong> column shows that the site was successfully created. In the navigation bar at the left, the number of sites you have in your account appears next to the <strong>Web Sites</strong> icon, and the number of databases appears next to the <strong>SQL Databases</strong> icon.</li>
</ol>
<h3>Deploy the application to Azure</h3>
<p>Watch this video first, it has steps that differ slightly from the text shown below and may help you with publishing your project to Azure.</p>
<p><a href="https://youtu.be/jOlGQitQzpQ">https://youtu.be/jOlGQitQzpQ</a></p>
<ol>
<ol>
<li>In Visual Studio, right-click the project in <strong>Solution Explorer</strong> and select <strong>Publish</strong> from the context menu.<br /><br /><img alt="Publish in project context menu" src="http://media-www-asp.azureedge.net/media/4342456/3a-p.png" data-original="//media-www-asp.azureedge.net/media/4342456/3a-p.png" /><br /><br /></li>
<li>In the <strong>Profile</strong> tab of the <strong>Publish Web</strong> wizard, click <strong>Import</strong>.<br /><br /><img alt="Import publish settings" src="http://media-www-asp.azureedge.net/media/4342468/3a-sp.png" data-original="//media-www-asp.azureedge.net/media/4342468/3a-sp.png" /><br /><br /></li>
<li>
<p>If you have not previously added your Azure subscription in Visual Studio, perform the following steps. These steps enable Visual Studio to connect to your Azure subscription so that the drop-down list under <strong>Import from Azure</strong> will include your web site.</p>
<p>As an alternative, you can sign in directly to your Azure account without downloading a subscription file. To use this method, click <strong>Sign In</strong>instead of <strong>Manage subscriptions</strong> in the next step. This alternative is simpler, but as this tutorial is being written in November, 2013, only the subscription file download enables <strong>Server Explorer</strong> to connect to Azure SQL Database.</p>
<p>a. In the <strong>Import Publish Profile</strong> dialog box, click <strong>Manage subscriptions</strong>.</p>
<p><img alt="add Windows Azure subscription" src="http://media-www-asp.azureedge.net/media/4472805/importsubscriptions.png" data-original="//media-www-asp.azureedge.net/media/4472805/importsubscriptions.png" /></p>
<p>b. In the <strong>Manage Azure Subscriptions</strong> dialog box, click the <strong>Certificates</strong> tab, and then click <strong>Import</strong>.</p>
<p><img alt="download subscription file" src="http://media-www-asp.azureedge.net/media/4472799/importcertificates.png" data-original="//media-www-asp.azureedge.net/media/4472799/importcertificates.png" /></p>
<p>c. In the <strong>Import Azure Subscriptions</strong> dialog box, click <strong>Download subscription file</strong> .</p>
<p><img alt="download .publishsettings file" src="http://media-www-asp.azureedge.net/media/4472793/downloadsubscriptionfile.png" data-original="//media-www-asp.azureedge.net/media/4472793/downloadsubscriptionfile.png" /></p>
<p>d. In your browser window, save the <em>.publishsettings</em> file.</p>
<p><img alt="download .publishsettings file" src="http://media-www-asp.azureedge.net/media/51883/rzdown2.png" data-original="//media-www-asp.azureedge.net/media/51883/rzdown2.png" /></p>
<p><strong>Security Note</strong>: The <em>publishsettings</em> file contains your credentials (unencoded) that are used to administer your Azure subscriptions and services. The security best practice for this file is to store it temporarily outside your source directories (for example in the<em> Downloads</em>folder), and then delete it once the import has completed. A malicious user who gains access to the <code>.publishsettings</code> file can edit, create, and delete your Azure services.</p>
<p>e. In the <strong>Import Azure Subscriptions</strong> dialog box, click <strong>Browse</strong> and navigate to the <em>.publishsettings</em> file.</p>
<p><img alt="download sub" src="http://media-www-asp.azureedge.net/media/51884/rzdownloadbrowse.png" data-original="//media-www-asp.azureedge.net/media/51884/rzdownloadbrowse.png" /></p>
<p>e. Click <strong>Import</strong>.</p>
<p><img alt="import" src="http://media-www-asp.azureedge.net/media/51886/rzimp.png" data-original="//media-www-asp.azureedge.net/media/51886/rzimp.png" /></p>
</li>
<li>
<p>Close the <strong>Manage Azure Subscriptions</strong> box.</p>
</li>
<li>
<p>In the <strong>Import Publish Profile</strong> dialog box, select <strong>Import from an Azure</strong>, select your web site from the drop-down list, and then click <strong>OK</strong>.<br /><br /><img alt="Import Publish Profile" src="http://media-www-asp.azureedge.net/media/4472829/selectcusite.png" data-original="//media-www-asp.azureedge.net/media/4472829/selectcusite.png" /></p>
</li>
<li>In the <strong>Connection</strong> tab, click <strong>Validate Connection</strong> to make sure that the settings are correct.<br /><br /><img alt="Validate connection" src="http://media-www-asp.azureedge.net/media/51887/validateconnection.png" data-original="//media-www-asp.azureedge.net/media/51887/validateconnection.png" /><br /><br /></li>
<li>When the connection has been validated, a green check mark is shown next to the <strong>Validate Connection</strong> button. Click <strong>Next</strong>.<br /><br /><img alt="Successfully validated connection" src="http://media-www-asp.azureedge.net/media/51888/validateconnectionsuccess.png" data-original="//media-www-asp.azureedge.net/media/51888/validateconnectionsuccess.png" /><br /><br /></li>
<li>Open the <strong>Remote connection string</strong> drop-down list under <strong>SchoolContext</strong> and select the connection string for the database you created.</li>
<li>Select <strong>Execute Code First Migrations (runs on application start)</strong>.</li>
</ol>
</ol>
<p><br /><br /></p>
<p><img alt="Settings tab" src="http://media-www-asp.azureedge.net/media/4472823/selectconnstring.png" data-original="//media-www-asp.azureedge.net/media/4472823/selectconnstring.png" /></p>
<p>This setting causes the deployment process to automatically configure the application <em>Web.config</em> file on the destination server so that Code First uses the <span class="code"><code>MigrateDatabaseToLatestVersion</code></span> initializer class.</p>
<ol>
<li>Click <strong>Next</strong>.</li>
<li>In the <strong>Preview</strong> tab, click <strong>Start Preview</strong>.<br /><br /><img alt="StartPreview button in the Preview tab" src="http://media-www-asp.azureedge.net/media/4472811/publishpreview.png" data-original="//media-www-asp.azureedge.net/media/4472811/publishpreview.png" /><br /><br />The tab displays a list of the files that will be copied to the server. Displaying the preview isn't required to publish the application but is a useful function to be aware of. In this case, you don't need to do anything with the list of files that is displayed. The next time you deploy this application, only the files that have changed will be in this list.<br /><br /><img alt="StartPreview file output" src="http://media-www-asp.azureedge.net/media/4472817/publishpreviewlist.png" data-original="//media-www-asp.azureedge.net/media/4472817/publishpreviewlist.png" /><br /><br /></li>
<li>Click <strong>Publish</strong>.<br />Visual Studio begins the process of copying the files to the Azure server.</li>
<li>The <strong>Output</strong> window shows what deployment actions were taken and reports successful completion of the deployment.<br /><br /><img alt="Output window reporting successful deployment" src="http://media-www-asp.azureedge.net/media/51876/publishoutput.png" data-original="//media-www-asp.azureedge.net/media/51876/publishoutput.png" /><br /><br /></li>
<li>Upon successful deployment, the default browser automatically opens to the URL of the deployed web site.<br />The application you created is now running in the cloud. Click the Students tab.<br /><br /><img alt="Students_index_page_with_paging" border="0" src="http://media-www-asp.azureedge.net/media/4472901/studentindexinazure.png" data-original="//media-www-asp.azureedge.net/media/4472901/studentindexinazure.png" /></li>
</ol>
<p>At this point your <em>SchoolContext</em> database has been created in the Azure SQL Database because you selected <strong>Execute Code First Migrations (runs on app start)</strong>. The <em>Web.config</em> file in the deployed web site has been changed so that the&nbsp;<span class="code"><a href="http://msdn.microsoft.com/en-us/library/hh829476(v=vs.103).aspx">MigrateDatabaseToLatestVersion</a></span> initializer runs the first time your code reads or writes data in the database (which happened when you selected the <strong>Students</strong> tab):</p>
<p><img src="http://asp.net/media/4367421/mig.png" data-original="http://asp.net/media/4367421/mig.png" /></p>
<p>The deployment process also created a new connection string <em>(SchoolContext_DatabasePublish</em>) for Code First Migrations to use for updating the database schema and seeding the database.</p>
<p><img alt="Database_Publish connection string" src="http://media-www-asp.azureedge.net/media/48036/postdeploymentconnstrings.png" data-original="//media-www-asp.azureedge.net/media/48036/postdeploymentconnstrings.png" /></p>
<p>You can find the deployed version of the Web.config file on your own computer in<em>ContosoUniversity\obj\Release\Package\PackageTmp\Web.config</em>. You can access the deployed <em>Web.config</em> file itself by using FTP. For instructions, see <a href="http://www.asp.net/mvc/tutorials/deployment/visual-studio-web-deployment/deploying-a-code-update">ASP.NET Web Deployment using Visual Studio: Deploying a Code Update</a>. Follow the instructions that start with "To use an FTP tool, you need three things: the FTP URL, the user name, and the password."</p>
<div class="note"><span></span>Note: The web app doesn't implement security, so anyone who finds the URL can change the data. For instructions on how to secure the web site, see <a href="http://www.windowsazure.com/en-us/develop/net/tutorials/web-site-with-sql-database/">Deploy a Secure ASP.NET MVC app with Membership, OAuth, and SQL Database to Azure</a>. You can prevent other people from using the site by using the Azure Management Portal or <strong>Server Explorer</strong> in Visual Studio to stop the site. <br /><br /></div>
<p><img src="http://media-www-asp.azureedge.net/media/4342474/3a-stop.png" data-original="//media-www-asp.azureedge.net/media/4342474/3a-stop.png" /><span></span></p>
<h2>Advanced Migrations Scenarios</h2>
<p>If you deploy a database by running migrations automatically as shown in this tutorial, and you are deploying to a web site that runs on multiple servers, you could get mutiple servers trying to run migrations at the same time.&nbsp; Migrations are atomic, so if two servers try to run the same migration, one will succeed and the other will fail (assuming the operations can't be done twice). In that scenario if you want to avoid those issues, you can call migrations manually and set up your own code so that it only happens once. For more information, see <a href="http://romiller.com/2012/02/09/running-scripting-migrations-from-code/">Running and Scripting Migrations from Code</a> on Rowan Miller's blog and <a href="http://msdn.microsoft.com/en-us/data/jj618307">Migrate.exe</a> (for executing migrations from the command line) on MSDN.</p>
<p>For information about other migrations scenarios, see <a href="http://blogs.msdn.com/b/adonet/archive/2014/03/12/migrations-screencast-series.aspx">Migrations Screencast Series</a>.</p>
<h2>Code First Initializers</h2>
<p>In the deployment section you saw the&nbsp;<a href="http://msdn.microsoft.com/en-us/library/hh829476(v=vs.103).aspx">MigrateDatabaseToLatestVersion</a> initializer being used. Code First also provides other initializers, including <a href="http://msdn.microsoft.com/en-us/library/gg679221(v=vs.103).aspx">CreateDatabaseIfNotExists</a> (the default),&nbsp; <a href="http://msdn.microsoft.com/en-us/library/gg679604(v=VS.103).aspx">DropCreateDatabaseIfModelChanges</a> (which you used earlier) and<a href="http://msdn.microsoft.com/en-us/library/gg679506(v=VS.103).aspx">DropCreateDatabaseAlways</a>. The <code>DropCreateAlways</code> initializer can be useful for setting up conditions for unit tests. You can also write your own initializers, and you can call an initializer explicitly if you don't want to wait until the application reads from or writes to the database. At the time this tutorial is being written in November, 2013, you can only use the Create and DropCreate initializers before you enable migrations. The Entity Framework team is working on making these initializers usable with migrations as well.</p>
<p>For more information about initializers, see <a href="http://www.codeguru.com/csharp/article.php/c19999/Understanding-Database-Initializers-in-Entity-Framework-Code-First.htm">Understanding Database Initializers in Entity Framework Code First</a> and chapter 6 of the book<a href="http://shop.oreilly.com/product/0636920022220.do">Programming Entity Framework: Code First</a> by Julie Lerman and Rowan Miller.</p>
<h2>Summary</h2>
<p>In this tutorial you've seen how to enable migrations and deploy the application. In the next tutorial you'll begin looking at more advanced topics by expanding the data model.</p>
</body>
</html>
***********************************
Filename: Getting Started with Entity Framework 6 Code First using MVC 5 - C# Edition.html
***********************************
<!DOCTYPE html>
<html>
<head>
</head>
<body style="font-family: arial, helvetica, sans-serif;font-size: 12px;">
<div class="important important-box-article">
<p>The Contoso University sample web application demonstrates how to create ASP.NET MVC 5 applications using the Entity Framework 6 and Visual Studio 2015. This tutorial uses the Code First workflow. For information about how to choose between Code First, Database First, and Model First, see <a href="http://msdn.microsoft.com/en-us/library/ms178359.aspx#dbfmfcf">Entity Framework Development Workflows</a>.</p>
<p>The sample application is a web site for a fictional Contoso University. It includes functionality such as student admission, course creation, and instructor assignments. This tutorial series explains how to build the Contoso University sample application. You can <a href="http://code.msdn.microsoft.com/ASPNET-MVC-Application-b01a9fe8">download the completed application</a>&nbsp;if you would like a reference for some of the code in this tutorial. Please understand that each week you will be submitting your zipped solution/project and a Word document with your Website URL, Screen Captures of your website with your Name in the title, not Contoso University and a screen capture of your files in the solution explorer.</p>
<p>All projects&nbsp;have been confirmed to work with Visual Studio 2015, Windows 10 and Azure but there may be a few small discrepencies. If you find any of these, please notifiy your professor. You can find a fully functional version of this completed project hosted on Azure here: <a href="http://www.shanehamilton.com">http://www.shanehamilton.com</a>.</p>
<p>If you wish to use the VB edition, please not that I have not fully tested project in VB and I will take any advice/criticisms from those VB developers to help improve those projects.</p>
<p><strong></strong></p>
</div>
<div class="important important-box-article">
<div class="note"></div>
</div>
<h2>The Contoso University Web Application</h2>
<p>The application you'll be building in these tutorials is a simple university web site.</p>
<p>Users can view and update student, course, and instructor information. Here are a few of the screens you'll create.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48046/studentindex.png" data-original="//media-www-asp.azureedge.net/media/48046/studentindex.png" alt="Students_Index_page" />&nbsp;</p>
<p><img alt="Edit Student" src="http://media-www-asp.azureedge.net/media/48043/studentedit.png" data-original="//media-www-asp.azureedge.net/media/48043/studentedit.png" /></p>
<p>The UI style of this site has been kept close to what's generated by the built-in templates, so that the tutorial can focus mainly on how to use the Entity Framework.</p>
<h2>Prerequisites</h2>
<p>See <strong>Software Versions</strong> at the top of the page. Entity Framework 6 is not a prerequisite because you install the EF NuGet package as part of the tutorial.</p>
<h2>Create an MVC Web Application</h2>
<p>Open Visual Studio and create a new C# Web project named "ContosoUniversity".</p>
<p><img src="http://media-www-asp.azureedge.net/media/48034/np.png" data-original="//media-www-asp.azureedge.net/media/48034/np.png" alt="New_project_dialog_box" border="0" /></p>
<p>In the <strong>New ASP.NET Project</strong> dialog box select the <strong>MVC</strong> template.</p>
<p>If the <strong>Host in the cloud</strong> check box in the <strong>Microsoft Azure</strong> section is selected, clear it.</p>
<p>Click <strong>Change Authentication</strong>.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48032/nap.png" data-original="//media-www-asp.azureedge.net/media/48032/nap.png" alt="New_project_dialog_box" border="0" /></p>
<p>In the <strong>Change Authentication</strong> dialog box, select <strong>No Authentication</strong>, and then click <strong>OK</strong>. For this tutorial you won't be requiring users to log on or restricting access based on who's logged on.</p>
<p><img src="http://media-www-asp.azureedge.net/media/47998/ca.png" data-original="//media-www-asp.azureedge.net/media/47998/ca.png" alt="New_project_dialog_box" border="0" /></p>
<p>Back in the New ASP.NET Project dialog box, click <strong>OK</strong> to create the project.&nbsp;</p>
<h2>Set Up the Site Style</h2>
<p>A few simple changes will set up the site menu, layout, and home page.</p>
<p>Open <em>Views\Shared\_Layout.cshtml</em>, and make the following changes:</p>
<ul>
<li>Change each occurrence of "My ASP.NET Application" and "Application name" to "Contoso University".</li>
<li>Add menu entries for Students, Courses, Instructors, and Departments, and delete the Contact entry.</li>
</ul>
<p>The changes are highlighted.</p>
<pre class="prettyprint prettyprinted"><span class="dec">&lt;!DOCTYPE html&gt;</span><span class="pln">
</span><span class="tag">&lt;html&gt;</span><span class="pln">
</span><span class="tag">&lt;head&gt;</span><span class="pln">
    </span><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">charset</span><span class="pun">=</span><span class="atv">"utf-8"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"viewport"</span><span class="pln"> </span><span class="atn">content</span><span class="pun">=</span><span class="atv">"width=device-width, initial-scale=1.0"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;title&gt;</span><span class="pln">@ViewBag.Title - </span><mark><span class="pln">Contoso University</span></mark><span class="tag">&lt;/title&gt;</span><span class="pln">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</span><span class="tag">&lt;/head&gt;</span><span class="pln">
</span><span class="tag">&lt;body&gt;</span><span class="pln">
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"navbar navbar-inverse navbar-fixed-top"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"navbar-inner"</span><span class="tag">&gt;</span><span class="pln">
            </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"container"</span><span class="tag">&gt;</span><span class="pln">
                </span><span class="tag">&lt;button</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"button"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"btn btn-navbar"</span><span class="pln"> </span><span class="atn">data-toggle</span><span class="pun">=</span><span class="atv">"collapse"</span><span class="pln"> </span><span class="atn">data-target</span><span class="pun">=</span><span class="atv">".nav-collapse"</span><span class="tag">&gt;</span><span class="pln">
                    </span><span class="tag">&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"icon-bar"</span><span class="tag">&gt;&lt;/span&gt;</span><span class="pln">
                    </span><span class="tag">&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"icon-bar"</span><span class="tag">&gt;&lt;/span&gt;</span><span class="pln">
                    </span><span class="tag">&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"icon-bar"</span><span class="tag">&gt;&lt;/span&gt;</span><span class="pln">
                </span><span class="tag">&lt;/button&gt;</span><span class="pln">
                @Html.ActionLink("</span><mark><span class="pln">Contoso University</span></mark><span class="pln">", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
                </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"nav-collapse collapse"</span><span class="tag">&gt;</span><span class="pln">
                    </span><span class="tag">&lt;ul</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"nav"</span><span class="tag">&gt;</span><span class="pln">
                        </span><span class="tag">&lt;li&gt;</span><span class="pln">@Html.ActionLink("Home", "Index", "Home")</span><span class="tag">&lt;/li&gt;</span><span class="pln">
                        </span><span class="tag">&lt;li&gt;</span><span class="pln">@Html.ActionLink("About", "About", "Home")</span><span class="tag">&lt;/li&gt;</span><span class="pln">
                        </span><mark><span class="tag">&lt;li&gt;</span><span class="pln">@Html.ActionLink("Students", "Index", "Student")</span><span class="tag">&lt;/li&gt;</span><span class="pln">
                        </span><span class="tag">&lt;li&gt;</span><span class="pln">@Html.ActionLink("Courses", "Index", "Course")</span><span class="tag">&lt;/li&gt;</span><span class="pln">
                        </span><span class="tag">&lt;li&gt;</span><span class="pln">@Html.ActionLink("Instructors", "Index", "Instructor")</span><span class="tag">&lt;/li&gt;</span><span class="pln">
                        </span><span class="tag">&lt;li&gt;</span><span class="pln">@Html.ActionLink("Departments", "Index", "Department")</span><span class="tag">&lt;/li&gt;</span></mark><span class="pln">
                    </span><span class="tag">&lt;/ul&gt;</span><span class="pln">
                </span><span class="tag">&lt;/div&gt;</span><span class="pln">
            </span><span class="tag">&lt;/div&gt;</span><span class="pln">
        </span><span class="tag">&lt;/div&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">

    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"container"</span><span class="tag">&gt;</span><span class="pln">
        @RenderBody()
        </span><span class="tag">&lt;hr</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
        </span><span class="tag">&lt;footer&gt;</span><span class="pln">
            </span><span class="tag">&lt;p&gt;</span><span class="pln">&amp;copy; @DateTime.Now.Year - </span><mark><span class="pln">Contoso University</span></mark><span class="tag">&lt;/p&gt;</span><span class="pln">
        </span><span class="tag">&lt;/footer&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</span><span class="tag">&lt;/body&gt;</span><span class="pln">
</span><span class="tag">&lt;/html&gt;</span></pre>
<p>In <em>Views\Home\Index.cshtml</em>, replace the contents of the file with the following code to replace the text about ASP.NET and MVC with text about this application:</p>
<pre class="prettyprint prettyprinted"><span class="pln">@{
    ViewBag.Title = "Home Page";
}

</span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"jumbotron"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;h1&gt;</span><span class="pln">Contoso University</span><span class="tag">&lt;/h1&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"row"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-4"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;h2&gt;</span><span class="pln">Welcome to Contoso University</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
        </span><span class="tag">&lt;p&gt;</span><span class="pln">Contoso University is a sample application that
        demonstrates how to use Entity Framework 6 in an 
        ASP.NET MVC 5 web application.</span><span class="tag">&lt;/p&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-4"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;h2&gt;</span><span class="pln">Build it from scratch</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
        </span><span class="tag">&lt;p&gt;</span><span class="pln">You can build the application by following the steps in the tutorial series on the ASP.NET site.</span><span class="tag">&lt;/p&gt;</span><span class="pln">
        </span><span class="tag">&lt;p&gt;&lt;a</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"btn btn-default"</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/"</span><span class="tag">&gt;</span><span class="pln">See the tutorial &amp;raquo;</span><span class="tag">&lt;/a&gt;&lt;/p&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-4"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;h2&gt;</span><span class="pln">Download it</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
        </span><span class="tag">&lt;p&gt;</span><span class="pln">You can download the completed project from the Microsoft Code Gallery.</span><span class="tag">&lt;/p&gt;</span><span class="pln">
        </span><span class="tag">&lt;p&gt;&lt;a</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"btn btn-default"</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"http://code.msdn.microsoft.com/ASPNET-MVC-Application-b01a9fe8"</span><span class="tag">&gt;</span><span class="pln">Download &amp;raquo;</span><span class="tag">&lt;/a&gt;&lt;/p&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p>Press CTRL+F5 to run the site. You see the home page with the main menu.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48015/home.png" data-original="//media-www-asp.azureedge.net/media/48015/home.png" alt="Contoso_University_home_page" border="0" /></p>
<h2>Install Entity Framework 6</h2>
<p>From the <strong>Tools</strong> menu click <strong>NuGet Package Manager</strong> and then click <strong>Package Manager Console</strong>.</p>
<p>In the <strong>Package Manager Console</strong> window enter the following command:</p>
<p><code>Install-Package EntityFramework</code></p>
<p><img alt="EF installed" src="http://media-www-asp.azureedge.net/media/48013/efinstall.png" data-original="//media-www-asp.azureedge.net/media/48013/efinstall.png" /></p>
<p>The image shows 6.0.0 being installed, but NuGet will install the latest version of Entity Framework (excluding pre-release versions), which as of the most recent update to the tutorial is 6.1.1.</p>
<p>This step is one of a few steps that this tutorial has you do manually, but which could have been done automatically by the ASP.NET MVC scaffolding feature. You're doing them manually so that you can see the steps required to use the Entity Framework. You'll use scaffolding later to create the MVC controller and views. An alternative is to let scaffolding automatically install the EF NuGet package, create the database context class, and create the connection string. When you're ready to do it that way, all you have to do is skip those steps and scaffold your MVC controller after you create your entity classes.&nbsp;</p>
<h2>Create the Data Model</h2>
<p>Next you'll create entity classes for the Contoso University application. You'll start with the following three entities:</p>
<p><img src="http://media-www-asp.azureedge.net/media/47999/ces.png" data-original="//media-www-asp.azureedge.net/media/47999/ces.png" alt="Class_diagram" border="0" /></p>
<p>There's a one-to-many relationship between <code>Student</code> and <code>Enrollment</code> entities, and there's a one-to-many relationship between <code>Course</code> and<code>Enrollment</code> entities. In other words, a student can be enrolled in any number of courses, and a course can have any number of students enrolled in it.</p>
<p>In the following sections you'll create a class for each one of these entities.</p>
<div class="note"><span></span>
<p><strong>Note</strong> If you try to compile the project before you finish creating all of these entity classes, you'll get compiler errors.</p>
</div>
<h3>The Student Entity</h3>
<p><img src="http://media-www-asp.azureedge.net/media/48038/student.png" data-original="//media-www-asp.azureedge.net/media/48038/student.png" alt="Student_entity" /></p>
<p>In the <em>Models</em> folder, create a class file named <em>Student.cs</em> and replace the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Student</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> ID </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <code>ID</code> property will become the primary key column of the database table that corresponds to this class. By default, the Entity Framework interprets a property that's named <code>ID</code> or <em>classname</em><code>ID</code> as the primary key.</p>
<p>The <code>Enrollments</code> property is a <em>navigation property</em>. Navigation properties hold other entities that are related to this entity. In this case, the<code>Enrollments</code> property of a <code>Student</code> entity will hold all of the <code>Enrollment</code> entities that are related to that <code>Student</code> entity. In other words, if a given <code>Student</code> row in the database has two related <code>Enrollment</code> rows (rows that contain that student's primary key value in their <code>StudentID</code>foreign key column), that <code>Student</code> entity's <code>Enrollments</code> navigation property will contain those two <code>Enrollment</code> entities.</p>
<p>Navigation properties are typically defined as <code>virtual</code> so that they can take advantage of certain Entity Framework functionality such as <em>lazy loading</em>. (Lazy loading will be explained later, in the <a href="http://www.asp.net/entity-framework/tutorials/reading-related-data-with-the-entity-framework-in-an-asp-net-mvc-application">Reading Related Data</a> tutorial later in this series.)</p>
<p>If a navigation property can hold multiple entities (as in many-to-many or one-to-many relationships), its type must be a list in which entries can be added, deleted, and updated, such as <code>ICollection</code>.</p>
<h3>The Enrollment Entity</h3>
<p><img src="http://media-www-asp.azureedge.net/media/4358039/e.png" data-original="//media-www-asp.azureedge.net/media/4358039/e.png" alt="Enrollment_entity" /></p>
<p>In the <em>Models</em> folder, create <em>Enrollment.cs</em> and replace the existing code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="typ">Grade</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        A</span><span class="pun">,</span><span class="pln"> B</span><span class="pun">,</span><span class="pln"> C</span><span class="pun">,</span><span class="pln"> D</span><span class="pun">,</span><span class="pln"> F
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">EnrollmentID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">StudentID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Grade</span><span class="pun">?</span><span class="pln"> </span><span class="typ">Grade</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="typ">Course</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <code>EnrollmentID</code> property will be the primary key; this entity uses the <em>classname</em><code>ID</code> pattern instead of <code>ID</code> by itself as you saw in the <code>Student</code>entity. Ordinarily you would choose one pattern and use it throughout your data model. Here, the variation illustrates that you can use either pattern. In a later tutorial, you'll see how using <code>ID</code> without <code>classname</code> makes it easier to implement inheritance in the data model.</p>
<p>The <code>Grade</code> property is an <a href="http://msdn.microsoft.com/en-us/data/hh859576.aspx">enum</a>. The question mark after the <code>Grade</code> type declaration indicates that the <code>Grade</code> property is <a href="http://msdn.microsoft.com/en-us/library/2cf62fcy.aspx">nullable</a>. A grade that's null is different from a zero grade &mdash; null means a grade isn't known or hasn't been assigned yet.</p>
<p>The <code>StudentID</code> property is a foreign key, and the corresponding navigation property is <code>Student</code>. An <code>Enrollment</code> entity is associated with one<code>Student</code> entity, so the property can only hold a single <code>Student</code> entity (unlike the <code>Student.Enrollments</code> navigation property you saw earlier, which can hold multiple <code>Enrollment</code> entities).</p>
<p>The <code>CourseID</code> property is a foreign key, and the corresponding navigation property is <code>Course</code>. An <code>Enrollment</code> entity is associated with one<code>Course</code> entity.</p>
<p>Entity Framework interprets a property as a foreign key property if it's named <em>&lt;navigation property name&gt;&lt;primary key property name&gt;</em> (for example, <code>StudentID</code> for the <code>Student</code> navigation property since the <code>Student</code> entity's primary key is <code>ID</code>). Foreign key properties can also be named the same simply <em>&lt;primary key property name&gt;</em> (for example, <code>CourseID</code> since the <code>Course</code> entity's primary key is <code>CourseID</code>).</p>
<h3>The Course Entity</h3>
<p><img src="http://media-www-asp.azureedge.net/media/4358045/c.png" data-original="//media-www-asp.azureedge.net/media/4358045/c.png" alt="Course_entity" /></p>
<p>In the <em>Models</em> folder, create<em> Course.cs</em>, replacing the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">.</span><span class="typ">Schema</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Course</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DatabaseGenerated</span><span class="pun">(</span><span class="typ">DatabaseGeneratedOption</span><span class="pun">.</span><span class="kwd">None</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">Credits</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <code>Enrollments</code> property is a navigation property. A <code>Course</code> entity can be related to any number of <code>Enrollment</code> entities.</p>
<p>We'll say more about the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.schema.databasegeneratedattribute(v=vs.110).aspx">DatabaseGenerated</a> attribute in a later tutorial in this series. Basically, this attribute lets you enter the primary key for the course rather than having the database generate it.</p>
<h2>Create the Database Context</h2>
<p>The main class that coordinates Entity Framework functionality for a given data model is the <em>database context</em> class. You create this class by deriving from the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext(v=VS.103).aspx">System.Data.Entity.DbContext</a> class. In your code you specify which entities are included in the data model. You can also customize certain Entity Framework behavior. In this project, the class is named <code>SchoolContext</code>.</p>
<p>To create a folder in the ContosoUniversity project, right-click the project in <strong>Solution Explorer</strong> and click <strong>Add</strong>, and then click <strong>New Folder</strong>. Name the new folder <em>DAL</em> (for Data Access Layer). In that folder create a new class file named <em>SchoolContext.cs</em>, and replace the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">ModelConfiguration</span><span class="pun">.</span><span class="typ">Conventions</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SchoolContext</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">DbContext</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
    
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SchoolContext</span><span class="pun">()</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">base</span><span class="pun">(</span><span class="str">"SchoolContext"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">Student</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Students</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DbSet</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">OnModelCreating</span><span class="pun">(</span><span class="typ">DbModelBuilder</span><span class="pln"> modelBuilder</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            modelBuilder</span><span class="pun">.</span><span class="typ">Conventions</span><span class="pun">.</span><span class="typ">Remove</span><span class="pun">&lt;</span><span class="typ">PluralizingTableNameConvention</span><span class="pun">&gt;();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<h3>Specifying entity sets</h3>
<p>This code creates a <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbset(v=VS.103).aspx">DbSet</a> property for each entity set. In Entity Framework terminology, an <em>entity set</em> typically corresponds to a database table, and an <em>entity</em> corresponds to a row in the table.</p>
<div class="note"><span></span>
<p>You could have omitted the <code>DbSet&lt;Enrollment&gt;</code> and <code>DbSet&lt;Course&gt;</code> statements and it would work the same. The Entity Framework would include them implicitly because the <code>Student</code> entity references the <code>Enrollment</code> entity and the <code>Enrollment</code>entity references the <code>Course</code> entity.</p>
</div>
<h3>Specifying the connection string</h3>
<p>The name of the connection string (which you'll add to the Web.config file later) is passed in to the constructor.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">SchoolContext</span><span class="pun">()</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">base</span><span class="pun">(</span><span class="str">"</span><mark><span class="str">SchoolContext</span></mark><span class="str">"</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>You could also pass in the connection string itself instead of the name of one that is stored in the Web.config file. For more information about options for specifying the database to use, see <a href="http://msdn.microsoft.com/en-us/data/jj592674">Entity Framework - Connections and Models</a>.</p>
<p>If you don't specify a connection string or the name of one explicitly, Entity Framework assumes that the connection string name is the same as the class name. The default connection string name in this example would then be <code>SchoolContext</code>, the same as what you're specifying explicitly.</p>
<h3>Specifying singular table names</h3>
<p>The <code>modelBuilder.Conventions.Remove</code> statement in the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext.onmodelcreating(v=vs.103).aspx">OnModelCreating</a> method prevents table names from being pluralized. If you didn't do this, the generated tables in the database would be named <code>Students</code>, <code>Courses</code>, and <code>Enrollments</code>. Instead, the table names will be<code>Student</code>, <code>Course</code>, and <code>Enrollment</code>. Developers disagree about whether table names should be pluralized or not. This tutorial uses the singular form, but the important point is that you can select whichever form you prefer by including or omitting this line of code.</p>
<h2>Set up EF to initialize the database with test data</h2>
<p>The Entity Framework can automatically create (or drop and re-create) a database for you when the application runs. You can specify that this should be done every time your application runs or only when the model is out of sync with the existing database. You can also write a <code>Seed</code>method that the Entity Framework automatically calls after creating the database in order to populate it with test data.</p>
<p>The default behavior is to create a database only if it doesn't exist (and throw an exception if the model has changed and the database already exists). In this section you'll specify that the database should be dropped and re-created whenever the model changes. Dropping the database causes the loss of all your data. This is generally OK during development, because the <code>Seed</code> method will run when the database is re-created and will re-create your test data. But in production you generally don't want to lose all your data every time you need to change the database schema. Later you'll see how to handle model changes by using Code First Migrations to change the database schema instead of dropping and re-creating the database.</p>
<p>In the DAL folder, create a new class file named <em>SchoolInitializer.cs</em> and replace the template code with the<br />following code, which causes a database to be created when needed and loads test data into the new database.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Linq</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Web</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SchoolInitializer</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="pln"> </span><span class="typ">DropCreateDatabaseIfModelChanges</span><span class="pun">&lt;</span><span class="typ">SchoolContext</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Seed</span><span class="pun">(</span><span class="typ">SchoolContext</span><span class="pln"> context</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> students </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Student</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">{</span><span class="typ">FirstMidName</span><span class="pun">=</span><span class="str">"Carson"</span><span class="pun">,</span><span class="typ">LastName</span><span class="pun">=</span><span class="str">"Alexander"</span><span class="pun">,</span><span class="typ">EnrollmentDate</span><span class="pun">=</span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2005-09-01"</span><span class="pun">)},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">{</span><span class="typ">FirstMidName</span><span class="pun">=</span><span class="str">"Meredith"</span><span class="pun">,</span><span class="typ">LastName</span><span class="pun">=</span><span class="str">"Alonso"</span><span class="pun">,</span><span class="typ">EnrollmentDate</span><span class="pun">=</span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2002-09-01"</span><span class="pun">)},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">{</span><span class="typ">FirstMidName</span><span class="pun">=</span><span class="str">"Arturo"</span><span class="pun">,</span><span class="typ">LastName</span><span class="pun">=</span><span class="str">"Anand"</span><span class="pun">,</span><span class="typ">EnrollmentDate</span><span class="pun">=</span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2003-09-01"</span><span class="pun">)},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">{</span><span class="typ">FirstMidName</span><span class="pun">=</span><span class="str">"Gytis"</span><span class="pun">,</span><span class="typ">LastName</span><span class="pun">=</span><span class="str">"Barzdukas"</span><span class="pun">,</span><span class="typ">EnrollmentDate</span><span class="pun">=</span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2002-09-01"</span><span class="pun">)},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">{</span><span class="typ">FirstMidName</span><span class="pun">=</span><span class="str">"Yan"</span><span class="pun">,</span><span class="typ">LastName</span><span class="pun">=</span><span class="str">"Li"</span><span class="pun">,</span><span class="typ">EnrollmentDate</span><span class="pun">=</span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2002-09-01"</span><span class="pun">)},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">{</span><span class="typ">FirstMidName</span><span class="pun">=</span><span class="str">"Peggy"</span><span class="pun">,</span><span class="typ">LastName</span><span class="pun">=</span><span class="str">"Justice"</span><span class="pun">,</span><span class="typ">EnrollmentDate</span><span class="pun">=</span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2001-09-01"</span><span class="pun">)},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">{</span><span class="typ">FirstMidName</span><span class="pun">=</span><span class="str">"Laura"</span><span class="pun">,</span><span class="typ">LastName</span><span class="pun">=</span><span class="str">"Norman"</span><span class="pun">,</span><span class="typ">EnrollmentDate</span><span class="pun">=</span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2003-09-01"</span><span class="pun">)},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">{</span><span class="typ">FirstMidName</span><span class="pun">=</span><span class="str">"Nino"</span><span class="pun">,</span><span class="typ">LastName</span><span class="pun">=</span><span class="str">"Olivetto"</span><span class="pun">,</span><span class="typ">EnrollmentDate</span><span class="pun">=</span><span class="typ">DateTime</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"2005-09-01"</span><span class="pun">)}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">

            students</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> courses </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pun">{</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">1050</span><span class="pun">,</span><span class="typ">Title</span><span class="pun">=</span><span class="str">"Chemistry"</span><span class="pun">,</span><span class="typ">Credits</span><span class="pun">=</span><span class="lit">3</span><span class="pun">,},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pun">{</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">4022</span><span class="pun">,</span><span class="typ">Title</span><span class="pun">=</span><span class="str">"Microeconomics"</span><span class="pun">,</span><span class="typ">Credits</span><span class="pun">=</span><span class="lit">3</span><span class="pun">,},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pun">{</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">4041</span><span class="pun">,</span><span class="typ">Title</span><span class="pun">=</span><span class="str">"Macroeconomics"</span><span class="pun">,</span><span class="typ">Credits</span><span class="pun">=</span><span class="lit">3</span><span class="pun">,},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pun">{</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">1045</span><span class="pun">,</span><span class="typ">Title</span><span class="pun">=</span><span class="str">"Calculus"</span><span class="pun">,</span><span class="typ">Credits</span><span class="pun">=</span><span class="lit">4</span><span class="pun">,},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pun">{</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">3141</span><span class="pun">,</span><span class="typ">Title</span><span class="pun">=</span><span class="str">"Trigonometry"</span><span class="pun">,</span><span class="typ">Credits</span><span class="pun">=</span><span class="lit">4</span><span class="pun">,},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pun">{</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">2021</span><span class="pun">,</span><span class="typ">Title</span><span class="pun">=</span><span class="str">"Composition"</span><span class="pun">,</span><span class="typ">Credits</span><span class="pun">=</span><span class="lit">3</span><span class="pun">,},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Course</span><span class="pun">{</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">2042</span><span class="pun">,</span><span class="typ">Title</span><span class="pun">=</span><span class="str">"Literature"</span><span class="pun">,</span><span class="typ">Credits</span><span class="pun">=</span><span class="lit">4</span><span class="pun">,}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
            courses</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> enrollments </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">1</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">1050</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">A</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">1</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">4022</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">C</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">1</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">4041</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">2</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">1045</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">B</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">2</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">3141</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">F</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">2</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">2021</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">F</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">3</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">1050</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">4</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">1050</span><span class="pun">,},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">4</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">4022</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">F</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">5</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">4041</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">C</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">6</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">1045</span><span class="pun">},</span><span class="pln">
            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enrollment</span><span class="pun">{</span><span class="typ">StudentID</span><span class="pun">=</span><span class="lit">7</span><span class="pun">,</span><span class="typ">CourseID</span><span class="pun">=</span><span class="lit">3141</span><span class="pun">,</span><span class="typ">Grade</span><span class="pun">=</span><span class="typ">Grade</span><span class="pun">.</span><span class="pln">A</span><span class="pun">},</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
            enrollments</span><span class="pun">.</span><span class="typ">ForEach</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">s</span><span class="pun">));</span><span class="pln">
            context</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <code>Seed</code> method takes the database context object as an input parameter, and the code in the method uses<br />that object to add new entities to the database. For each entity type, the code creates a collection of new<br />entities, adds them to the appropriate <code>DbSet</code> property, and then saves the changes to the database. It isn't<br />necessary to call the <code>SaveChanges</code> method after each group of entities, as is done here, but doing that helps<br />you locate the source of a problem if an exception occurs while the code is writing to the database.</p>
<p>To tell Entity Framework to use your initializer class, add an element to the <code>entityFramework</code> element in the application <em>Web.config</em> file (the one in the root project folder), as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;entityFramework&gt;</span><span class="pln">
</span><mark><span class="pln">  </span><span class="tag">&lt;contexts&gt;</span><span class="pln">
    </span><span class="tag">&lt;context</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"ContosoUniversity.DAL.SchoolContext, ContosoUniversity"</span><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;databaseInitializer</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"ContosoUniversity.DAL.SchoolInitializer, ContosoUniversity"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/context&gt;</span><span class="pln">
  </span><span class="tag">&lt;/contexts&gt;</span></mark><span class="pln">
  </span><span class="tag">&lt;defaultConnectionFactory</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;parameters&gt;</span><span class="pln">
      </span><span class="tag">&lt;parameter</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"v11.0"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/parameters&gt;</span><span class="pln">
  </span><span class="tag">&lt;/defaultConnectionFactory&gt;</span><span class="pln">
  </span><span class="tag">&lt;providers&gt;</span><span class="pln">
    </span><span class="tag">&lt;provider</span><span class="pln"> </span><span class="atn">invariantName</span><span class="pun">=</span><span class="atv">"System.Data.SqlClient"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/providers&gt;</span><span class="pln">
</span><span class="tag">&lt;/entityFramework&gt;</span></pre>
<p>The <code>context type</code> specifies the fully qualified context class name and the assembly it's in, and the <code>databaseinitializer type</code> specifies the fully qualified name of the initializer class and the assembly it's in. (When you don't want EF to use the initializer, you can set an attribute on the <code>context</code> element: <code>disableDatabaseInitialization="true"</code>.) For more information, see <a href="http://msdn.microsoft.com/en-us/data/jj556606">Entity Framework - Config File Settings</a>.</p>
<p>As an alternative to setting the initializer in the <em>Web.config</em> file is to do it in code by adding a <code>Database.SetInitializer</code> statement to the<code>Application_Start</code> method in the <em>Global.asax.cs</em> file. For more information, see <a href="http://www.codeguru.com/csharp/article.php/c19999/Understanding-Database-Initializers-in-Entity-Framework-Code-First.htm">Understanding Database Initializers in Entity Framework Code First</a>.</p>
<p>The application is now set up so that when you access the database for the first time in a given run of the<br />application, the Entity Framework compares the database to the model (your <code>SchoolContext</code> and entity classes). If there's a difference, the application drops and re-creates the database.</p>
<div class="note"><span></span>
<p><strong>Note:</strong> When you deploy an application to a production web server, you must remove or disable code that drops and re-creates the database. You'll do that in a later tutorial in this series.</p>
</div>
<h2>Set up EF to use a SQL Server Express LocalDB database</h2>
<p><a href="http://blogs.msdn.com/b/sqlexpress/archive/2011/07/12/introducing-localdb-a-better-sql-express.aspx">LocalDB</a> is a lightweight version of the SQL Server Express Database Engine. It's easy to install and configure, starts on demand, and runs in user mode. LocalDB runs in a special execution mode of SQL Server Express that enables you to work with databases as <em>.mdf</em> files. You can put LocalDB database files in the <em>App_Data</em> folder of a web project if you want to be able to copy the database with the project. The <span class="parameter">user instance</span>feature in SQL Server Express also enables you to work with <em>.mdf</em> files, but the user instance feature is deprecated; therefore, LocalDB is recommended for working with <em>.mdf</em> files. In Visual Studio 2012 and later versions, LocalDB is installed by default with Visual Studio.</p>
<p>Typically SQL Server Express is not used for production web applications. LocalDB in particular is not recommended for production use with a web application because it is not designed to work with IIS.</p>
<p>In this tutorial you'll work with LocalDB. Open the application <em>Web.config</em> file and add a <code>connectionStrings</code> element preceding the<code>appSettings</code> element, as shown in the following example. (Make sure you update the <em>Web.config</em> file in the root project folder. There's also a<em class="auto-style3"></em><em>Web.config</em> file is in the <em>Views</em> subfolder that you don't need to update.)</p>
<p>If you are using Visual Studio 2015, replace "v11.0" in the connection string with "MSSQLLocalDB", as the default SQL Server instance name has changed.</p>
<pre class="prettyprint prettyprinted"><mark><span class="tag">&lt;connectionStrings&gt;</span><span class="pln">
    </span><span class="tag">&lt;add</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"SchoolContext"</span><span class="pln"> </span><span class="atn">connectionString</span><span class="pun">=</span><span class="atv">"Data Source=(LocalDb)\v11.0;Initial Catalog=ContosoUniversity1;Integrated Security=SSPI;"</span><span class="pln"> </span><span class="atn">providerName</span><span class="pun">=</span><span class="atv">"System.Data.SqlClient"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/connectionStrings&gt;</span></mark><span class="pln">
</span><span class="tag">&lt;appSettings&gt;</span><span class="pln">
  </span><span class="tag">&lt;add</span><span class="pln"> </span><span class="atn">key</span><span class="pun">=</span><span class="atv">"webpages:Version"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"3.0.0.0"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;add</span><span class="pln"> </span><span class="atn">key</span><span class="pun">=</span><span class="atv">"webpages:Enabled"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"false"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;add</span><span class="pln"> </span><span class="atn">key</span><span class="pun">=</span><span class="atv">"ClientValidationEnabled"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"true"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;add</span><span class="pln"> </span><span class="atn">key</span><span class="pun">=</span><span class="atv">"UnobtrusiveJavaScriptEnabled"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"true"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/appSettings&gt;</span></pre>
<p>The connection string you've added specifies that Entity Framework will use a LocalDB database named <em>ContosoUniversity1.mdf</em>. (The database doesn't exist yet; EF will create it.) If you wanted the database to be created in your <em>App_Data</em> folder, you could add<code>AttachDBFilename=|DataDirectory|\ContosoUniversity1.mdf</code> to the connection string. For more information about connection strings, see <a href="http://msdn.microsoft.com/en-us/library/jj653752.aspx">SQL Server Connection Strings for ASP.NET Web Applications</a>.</p>
<p>You don't actually have to have a connection string in the <em>Web.config</em> file. If you don't supply a connection string, Entity Framework will use a default one based on your context class. For more information, see <a href="http://msdn.microsoft.com/en-us/data/jj193542">Code First to a New Database</a>. &nbsp;</p>
<h2>Creating a Student Controller and Views</h2>
<p>Now you'll create a web page to display data, and the process of requesting the data will automatically trigger<br />the creation of the database. You'll begin by creating a new controller. But before you do that, build the project to make the model and context classes available to MVC controller scaffolding.</p>
<ol>
<ol>
<li>
<p>Right-click the <strong>Controllers</strong> folder in <strong>Solution Explorer</strong>, select <strong>Add</strong>, and then click <strong>New Scaffolded Item</strong>.</p>
</li>
<li>
<p>In the <strong>Add Scaffold</strong> dialog box, select <strong>MVC 5 Controller with views, using Entity Framework</strong>.</p>
</li>
</ol>
</ol>
<p><img alt="Add Scaffold" src="http://media-www-asp.azureedge.net/media/47995/addscaffold.png" data-original="//media-www-asp.azureedge.net/media/47995/addscaffold.png" /></p>
<ol>
<li>
<p>In the Add Controller dialog box, make the following selections and then click <strong>Add</strong>:</p>
<ul>
<li>Model class: <strong>Student (ContosoUniversity.Models)</strong>. (If you don't see this option in the drop-down list, build the project and try again.)</li>
<li>Data context class: <strong>SchoolContext (ContosoUniversity.DAL)</strong>.</li>
<li>Controller name: <strong>StudentController</strong> (not StudentsController).</li>
<li>Leave the default values for the other fields.&nbsp;&nbsp;&nbsp;</li>
</ul>
<p><img src="http://media-www-asp.azureedge.net/media/4472355/addcontroller2.png" data-original="//media-www-asp.azureedge.net/media/4472355/addcontroller2.png" alt="Add_Controller_dialog_box_for_Student_controller" border="0" /></p>
<p>When you click <strong>Add</strong>, the scaffolder creates a StudentController.cs file and a set of views (.cshtml files) that work with the controller. In the future when you create projects that use Entity Framework you can also take advantage of some additional functionality of the scaffolder:&nbsp; just create your first model class, don't create a connection string, and then in the <strong>Add Controller</strong> box specify new context class.&nbsp; The scaffolder will create your <code>DbContext</code> class and your connection string as well as the controller and views.</p>
</li>
<li>
<p>Visual Studio opens the <em>Controllers\StudentController.cs</em> file. You see a class variable has been created that instantiates a database context object:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">private</span><span class="pln"> </span><span class="typ">SchoolContext</span><span class="pln"> db </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SchoolContext</span><span class="pun">();</span></pre>
<p>The <code>Index</code> action method gets a list of students from the <em>Students</em> entity set by reading the <code>Students</code> property of the database context instance:</p>
<pre class="prettyprint prettyprinted"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ViewResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">db</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">ToList</span><span class="pun">());</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <em>Student\Index.cshtml</em> view displays this list in a table:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;table&gt;</span><span class="pln">
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.DisplayNameFor(model =&gt; model.LastName)
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.DisplayNameFor(model =&gt; model.FirstMidName)
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.DisplayNameFor(model =&gt; model.EnrollmentDate)
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;&lt;/th&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">

@foreach (var item in Model) {
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.LastName)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.FirstMidName)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.EnrollmentDate)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) |
            @Html.ActionLink("Details", "Details", new { id=item.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ID })
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
}</span></pre>
</li>
<li>
<p>Press CTRL+F5 to run the project. (If you get a "Cannot create Shadow Copy" error, close the browser and try again.)</p>
<p>Click the <strong>Students</strong> tab to see the test data that the <code>Seed</code> method inserted. Depending on how narrow your browser window is, you'll see the Student tab link in the top address bar or you'll have to click the upper right corner to see the link.</p>
<p><img alt="Menu button" src="http://media-www-asp.azureedge.net/media/47997/bootstrapmenu.png" data-original="//media-www-asp.azureedge.net/media/47997/bootstrapmenu.png" /></p>
<p><img alt="Student Index page" src="http://media-www-asp.azureedge.net/media/48046/studentindex.png" data-original="//media-www-asp.azureedge.net/media/48046/studentindex.png" /></p>
</li>
</ol>
<h2>View the Database</h2>
<p>When you ran the Students page and the application tried to access the database, EF saw that there was no database and so it created one, then it ran the seed method to populate the database with data.</p>
<p>You can use either <strong>Server Explorer</strong> or <strong>SQL Server Object Explorer</strong> (SSOX) to view the database in Visual Studio. For this tutorial you'll use<strong>Server Explorer</strong>. (In Visual Studio Express editions earlier than 2013, <strong>Server Explorer</strong> is called <strong>Database Explorer</strong>.)</p>
<ol>
<li>
<p>Close the browser.</p>
</li>
<li>
<p>In <strong>Server Explorer</strong>, expand <strong>Data Connections</strong>, expand <strong>School Context (ContosoUniversity)</strong>, and then expand <strong>Tables</strong> to see the tables in your new database.</p>
<p><img src="http://media-www-asp.azureedge.net/media/4477761/tablesinse.png" data-original="//media-www-asp.azureedge.net/media/4477761/tablesinse.png" /></p>
</li>
<li>
<p>Right-click the <strong>Student</strong> table and click <strong>Show Table Data</strong> to see the columns that were created and the rows that were inserted into the table.</p>
<p><img alt="Student table" src="http://media-www-asp.azureedge.net/media/4336296/1showstuddata.png" data-original="//media-www-asp.azureedge.net/media/4336296/1showstuddata.png" />&nbsp;</p>
</li>
<li>
<p>Close the <strong>Server Explorer</strong> connection.</p>
</li>
</ol>
<p>The <em>ContosoUniversity1.mdf </em>and <em>.ldf </em>database files are in the <code>C:\Users\&lt;yourusername&gt;</code> folder.</p>
<p>Because you're using the <code>DropCreateDatabaseIfModelChanges</code> initializer, you could now make a change to the <code>Student</code> class, run the application again, and the database would automatically be re-created to match your change. For example, if you add an <code>EmailAddress</code>property to the <code>Student</code> class, run the Students page again, and then look at the table again, you will see a new <code>EmailAddress</code> column.</p>
<h2>Conventions</h2>
<p>The amount of code you had to write in order for the Entity Framework to be able to create a complete database for you is minimal because of the use of <em>conventions</em>, or assumptions that the Entity Framework makes. Some of them have already been noted or were used without your being aware of them:</p>
<ul>
<li>The pluralized forms of entity class names are used as table names.</li>
<li>Entity property names are used for column names.</li>
<li>Entity properties that are named <code>ID</code> or <em>classname</em><code>ID</code> are recognized as primary key properties.&nbsp;</li>
<li>A property is interpreted as a foreign key property if it's named <em>&lt;navigation property name&gt;&lt;primary key property name&gt;</em> (for example,<code>StudentID</code> for the <code>Student</code> navigation property since the <code>Student</code> entity's primary key is <code>ID</code>). Foreign key properties can also be named the same simply &lt;primary key property name&gt; (for example, <code>EnrollmentID</code> since the <code>Enrollment</code> entity's primary key is<code>EnrollmentID</code>).</li>
</ul>
<p>You've seen that conventions can be overridden. For example, you specified that table names shouldn't be pluralized, and you'll see later how to explicitly mark a property as a foreign key property. You'll learn more about conventions and how to override them in the <a href="http://www.asp.net/entity-framework/tutorials/creating-a-more-complex-data-model-for-an-asp-net-mvc-application">Creating a More Complex Data Model</a> tutorial later in this series.&nbsp; For more information about conventions, see <a href="http://msdn.microsoft.com/en-us/data/jj679962">Code First Conventions</a>.</p>
<h2>Summary</h2>
<p>You've now created a simple application that uses the Entity Framework and SQL Server Express LocalDB to store and display data. In the following tutorial you'll learn how to perform basic CRUD (create, read, update, delete) operations.&nbsp;</p>
</body>
</html>
***********************************
Filename: Implementing Basic CRUD Functionality with the Entity Framework in ASP.NET MVC Application.html
***********************************
<!DOCTYPE html>
<html>
<head>
</head>
<body style="font-family: arial, helvetica, sans-serif;font-size: 12px;">
<div class="article-title keyline">
<div itemprop="name">In the previous tutorial you created an MVC application that stores and displays data using the Entity Framework and SQL Server LocalDB. In this tutorial you'll review and customize the CRUD (create, read, update, delete) code that the MVC scaffolding automatically creates for you in controllers and views.</div>
</div>
<div class="note"><span></span>
<p><strong>Note</strong> It's a common practice to implement the repository pattern in order to create an abstraction layer between your controller and the data access layer. To keep these tutorials simple and focused on teaching how to use the Entity Framework itself, they don't use repositories. For information about how to implement repositories, see the <a href="http://www.asp.net/whitepapers/aspnet-data-access-content-map">ASP.NET Data Access Content Map</a>.</p>
</div>
<p>In this tutorial, you'll create the following web pages:</p>
<p><img src="http://media-www-asp.azureedge.net/media/48042/studentdetails.png" data-original="//media-www-asp.azureedge.net/media/48042/studentdetails.png" alt="Student_Details_page" border="0" /></p>
<p><img src="http://media-www-asp.azureedge.net/media/48040/studentcreateerror.png" data-original="//media-www-asp.azureedge.net/media/48040/studentcreateerror.png" alt="Student_Edit_page" border="0" /></p>
<p><img src="http://media-www-asp.azureedge.net/media/48041/studentdelete.png" data-original="//media-www-asp.azureedge.net/media/48041/studentdelete.png" alt="Student_delete_page" border="0" /></p>
<h2>Create a Details Page</h2>
<p>The scaffolded code for the Students <code>Index </code>page left out the <code>Enrollments</code> property, because that property holds a collection. In the <code>Details</code>page you'll display the contents of the collection in an HTML table.</p>
<p><span>In </span><em>Controllers\StudentController.cs</em><span>, the action method for the </span><code>Details</code><span> view uses the </span><a href="http://msdn.microsoft.com/en-us/library/gg696418(v=VS.103).aspx">Find</a><span> method to retrieve a single </span><code>Student</code><span> entity.</span></p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Details</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">Student</span><span class="pln"> student </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">student </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">HttpNotFound</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">student</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The key value is passed to the method as the <code>id</code> parameter and comes from <em>route data</em> in the <strong>Details</strong> hyperlink on the Index page.</p>
<div class="sidebar"><span></span>
<h3>Route data</h3>
<p>Route data is data that the model binder found in a URL segment specified in the routing table. For example, the default route specifies <code>controller</code>, <code>action</code>, and <code>id</code> segments:</p>
<p>&nbsp;routes.MapRoute(<br />&nbsp;&nbsp;&nbsp; name: "Default",<br />&nbsp;&nbsp;&nbsp; url: <mark>"{controller}/{action}/{id}"</mark>,<br />&nbsp;&nbsp;&nbsp; defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }<br />);</p>
<p>In the following URL, the default route maps <code>Instructor</code> as the <code>controller</code>, <code>Index</code> as the <code>action</code> and 1 as the <code>id</code>; these are route data values.</p>
<p><code>http://localhost:1230/Instructor/Index/1?courseID=2021</code></p>
<p>"?courseID=2021" is a query string value. The model binder will also work if you pass the <code>id</code> as a query string value:</p>
<p><code>http://localhost:1230/Instructor/Index?id=1&amp;CourseID=2021</code></p>
<p>The URLs are created by <code>ActionLink</code> statements in the Razor view. In the following code, the <code>id</code> parameter matches the default route, so <code>id</code> is added to the route data.</p>
<pre class="prettyprint prettyprinted"><span class="pln"> @Html.ActionLink("Select", "Index", new { id = item.PersonID  })</span></pre>
<p>In the following code, <code>courseID</code> doesn't match a parameter in the default route, so it's added as a query string.</p>
<pre class="prettyprint prettyprinted"><span class="pln">@Html.ActionLink("Select", "Index", new { courseID = item.CourseID }) </span></pre>
</div>
<ol>
<li>
<p>Open <em>Views\Student\Details.cshtml</em>. Each field is displayed using a <code>DisplayFor</code> helper, as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;dt&gt;</span><span class="pln">
    @Html.DisplayNameFor(model =&gt; model.LastName)
</span><span class="tag">&lt;/dt&gt;</span><span class="pln">
</span><span class="tag">&lt;dd&gt;</span><span class="pln">
    @Html.DisplayFor(model =&gt; model.LastName)
</span><span class="tag">&lt;/dd&gt;</span></pre>
</li>
<li>
<p>After the <code>EnrollmentDate</code> field and immediately before the closing <code>&lt;/dl&gt;</code> tag, add the highlighted code to display a list of enrollments, as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="pln">        </span><span class="tag">&lt;dt&gt;</span><span class="pln">
            @Html.DisplayNameFor(model =&gt; model.EnrollmentDate)
        </span><span class="tag">&lt;/dt&gt;</span><span class="pln">

        </span><span class="tag">&lt;dd&gt;</span><span class="pln">
            @Html.DisplayFor(model =&gt; model.EnrollmentDate)
        </span><span class="tag">&lt;/dd&gt;</span><span class="pln">
        </span><mark><span class="tag">&lt;dt&gt;</span><span class="pln">
            @Html.DisplayNameFor(model =&gt; model.Enrollments)
        </span><span class="tag">&lt;/dt&gt;</span><span class="pln">
        </span><span class="tag">&lt;dd&gt;</span><span class="pln">
            </span><span class="tag">&lt;table</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"table"</span><span class="tag">&gt;</span><span class="pln">
                </span><span class="tag">&lt;tr&gt;</span><span class="pln">
                    </span><span class="tag">&lt;th&gt;</span><span class="pln">Course Title</span><span class="tag">&lt;/th&gt;</span><span class="pln">
                    </span><span class="tag">&lt;th&gt;</span><span class="pln">Grade</span><span class="tag">&lt;/th&gt;</span><span class="pln">
                </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
                @foreach (var item in Model.Enrollments)
                {
                    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
                        </span><span class="tag">&lt;td&gt;</span><span class="pln">
                            @Html.DisplayFor(modelItem =&gt; item.Course.Title)
                        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
                        </span><span class="tag">&lt;td&gt;</span><span class="pln">
                            @Html.DisplayFor(modelItem =&gt; item.Grade)
                        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
                    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
                }
            </span><span class="tag">&lt;/table&gt;</span><span class="pln">
        </span><span class="tag">&lt;/dd&gt;</span></mark><span class="pln">
    </span><span class="tag">&lt;/dl&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;p&gt;</span><span class="pln">
    @Html.ActionLink("Edit", "Edit", new { id = Model.ID }) |
    @Html.ActionLink("Back to List", "Index")
</span><span class="tag">&lt;/p&gt;</span></pre>
<p>If code indentation is wrong after you paste the code, press CTRL-K-D to correct it.</p>
<p>This code loops through the entities in the <code>Enrollments</code> navigation property. For each <code>Enrollment</code> entity in the property, it displays the course title and the grade. The course title is retrieved from the <code>Course</code> entity that's stored in the <code>Course</code> navigation property of the<code>Enrollments</code> entity. All of this data is retrieved from the database automatically when it's needed. (In other words, you are using lazy loading here. You did not specify <em>eager loading</em> for the <code>Courses</code> navigation property, so the enrollments were not retrieved in the same query that got the students. Instead, the first time you try to access the <code>Enrollments</code> navigation property, a new query is sent to the database to retrieve the data. You can read more about lazy loading and eager loading in the <a href="http://www.asp.net/entity-framework/tutorials/reading-related-data-with-the-entity-framework-in-an-asp-net-mvc-application">Reading Related Data</a> tutorial later in this series.)</p>
</li>
<li>
<p>Run the page by selecting the <strong>Students</strong> tab and clicking a <strong>Details</strong> link for Alexander Carson. (If you press CTRL+F5 while the Details.cshtml file is open, you'll get an HTTP 400 error because Visual Studio tries to run the Details page but it wasn't reached from a link that specifies the student to display. In that case, just remove "Student/Details" from the URL and try again, or close the browser, right-click the project, and click <strong>View</strong>, and then click <strong>View in Browser</strong>.)</p>
<p>You see the list of courses and grades for the selected student:</p>
<p><img src="http://media-www-asp.azureedge.net/media/48042/studentdetails.png" data-original="//media-www-asp.azureedge.net/media/48042/studentdetails.png" alt="Student_Details_page" /></p>
</li>
</ol>
<h2>Update the Create Page</h2>
<ol>
<li>
<p>In <em>Controllers\StudentController.cs</em>, replace the <code>HttpPost</code> <code>Create</code> action method with the following code to add a <code>try-catch</code> block and remove <code>ID</code> from the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.bindattribute(v=vs.108).aspx">Bind attribute</a> for the scaffolded method:</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Create</span><span class="pun">(</span><mark><span class="pun">[</span><span class="typ">Bind</span><span class="pun">(</span><span class="typ">Include</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"LastName, FirstMidName, EnrollmentDate"</span><span class="pun">)]</span></mark><span class="typ">Student</span><span class="pln"> student</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><mark><span class="kwd">try</span><span class="pln">
    </span><span class="pun">{</span></mark><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">IsValid</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            db</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">student</span><span class="pun">);</span><span class="pln">
            db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><mark><span class="pun">}</span><span class="pln">
    </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">DataException</span><span class="pln"> </span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.</span><span class="pln">
        </span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">AddModelError</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Unable to save changes. Try again, and if the problem persists see your system administrator."</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span></mark><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">student</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code adds the <code>Student</code> entity created by the ASP.NET MVC model binder to the <code>Students</code> entity set and then saves the changes to the database. (<em>Model binder</em> refers to the ASP.NET MVC functionality that makes it easier for you to work with data submitted by a form; a model binder converts posted form values to CLR types and passes them to the action method in parameters. In this case, the model binder instantiates a <code>Student</code> entity for you using property values from the <code>Form</code> collection.)</p>
<p>You removed <code>ID</code> from the Bind attribute because <code>ID</code> is the primary key value which SQL Server will set automatically when the row is inserted. Input from the user does not set the <code>ID</code> value.</p>
<a id="overpost"></a>
<div class="note"><span></span>
<p><strong>Security Note:</strong> The <code>ValidateAntiForgeryToken</code> attribute helps prevent <a href="http://www.asp.net/mvc/overview/security/xsrfcsrf-prevention-in-aspnet-mvc-and-web-pages">cross-site request forgery</a> attacks. It requires a corresponding <code>Html.AntiForgeryToken()</code> statement in the view, which you'll see later.</p>
<p>The <code>Bind</code> attribute is one way to protect against <em>over-posting</em> in create scenarios. For example, suppose the <code>Student</code>entity includes a <code>Secret</code> property that you don't want this web page to set.</p>
<pre class="prettyprint prettyprinted"><span class="pln">   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Student</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> ID </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">LastName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">FirstMidName</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
      </span><mark><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Secret</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></mark><span class="pln">

      </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
   </span><span class="pun">}</span></pre>
<p>Even if you don't have a <code>Secret</code> field on the web page, a hacker could use a tool such as <a href="http://fiddler2.com/home">fiddler</a>, or write some JavaScript, to post a <code>Secret</code> form value. Without the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.bindattribute(v=vs.108).aspx">Bind</a> attribute limiting the fields that the model binder uses when it creates a<code>Student</code> instance<em>,</em> the model binder would pick up that <code>Secret</code> form value and use it to create the <code>Student</code> entity instance. Then whatever value the hacker specified for the <code>Secret</code> form field would be updated in your database. The following image shows the fiddler tool adding the <code>Secret </code>field (with the value "OverPost") to the posted form values.</p>
<img src="http://media-www-asp.azureedge.net/media/4368211/overp.png" data-original="//media-www-asp.azureedge.net/media/4368211/overp.png" /><br />
<p>The value "OverPost" would then be successfully added to the <code>Secret</code> property of the inserted row, although you never intended that the web page be able to set that property.</p>
<p>It's a security best practice to use the <code>Include</code> parameter with the <code>Bind</code> attribute to <em>whitelist</em> fields. It's also possible to use the <code>Exclude</code> parameter to <em>blacklist </em>fields you want to exclude. The reason <code>Include</code> is more secure is that when you add a new property to the entity, the new field is not automatically protected by an <code>Exclude</code> list.</p>
<p>You can prevent overposting in edit scenarios is by reading the entity from the database first and then calling<code>TryUpdateModel</code>, passing in an explicit allowed properties list. That is the method used in these tutorials.</p>
<p>An alternative way to prevent overposting that is preferrred by many developers is to use view models rather than entity classes with model binding. Include only the properties you want to update in the view model. Once the MVC model binder has finished, copy the view model properties to the entity instance, optionally using a tool such as <a href="http://automapper.org/">AutoMapper</a>. Use db.Entry on the entity instance to set its state to Unchanged, and then set Property("PropertyName").IsModified to true on each entity property that is included in the view model. This method works in both edit and create scenarios.</p>
</div>
<p>Other than the <code>Bind</code> attribute, the <code>try-catch</code> block is the only change you've made to the scaffolded code. If an exception that derives from <a href="http://msdn.microsoft.com/en-us/library/system.data.dataexception.aspx">DataException</a> is caught while the changes are being saved, a generic error message is displayed. <a href="http://msdn.microsoft.com/en-us/library/system.data.dataexception.aspx">DataException</a> exceptions are sometimes caused by something external to the application rather than a programming error, so the user is advised to try again. Although not implemented in this sample, a production quality application would log the exception. For more information, see the <strong>Log for insight</strong> section in <a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log">Monitoring and Telemetry (Building Real-World Cloud Apps with Azure)</a>.</p>
<p>The code in <em>Views\Student\Create.cshtml</em> is similar to what you saw in <em>Details.cshtml</em>, except that <code>EditorFor</code> and <code>ValidationMessageFor</code>helpers are used for each field instead of <code>DisplayFor</code>. Here is the relevant code:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    @Html.LabelFor(model =&gt; model.LastName, new { @class = "control-label col-md-2" })
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-10"</span><span class="tag">&gt;</span><span class="pln">
        @Html.EditorFor(model =&gt; model.LastName)
        @Html.ValidationMessageFor(model =&gt; model.LastName)
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p><em>Create.chstml</em> also includes <code>@Html.AntiForgeryToken()</code>, which works with the <code>ValidateAntiForgeryToken</code> attribute in the controller to help prevent <a href="http://www.asp.net/mvc/overview/security/xsrfcsrf-prevention-in-aspnet-mvc-and-web-pages">cross-site request forgery</a> attacks.</p>
<p>No changes are required in <em>Create.cshtml</em>.&nbsp;</p>
</li>
<li>
<p>Run the page by selecting the <strong>Students</strong> tab and clicking <strong>Create New</strong>.</p>
</li>
<li>
<p>Enter names and an invalid date and click <strong>Create</strong> to see the error message.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48040/studentcreateerror.png" data-original="//media-www-asp.azureedge.net/media/48040/studentcreateerror.png" alt="Students_Create_page_error_message" border="0" /></p>
<p>This is server-side validation that you get by default; in a later tutorial you'll see how to add attributes that will generate code for client-side validation also. The following highlighted code shows the model validation check in the <strong>Create</strong> method.</p>
<pre class="prettyprint prettyprinted"><mark><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">IsValid</span><span class="pun">)</span></mark><span class="pln">
</span><span class="pun">{</span><span class="pln">
    db</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">student</span><span class="pun">);</span><span class="pln">
    db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
</li>
<li>
<p>Change the date to a valid value and click <strong>Create</strong> to see the new student appear in the <strong>Index</strong> page.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48047/studentindexwithgao.png" data-original="//media-www-asp.azureedge.net/media/48047/studentindexwithgao.png" alt="Students_Index_page_with_new_student" border="0" /></p>
</li>
</ol>
<h2>Update the Edit HttpPost Method</h2>
<p>In <em>Controllers\StudentController.cs</em>, the <code>HttpGet</code> <code>Edit</code> method (the one without the <code>HttpPost</code> attribute) uses the <code>Find</code> method to retrieve the selected <code>Student</code> entity, as you saw in the <code>Details</code> method. You don't need to change this method.</p>
<p>However, replace the <code>HttpPost</code> <code>Edit</code> action method with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ActionName</span><span class="pun">(</span><span class="str">"Edit"</span><span class="pun">)]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">EditPost</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> studentToUpdate </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">TryUpdateModel</span><span class="pun">(</span><span class="pln">studentToUpdate</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">,</span><span class="pln">
       </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"LastName"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"FirstMidName"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"EnrollmentDate"</span><span class="pln"> </span><span class="pun">}))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">try</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">DataException</span><span class="pln"> </span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.</span><span class="pln">
            </span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">AddModelError</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Unable to save changes. Try again, and if the problem persists, see your system administrator."</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">studentToUpdate</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>These changes implement a security best practice to prevent <a href="http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application#overpost">overposting</a>,&nbsp; The scaffolder generated a <code>Bind</code> attribute and added the entity created by the model binder to the entity set with a Modified flag. That code is no longer recommended because the <code>Bind</code> attribute clears out any pre-existing data in fields not listed in the <code>Include</code> parameter. In the future, the MVC controller scaffolder will be updated so that it doesn't generate <code>Bind</code> attributes for Edit methods.</p>
<p>The new code reads the existing entity and calls <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.controller.tryupdatemodel(v=vs.118).aspx">TryUpdateModel</a> to update fields from user input in the posted form data. The Entity Framework's automatic change tracking sets the <a href="http://msdn.microsoft.com/en-us/library/system.data.entitystate.aspx">Modified</a> flag on the entity. When the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext.savechanges(v=VS.103).aspx">SaveChanges</a> method is called, the <code>Modified</code> flag causes the Entity Framework to create SQL statements to update the database row. <a href="http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/handling-concurrency-with-the-entity-framework-in-an-asp-net-mvc-application">Concurrency conflicts</a> are ignored, and all columns of the database row are updated, including those that the user didn't change. (A later tutorial shows how to handle concurrency conflicts, and if you only want individual fields to be updated in the database, you can set the entity to Unchanged and set individual fields to Modified.)</p>
<p>As a best practice to prevent overposting, the fields that you want to be updateable by the Edit page are whitelisted in the <code>TryUpdateModel</code>parameters. Currently there are no extra fields that you're protecting, but listing the fields that you want the model binder to bind ensures that if you add fields to the data model in the future, they're automatically protected until you explicitly add them here.</p>
<p>As a result of these changes, the method signature of the HttpPost Edit method is the same as the HttpGet edit method; therefore you've renamed the method EditPost.&nbsp;</p>
<div class="sidebar"><span></span>
<h3>Entity States and the Attach and SaveChanges Methods</h3>
<p>The database context keeps track of whether entities in memory are in sync with their corresponding rows in the database, and this information determines what happens when you call the <code>SaveChanges</code> method. For example, when you pass a new entity to the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbset.add(v=vs.103).aspx">Add</a> method, that entity's state is set to <code>Added</code>. Then when you call the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext.savechanges(v=VS.103).aspx">SaveChanges</a> method, the database context issues a SQL <code>INSERT</code> command.</p>
<p>An entity may be in one of the<a href="http://msdn.microsoft.com/en-us/library/system.data.entitystate.aspx"> following states</a>:</p>
<ul>
<li><code>Added</code>. The entity does not yet exist in the database. The <code>SaveChanges</code> method must issue an <code>INSERT</code> statement.</li>
<li><code>Unchanged</code>. Nothing needs to be done with this entity by the <code>SaveChanges</code> method. When you read an entity from the database, the entity starts out with this status.</li>
<li><code>Modified</code>. Some or all of the entity's property values have been modified. The <code>SaveChanges</code> method must issue an<code>UPDATE</code> statement.</li>
<li><code>Deleted</code>. The entity has been marked for deletion. The <code>SaveChanges</code> method must issue a <code>DELETE</code> statement.</li>
<li><code>Detached</code>. The entity isn't being tracked by the database context.</li>
</ul>
<p>In a desktop application, state changes are typically set automatically. In a desktop type of application, you read an entity and make changes to some of its property values. This causes its entity state to automatically be changed to <code>Modified</code>. Then when you call <code>SaveChanges</code>, the Entity Framework generates a SQL <code>UPDATE</code> statement that updates only the actual properties that you changed.</p>
<p>The disconnected nature of web apps doesn't allow for this continuous sequence. The <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext(v=VS.103).aspx">DbContext</a> that reads an entity is disposed after a page is rendered. When the <code>HttpPost</code> <code>Edit</code> action method is called,&nbsp; a new request is made and you have a new instance of the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext(v=VS.103).aspx">DbContext</a>, so you have to manually set the entity state to <code>Modified.</code> Then when you call <code>SaveChanges</code>, the Entity Framework updates all columns of the database row, because the context has no way to know which properties you changed.</p>
<p>If you want the SQL <code>Update</code> statement to update only the fields that the user actually changed, you can save the original values in some way (such as hidden fields) so that they are available when the <code>HttpPost</code> <code>Edit</code> method is called. Then you can create a<code>Student</code> entity using the original values, call the <code>Attach</code> method with that original version of the entity, update the entity's values to the new values, and then call <code>SaveChanges.</code> For more information, see <a href="http://msdn.microsoft.com/en-us/data/jj592676">Entity states and SaveChanges</a> and <a href="http://msdn.microsoft.com/en-us/data/jj592872">Local Data</a>in the MSDN Data Developer Center.</p>
</div>
<p>The HTML and Razor code in <em>Views\Student\Edit.cshtml</em> is similar to what you saw in <em>Create.cshtml</em>, and no changes are required.</p>
<p>Run the page by selecting the <strong>Students</strong> tab and then clicking an <strong>Edit</strong> hyperlink.</p>
<p><img src="http://media-www-asp.azureedge.net/media/4481879/studentedit.png" data-original="//media-www-asp.azureedge.net/media/4481879/studentedit.png" alt="Student_Edit_page" border="0" /></p>
<p>Change some of the data and click <strong>Save</strong>. You see the changed data in the Index page.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48044/studentedited.png" data-original="//media-www-asp.azureedge.net/media/48044/studentedited.png" alt="Students_Index_page_after_edit" border="0" /></p>
<h2>Updating the Delete Page</h2>
<p>In <em>Controllers\StudentController.cs</em>, the template code for the <code>HttpGet</code> <code>Delete</code> method uses the <code>Find</code> method to retrieve the selected <code>Student</code>entity, as you saw in the <code>Details</code> and <code>Edit</code> methods. However, to implement a custom error message when the call to <code>SaveChanges</code> fails, you'll add some functionality to this method and its corresponding view.</p>
<p>As you saw for update and create operations, delete operations require two action methods. The method that is called in response to a GET request displays a view that gives the user a chance to approve or cancel the delete operation. If the user approves it, a POST request is created. When that happens, the <code>HttpPost</code> <code>Delete</code> method is called and then that method actually performs the delete operation.</p>
<p>You'll add a <code>try-catch</code> block to the <code>HttpPost</code> <code>Delete</code> method to handle any errors that might occur when the database is updated. If an error occurs, the <code>HttpPost</code> <code>Delete</code> method calls the <code>HttpGet</code> <code>Delete</code> method, passing it a parameter that indicates that an error has occurred. The<code>HttpGet Delete</code> method then redisplays the confirmation page along with the error message, giving the user an opportunity to cancel or try again.</p>
<ol>
<li>Replace the <code>HttpGet</code> <code>Delete</code> action method with the following code, which manages error reporting:
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Delete</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">,</span><span class="pln"> </span><mark><span class="kwd">bool</span><span class="pun">?</span><span class="pln"> saveChangesError</span><span class="pun">=</span><span class="kwd">false</span></mark><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><mark><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">saveChangesError</span><span class="pun">.</span><span class="typ">GetValueOrDefault</span><span class="pun">())</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">ErrorMessage</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Delete failed. Try again, and if the problem persists see your system administrator."</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></mark><span class="pln">
    </span><span class="typ">Student</span><span class="pln"> student </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">student </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">HttpNotFound</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">student</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code accepts an <a href="http://msdn.microsoft.com/en-us/library/dd264739.aspx">optional parameter</a> that indicates whether the method was called after a failure to save changes. This parameter is<code>false</code> when the <code>HttpGet</code> <code>Delete</code> method is called without a previous failure. When it is called by the <code>HttpPost</code> <code>Delete</code> method in response to a database update error, the parameter is <code>true</code> and an error message is passed to the view.</p>
</li>
<li>
<p>Replace the <code>HttpPost</code> <code>Delete</code> action method (named <code>DeleteConfirmed</code>) with the following code, which performs the actual delete operation and catches any database update errors.</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Delete</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">try</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Student</span><span class="pln"> student </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
        db</span><span class="pun">.</span><span class="typ">Students</span><span class="pun">.</span><span class="typ">Remove</span><span class="pun">(</span><span class="pln">student</span><span class="pun">);</span><span class="pln">
        db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">DataException</span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Delete"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> id </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">,</span><span class="pln"> saveChangesError </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">});</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code retrieves the selected entity, then calls the <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbset.remove(v=vs.103).aspx">Remove</a> method to set the entity's status to <code>Deleted</code>. When <code>SaveChanges</code> is called, a SQL <code>DELETE</code> command is generated.&nbsp;You have also changed the action method name from <code>DeleteConfirmed </code>to <code>Delete</code>. The scaffolded code named the <code>HttpPost</code> <code>Delete</code> method <code>DeleteConfirmed</code> to give the <code>HttpPost</code>&nbsp; method a unique signature. ( The CLR requires overloaded methods to have different method parameters.) Now that the signatures are unique, you can stick with the MVC convention and use the same name for the <code>HttpPost</code> and <code>HttpGet</code> delete methods.</p>
<p>If improving performance in a high-volume application is a priority, you could avoid an unnecessary SQL query to retrieve the row by replacing the lines of code that call the <code>Find</code> and <code>Remove</code> methods with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="typ">Student</span><span class="pln"> studentToDelete </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Student</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> ID </span><span class="pun">=</span><span class="pln"> id </span><span class="pun">};</span><span class="pln">
db</span><span class="pun">.</span><span class="typ">Entry</span><span class="pun">(</span><span class="pln">studentToDelete</span><span class="pun">).</span><span class="typ">State</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">EntityState</span><span class="pun">.</span><span class="typ">Deleted</span><span class="pun">;</span></pre>
<p>This code instantiates a <code>Student</code> entity using only the primary key value and then sets the entity state to <code>Deleted</code>. That's all that the Entity Framework needs in order to delete the entity.</p>
<p>As noted, the <code>HttpGet</code> <code>Delete</code> method doesn't delete the data. Performing a delete operation in response to a GET request (or for that matter, performing any edit operation, create operation, or any other operation that changes data) creates a security risk. For more information, see <a href="http://stephenwalther.com/blog/archive/2009/01/21/asp.net-mvc-tip-46-ndash-donrsquot-use-delete-links-because.aspx">ASP.NET MVC Tip #46 &mdash; Don't use Delete Links because they create Security Holes</a> on Stephen Walther's blog.</p>
</li>
<li>
<p>In <em>Views\Student\Delete.cshtml</em>, add an error message between the <code>h2</code> heading and the <code>h3</code> heading, as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;h2&gt;</span><span class="pln">Delete</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
</span><mark><span class="tag">&lt;p</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"error"</span><span class="tag">&gt;</span><span class="pln">@ViewBag.ErrorMessage</span><span class="tag">&lt;/p&gt;</span></mark><span class="pln">
</span><span class="tag">&lt;h3&gt;</span><span class="pln">Are you sure you want to delete this?</span><span class="tag">&lt;/h3&gt;</span></pre>
<p>Run the page by selecting the <strong>Students</strong> tab and clicking a <strong>Delete</strong> hyperlink:</p>
<p><img src="http://media-www-asp.azureedge.net/media/48041/studentdelete.png" data-original="//media-www-asp.azureedge.net/media/48041/studentdelete.png" alt="Student_Delete_page" border="0" /></p>
</li>
<li>
<p>Click <strong>Delete</strong>. The Index page is displayed without the deleted student. (You'll see an example of the error handling code in action in the<a href="http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/handling-concurrency-with-the-entity-framework-in-an-asp-net-mvc-application">concurrency tutorial</a>.)</p>
</li>
</ol>
<h2>Closing Database Connections</h2>
<p>To close database connections and free up the resources they hold as soon as possible, dispose the context instance when you are done with it. That is why the scaffolded code provides a <a href="http://msdn.microsoft.com/en-us/library/system.idisposable.dispose(v=vs.110).aspx">Dispose</a> method at the end of the <code>StudentController</code> class in <em>StudentController.cs</em>, as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Dispose</span><span class="pun">(</span><span class="kwd">bool</span><span class="pln"> disposing</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    db</span><span class="pun">.</span><span class="typ">Dispose</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">Dispose</span><span class="pun">(</span><span class="pln">disposing</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The base <code>Controller</code> class already implements the <code>IDisposable</code> interface, so this code simply adds an override to the <code>Dispose(bool)</code>method to explicitly dispose the context instance.</p>
<h2 id="transactions">Handling Transactions</h2>
<p>By default the Entity Framework implicitly implements transactions. In scenarios where you make changes to multiple rows or tables and then call <code>SaveChanges</code>, the Entity Framework automatically makes sure that either all of your changes succeed or all fail. If some changes are done first and then an error happens, those changes are automatically rolled back. For scenarios where you need more control -- for example, if you want to include operations done outside of Entity Framework in a transaction -- see <a href="http://msdn.microsoft.com/en-US/data/dn456843">Working with Transactions</a> on MSDN.</p>
<h2>Summary</h2>
<p>You now have a complete set of pages that perform simple CRUD operations for <code>Student</code> entities. You used MVC helpers to generate UI elements for data fields. For more information about MVC helpers, see <a href="http://msdn.microsoft.com/en-us/library/dd410596(v=VS.98).aspx">Rendering a Form Using HTML Helpers</a> (the page is for MVC 3 but is still relevant for MVC 5).</p>
</body>
</html>
***********************************
Filename: Reading Related Data.html
***********************************
<!DOCTYPE html>
<html>
<head>
</head>
<body style="font-family: arial, helvetica, sans-serif;font-size: 12px;">
<div class="important important-box-article">
<p>In the previous tutorial you completed the School data model. In this tutorial you'll read and display related data &mdash; that is, data that the Entity Framework loads into navigation properties.</p>
</div>
<p>The following illustrations show the pages that you'll work with.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48004/coursesindex.png" data-original="//media-www-asp.azureedge.net/media/48004/coursesindex.png" /><span></span></p>
<p><img src="http://media-www-asp.azureedge.net/media/49054/ics.png" data-original="//media-www-asp.azureedge.net/media/49054/ics.png" alt="Instructors_index_page_with_instructor_and_course_selected" height="1207" width="635" /></p>
<h2>Lazy, Eager, and Explicit Loading of Related Data</h2>
<p>There are several ways that the Entity Framework can load related data into the navigation properties of an entity:</p>
<ul>
<li><em>Lazy loading</em>. When the entity is first read, related data isn't retrieved. However, the first time you attempt to access a navigation property, the data required for that navigation property is automatically retrieved. This results in multiple queries sent to the database &mdash; one for the entity itself and one each time that related data for the entity must be retrieved. The <code>DbContext</code> class enables lazy loading by default.&nbsp;
<p><img src="http://asp.net/media/2577850/Windows-Live-Writer_Reading-Re.NET-MVC-Application-5-of-10h1_ADC3_Lazy_loading_example_2c44eabb-5fd3-485a-837d-8e3d053f2c0c.png" data-original="http://asp.net/media/2577850/Windows-Live-Writer_Reading-Re.NET-MVC-Application-5-of-10h1_ADC3_Lazy_loading_example_2c44eabb-5fd3-485a-837d-8e3d053f2c0c.png" alt="Lazy_loading_example" border="0" /></p>
</li>
<li>
<p><em>Eager loading</em>. When the entity is read, related data is retrieved along with it. This typically results in a single join query that retrieves all of the data that's needed. You specify eager loading by using the <code>Include</code> method.</p>
<p><img src="http://asp.net/media/2577856/Windows-Live-Writer_Reading-Re.NET-MVC-Application-5-of-10h1_ADC3_Eager_loading_example_33f907ff-f0b0-4057-8e75-05a8cacac807.png" data-original="http://asp.net/media/2577856/Windows-Live-Writer_Reading-Re.NET-MVC-Application-5-of-10h1_ADC3_Eager_loading_example_33f907ff-f0b0-4057-8e75-05a8cacac807.png" alt="Eager_loading_example" border="0" /></p>
</li>
<li>
<p><em>Explicit loading</em>. This is similar to lazy loading, except that you explicitly retrieve the related data in code; it doesn't happen automatically when you access a navigation property. You load related data manually by getting the object state manager entry for an entity and calling the <a href="http://msdn.microsoft.com/en-us/library/gg696220(v=vs.103).aspx">Collection.Load</a> method for collections or the <a href="http://msdn.microsoft.com/en-us/library/gg679166(v=vs.103).aspx">Reference.Load</a> method for properties that hold a single entity. (In the following example, if you wanted to load the Administrator navigation property, you'd replace <code>Collection(x =&gt; x.Courses)</code> with <code>Reference(x =&gt; x.Administrator)</code>.)&nbsp; Typically you'd use explicit loading only when you've turned lazy loading off.</p>
<p><img src="http://asp.net/media/2577862/Windows-Live-Writer_Reading-Re.NET-MVC-Application-5-of-10h1_ADC3_Explicit_loading_example_79d8c368-6d82-426f-be9a-2b443644ab15.png" data-original="http://asp.net/media/2577862/Windows-Live-Writer_Reading-Re.NET-MVC-Application-5-of-10h1_ADC3_Explicit_loading_example_79d8c368-6d82-426f-be9a-2b443644ab15.png" alt="Explicit_loading_example" border="0" /></p>
</li>
</ul>
<p>Because they don't immediately retrieve the property values, lazy loading and explicit loading are also both known as <em>deferred loading</em>.</p>
<h3>Performance considerations</h3>
<p>If you know you need related data for every entity retrieved, eager loading often offers the best performance, because a single query sent to the database is typically more efficient than separate queries for each entity retrieved. For example, in the above examples, suppose that each department has ten related courses. The eager loading example would result in just a single (join) query and a single round trip to the database. The lazy loading and explicit loading examples would both result in eleven queries and eleven round trips to the database. The extra round trips to the database are especially detrimental to performance when latency is high.</p>
<p>On the other hand, in some scenarios lazy loading is more efficient. Eager loading might cause a very complex join to be generated, which SQL Server can't process efficiently. Or if you need to access an entity's navigation properties only for a subset of a set of the entities you're processing, lazy loading might perform better because eager loading would retrieve more data than you need. If performance is critical, it's best to test performance both ways in order to make the best choice.</p>
<p>Lazy loading can mask code that causes performance problems. For example, code that doesn't specify eager or explicit loading but processes a high volume of entities and uses several navigation properties in each iteration might be very inefficient (because of many round trips to the database). An application that performs well in development using an on premise SQL server might have performance problems when moved to Azure SQL Database due to the increased latency and lazy loading. Profiling the database queries with a realistic test load will help you determine if lazy loading is appropriate. For more information see <a href="http://msdn.microsoft.com/en-us/magazine/hh205756.aspx">Demystifying Entity Framework Strategies: Loading Related Data</a> and <a href="http://msdn.microsoft.com/en-us/magazine/gg309181.aspx">Using the Entity Framework to Reduce Network Latency to SQL Azure</a>.</p>
<h3>Disable lazy loading before serialization</h3>
<p>If you leave lazy loading enabled during serialization, you can end up querying significantly more data than you intended. Serialization generally works by accessing each property on an instance of a type. Property access triggers lazy loading, and those lazy loaded entities are serialized. The serialization process then accesses each property of the lazy-loaded entities, potentially causing even more lazy loading and serialization. To prevent this run-away chain reaction, turn lazy loading off before you serialize an entity.</p>
<p>Serialization can also be complicated by the proxy classes that the Entity Framework uses, as explained in the <a href="http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#proxies">Advanced Scenarios tutorial</a>.</p>
<p>One way to avoid serialization problems is to serialize data transfer objects (DTOs) instead of entity objects, as shown in the <a href="http://www.asp.net/web-api/overview/creating-web-apis/using-web-api-with-entity-framework/part-5">Using Web API with Entity Framework</a> tutorial.</p>
<p>If you don't use DTOs, you can disable lazy loading and avoid proxy issues by <a href="http://msdn.microsoft.com/en-US/data/jj592886.aspx">disabling proxy creation</a>.</p>
<p>Here are some other <a href="http://msdn.microsoft.com/en-US/data/jj574232">ways to disable lazy loading</a>:</p>
<ul>
<li>For specific navigation properties, omit the <code>virtual</code> keyword when you declare the property.</li>
<li>For all navigation properties, set <code>LazyLoadingEnabled</code> to <code>false</code>, put the following code in the constructor of your context class:
<pre class="prettyprint prettyprinted"><span class="kwd">this</span><span class="pun">.</span><span class="typ">Configuration</span><span class="pun">.</span><span class="typ">LazyLoadingEnabled</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></pre>
</li>
</ul>
<h2>Create a Courses Page That Displays Department Name</h2>
<p>The <code>Course</code> entity includes a navigation property that contains the <code>Department</code> entity of the department that the course is assigned to. To display the name of the assigned department in a list of courses, you need to get the <code>Name</code> property from the <code>Department</code> entity that is in the<code>Course.Department</code> navigation property.</p>
<p>Create a controller named <code>CourseController</code> (not CoursesController) for the <code>Course</code> entity type, using the same options for the <strong>MVC 5 Controller with views, using Entity Framework</strong> scaffolder that you did earlier for the <code>Student</code> controller, as shown in the following illustration:</p>
<p><img src="http://media-www-asp.azureedge.net/media/48001/coursecontroller.png" data-original="//media-www-asp.azureedge.net/media/48001/coursecontroller.png" alt="Add_Controller_dialog_box_for_Course_controller" border="0" /></p>
<p>Open <em>Controllers\CourseController.cs</em> and look at the <code>Index</code> method:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> courses </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Department</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">courses</span><span class="pun">.</span><span class="typ">ToList</span><span class="pun">());</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The automatic scaffolding has specified eager loading for the <code>Department</code> navigation property by using the <code>Include</code> method.</p>
<p>Open <em>Views\Course\Index.cshtml</em> and replace the template code with the following code. The changes are highlighted:</p>
<pre class="prettyprint prettyprinted"><span class="pln">@model IEnumerable</span><span class="tag">&lt;ContosoUniversity.Models.Course&gt;</span><span class="pln">

@{
    ViewBag.Title = "</span><mark><span class="pln">Courses</span></mark><span class="pln">";
}

</span><span class="tag">&lt;h2&gt;</span><mark><span class="pln">Courses</span></mark><span class="tag">&lt;/h2&gt;</span><span class="pln">

</span><span class="tag">&lt;p&gt;</span><span class="pln">
    @Html.ActionLink("Create New", "Create")
</span><span class="tag">&lt;/p&gt;</span><span class="pln">
</span><span class="tag">&lt;table</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"table"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><mark><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.DisplayNameFor(model =&gt; model.CourseID)
        </span><span class="tag">&lt;/th&gt;</span></mark><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.DisplayNameFor(model =&gt; model.Title)
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.DisplayNameFor(model =&gt; model.Credits)
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><mark><span class="tag">&lt;th&gt;</span><span class="pln">
            Department
        </span><span class="tag">&lt;/th&gt;</span></mark><span class="pln">
        </span><span class="tag">&lt;th&gt;&lt;/th&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">

@foreach (var item in Model) {
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><mark><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.CourseID)
        </span><span class="tag">&lt;/td&gt;</span></mark><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.Title)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.Credits)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><mark><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.Department.Name)
        </span><span class="tag">&lt;/td&gt;</span></mark><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.ActionLink("Edit", "Edit", new { id=item.CourseID }) |
            @Html.ActionLink("Details", "Details", new { id=item.CourseID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.CourseID })
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
}

</span><span class="tag">&lt;/table&gt;</span></pre>
<p>You've made the following changes to the scaffolded code:</p>
<ul>
<li>Changed the heading from <strong>Index</strong> to <strong>Courses</strong>.</li>
<li>Added a <strong>Number</strong> column that shows the <code>CourseID</code> property value. By default, primary keys aren't scaffolded because normally they are meaningless to end users. However, in this case the primary key is meaningful and you want to show it.</li>
<li>Moved the <strong>Department</strong> column to the right side and changed its heading. The scaffolder correctly chose to display the <code>Name</code> property from the <code>Department</code> entity, but here in the Course page the column heading should be <strong>Department</strong> rather than <strong>Name</strong>.</li>
</ul>
<p>Notice that for the Department column, the scaffolded code displays the <code>Name</code> property of the <code>Department</code> entity that's loaded into the<code>Department</code> navigation property:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;td&gt;</span><span class="pln">
    @Html.DisplayFor(modelItem =&gt; item.Department</span><mark><span class="pln">.Name</span></mark><span class="pln">)
</span><span class="tag">&lt;/td&gt;</span></pre>
<p>Run the page (select the <strong>Courses</strong> tab on the Contoso University home page) to see the list with department names.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48004/coursesindex.png" data-original="//media-www-asp.azureedge.net/media/48004/coursesindex.png" alt="Courses_index_page_with_department_names" border="0" /></p>
<h2>Create an Instructors Page That Shows Courses and Enrollments</h2>
<p>In this section you'll create a controller and view for the <code>Instructor</code> entity in order to display the Instructors page:</p>
<p><img src="http://media-www-asp.azureedge.net/media/49054/ics.png" data-original="//media-www-asp.azureedge.net/media/49054/ics.png" alt="Instructors_index_page_with_instructor_and_course_selected" height="1207" width="635" /><span></span></p>
<p>This page reads and displays related data in the following ways:</p>
<ul>
<li>The list of instructors displays related data from the <code>OfficeAssignment</code> entity. The <code>Instructor</code> and <code>OfficeAssignment</code> entities are in a one-to-zero-or-one relationship. You'll use eager loading for the <code>OfficeAssignment</code> entities. As explained earlier, eager loading is typically more efficient when you need the related data for all retrieved rows of the primary table. In this case, you want to display office assignments for all displayed instructors.</li>
<li>When the user selects an instructor, related <code>Course</code> entities are displayed. The <code>Instructor</code> and <code>Course</code> entities are in a many-to-many relationship. You'll use eager loading for the <code>Course</code> entities and their related <code>Department</code> entities. In this case, lazy loading might be more efficient because you need courses only for the selected instructor. However, this example shows how to use eager loading for navigation properties within entities that are themselves in navigation properties.</li>
<li>When the user selects a course, related data from the <code>Enrollments</code> entity set is displayed. The <code>Course</code> and <code>Enrollment</code> entities are in a one-to-many relationship. You'll add explicit loading for <code>Enrollment</code> entities and their related <code>Student</code> entities. (Explicit loading isn't necessary because lazy loading is enabled, but this shows how to do explicit loading.)</li>
</ul>
<h3>Create a View Model for the Instructor Index View</h3>
<p>The Instructors page shows three different tables. Therefore, you'll create a view model that includes three properties, each holding the data for one of the tables.</p>
<p>In the <em>ViewModels</em> folder, create <em>InstructorIndexData.cs</em> and replace the existing code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Collections</span><span class="pun">.</span><span class="typ">Generic</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">Models</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">ViewModels</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">InstructorIndexData</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">IEnumerable</span><span class="pun">&lt;</span><span class="typ">Instructor</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">IEnumerable</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">IEnumerable</span><span class="pun">&lt;</span><span class="typ">Enrollment</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<h3>Create the Instructor Controller and Views</h3>
<p>Create an <code>InstructorController</code> (not InstructorsController) controller with EF read/write actions as shown in the following illustration:</p>
<p><img src="http://media-www-asp.azureedge.net/media/48017/instructorcontroller.png" data-original="//media-www-asp.azureedge.net/media/48017/instructorcontroller.png" alt="Add_Controller_dialog_box_for_Instructor_controller" border="0" /></p>
<p>Open <em>Controllers\InstructorController.cs</em> and add a <code>using</code> statement for the <code>ViewModels</code> namespace:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">ViewModels</span><span class="pun">;</span></pre>
<p>The scaffolded code in the <code>Index</code> method specifies eager loading only for the <code>OfficeAssignment</code> navigation property:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> instructors </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">instructors</span><span class="pun">.</span><span class="typ">ToList</span><span class="pun">());</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>Replace the <code>Index</code> method with the following code to load additional related data and put it in the view model:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> courseID</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> viewModel </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">InstructorIndexData</span><span class="pun">();</span><span class="pln">
    viewModel</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Department</span><span class="pun">))</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">;</span><span class="pln">
        viewModel</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> viewModel</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">
            i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">().</span><span class="typ">Courses</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">courseID </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courseID</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">;</span><span class="pln">
        viewModel</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> viewModel</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">
            x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> courseID</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">().</span><span class="typ">Enrollments</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">viewModel</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The method accepts optional route data (<code>id</code>)&nbsp; and a query string parameter (<code>courseID</code>) that provide the ID values of the selected instructor and selected course, and passes all of the required data to the view. The parameters are provided by the <strong>Select</strong> hyperlinks on the page.</p>
<p>The code begins by creating an instance of the view model and putting in it the list of instructors. The code specifies eager loading for the<code>Instructor.OfficeAssignment</code> and the <code>Instructor.Courses</code> navigation property.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">var</span><span class="pln"> viewModel </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">InstructorIndexData</span><span class="pun">();</span><span class="pln">
viewModel</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln">
    </span><mark><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">)</span></mark><span class="pln">
    </span><mark><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Department</span><span class="pun">))</span></mark><span class="pln">
     </span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span></pre>
<p>The second <code>Include</code> method loads Courses, and for each Course that is loaded it does eager loading for the <code>Course.Department</code> navigation property.</p>
<pre class="prettyprint prettyprinted"><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Department</span><span class="pun">))</span></pre>
<p>As mentioned previously, eager loading is not required but is done to improve performance. Since the view always requires the<code>OfficeAssignment</code> entity, it's more efficient to fetch that in the same query. <code>Course</code> entities are required when an instructor is selected in the web page, so eager loading is better than lazy loading only if the page is displayed more often with a course selected than without.</p>
<p>If an instructor ID was selected, the selected instructor is retrieved from the list of instructors in the view model. The view model's <code>Courses</code>property is then loaded with the <code>Course</code> entities from that instructor's <code>Courses</code> navigation property.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">;</span><span class="pln">
    viewModel</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> viewModel</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">().</span><span class="typ">Courses</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <code>Where</code> method returns a collection, but in this case the criteria passed to that method result in only a single <code>Instructor</code> entity being returned. The <code>Single</code> method converts the collection into a single <code>Instructor</code> entity, which gives you access to that entity's <code>Courses</code>property.</p>
<p>You use the <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.single.aspx">Single</a> method on a collection when you know the collection will have only one item. The <code>Single</code> method throws an exception if the collection passed to it is empty or if there's more than one item. An alternative is <a href="http://msdn.microsoft.com/en-us/library/bb342451.aspx">SingleOrDefault</a>, which returns a default value (<code>null </code>in this case) if the collection is empty. However, in this case that would still result in an exception (from trying to find a <code>Courses</code> property on a<code>null</code> reference), and the exception message would less clearly indicate the cause of the problem. When you call the <code>Single</code> method, you can also pass in the <code>Where</code> condition instead of calling the <code>Where</code> method separately:</p>
<pre class="prettyprint prettyprinted"><span class="pun">.</span><span class="typ">Single</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">)</span></pre>
<p>Instead of:</p>
<pre class="prettyprint prettyprinted"><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">I </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">()</span></pre>
<p>Next, if a course was selected, the selected course is retrieved from the list of courses in the view model. Then the view model's <code>Enrollments</code>property is loaded with the <code>Enrollment</code> entities from that course's <code>Enrollments</code> navigation property.</p>
<pre class="prettyprint prettyprinted"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">courseID </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courseID</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">;</span><span class="pln">
        viewModel</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> viewModel</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">
            x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> courseID</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">().</span><span class="typ">Enrollments</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></pre>
<h3>Modify the Instructor Index View</h3>
<p>In <em>Views\Instructor\Index.cshtml</em>, replace the template code with the following code. The changes are highlighted:</p>
<pre class="prettyprint prettyprinted"><mark><span class="pln">@model ContosoUniversity.ViewModels.InstructorIndexData</span></mark><span class="pln">

@{
    ViewBag.Title = "</span><mark><span class="pln">Instructors</span></mark><span class="pln">";
}

</span><span class="tag">&lt;h2&gt;</span><span class="pln">Instructors</span><span class="tag">&lt;/h2&gt;</span><span class="pln">

</span><span class="tag">&lt;p&gt;</span><span class="pln">
    @Html.ActionLink("Create New", "Create")
</span><span class="tag">&lt;/p&gt;</span><span class="pln">
</span><span class="tag">&lt;table</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"table"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><mark><span class="tag">&lt;th&gt;</span><span class="pln">Last Name</span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">First Name</span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">Hire Date</span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">Office</span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;&lt;/th&gt;</span></mark><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">

    </span><mark><span class="pln">@foreach (var item in Model.Instructors)</span></mark><span class="pln">
    {
        </span><mark><span class="pln">string selectedRow = "";
        if (item.ID == ViewBag.InstructorID)
        {
            selectedRow = "success";
        }
        </span><span class="tag">&lt;tr</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"@selectedRow"</span><span class="tag">&gt;</span></mark><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">
                @Html.DisplayFor(modelItem =&gt; item.LastName)
            </span><span class="tag">&lt;/td&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">
                @Html.DisplayFor(modelItem =&gt; item.FirstMidName)
            </span><span class="tag">&lt;/td&gt;</span><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">
                @Html.DisplayFor(modelItem =&gt; item.HireDate)
            </span><span class="tag">&lt;/td&gt;</span><span class="pln">
            </span><mark><span class="tag">&lt;td&gt;</span><span class="pln">
                @if (item.OfficeAssignment != null)
                {
                    @item.OfficeAssignment.Location
                }
            </span><span class="tag">&lt;/td&gt;</span></mark><span class="pln">
            </span><span class="tag">&lt;td&gt;</span><span class="pln">
                </span><mark><span class="pln">@Html.ActionLink("Select", "Index", new { id = item.ID }) |</span></mark><span class="pln">
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
    }

    </span><span class="tag">&lt;/table&gt;</span></pre>
<p>You've made the following changes to the existing code:</p>
<ul>
<li>Changed the model class to <code>InstructorIndexData</code>.</li>
<li>Changed the page title from <strong>Index</strong> to <strong>Instructors</strong>.</li>
<li>Added an <strong>Office</strong> column that displays <code>item.OfficeAssignment.Location</code> only if <code>item.OfficeAssignment</code> is not null. (Because this is a one-to-zero-or-one relationship, there might not be a related <code>OfficeAssignment</code> entity.)
<pre class="prettyprint prettyprinted"><span class="tag">&lt;td&gt;</span><span class="pln"> 
    @if (item.OfficeAssignment != null) 
    { 
        @item.OfficeAssignment.Location  
    } 
</span><span class="tag">&lt;/td&gt;</span><span class="pln"> </span></pre>
</li>
<li>Added code that will dynamically add <code>class="success"</code> to the <code>tr</code> element of the selected instructor. This sets a background color for the selected row using a <a href="http://www.asp.net/visual-studio/overview/2013/creating-web-projects-in-visual-studio#bootstrap">Bootstrap</a> class.
<pre class="prettyprint prettyprinted"><span class="kwd">string</span><span class="pln"> selectedRow </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln"> 
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">item</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pun">)</span><span class="pln"> 
</span><span class="pun">{</span><span class="pln"> 
    selectedRow </span><span class="pun">=</span><span class="pln"> </span><span class="str">"success"</span><span class="pun">;</span><span class="pln"> 
</span><span class="pun">}</span><span class="pln"> 
</span><span class="pun">&lt;</span><span class="pln">tr </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"@selectedRow"</span><span class="pln"> valign</span><span class="pun">=</span><span class="str">"top"</span><span class="pun">&gt;</span><span class="pln"> </span></pre>
</li>
<li>Added a new <code>ActionLink</code> labeled <strong>Select</strong> immediately before the other links in each row, which causes the selected instructor ID to be sent to the <code>Index</code> method.</li>
</ul>
<p>Run the application and select the <strong>Instructors</strong> tab. The page displays the <code>Location</code> property of related <code>OfficeAssignment</code> entities and an empty table cell when there's no related <code>OfficeAssignment</code> entity.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48022/instructorsindex.png" data-original="//media-www-asp.azureedge.net/media/48022/instructorsindex.png" alt="Instructors_index_page_with_nothing_selected" border="0" /></p>
<p>In the <em>Views\Instructor\Index.cshtml</em> file, after the closing <code>table</code> element (at the end of the file), add the following code. This code displays a list of courses related to an instructor when an instructor is selected.</p>
<pre class="prettyprint prettyprinted"><span class="pln">@if (Model.Courses != null)
{
    </span><span class="tag">&lt;h3&gt;</span><span class="pln">Courses Taught by Selected Instructor</span><span class="tag">&lt;/h3&gt;</span><span class="pln">
    </span><span class="tag">&lt;table</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"table"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;tr&gt;</span><span class="pln">
            </span><span class="tag">&lt;th&gt;&lt;/th&gt;</span><span class="pln">
            </span><span class="tag">&lt;th&gt;</span><span class="pln">Number</span><span class="tag">&lt;/th&gt;</span><span class="pln">
            </span><span class="tag">&lt;th&gt;</span><span class="pln">Title</span><span class="tag">&lt;/th&gt;</span><span class="pln">
            </span><span class="tag">&lt;th&gt;</span><span class="pln">Department</span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;/tr&gt;</span><span class="pln">

        @foreach (var item in Model.Courses)
        {
            string selectedRow = "";
            if (item.CourseID == ViewBag.CourseID)
            {
                selectedRow = "success";
            }
            </span><span class="tag">&lt;tr</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"@selectedRow"</span><span class="tag">&gt;</span><span class="pln">
                </span><span class="tag">&lt;td&gt;</span><span class="pln">
                    @Html.ActionLink("Select", "Index", new { courseID = item.CourseID })
                </span><span class="tag">&lt;/td&gt;</span><span class="pln">
                </span><span class="tag">&lt;td&gt;</span><span class="pln">
                    @item.CourseID
                </span><span class="tag">&lt;/td&gt;</span><span class="pln">
                </span><span class="tag">&lt;td&gt;</span><span class="pln">
                    @item.Title
                </span><span class="tag">&lt;/td&gt;</span><span class="pln">
                </span><span class="tag">&lt;td&gt;</span><span class="pln">
                    @item.Department.Name
                </span><span class="tag">&lt;/td&gt;</span><span class="pln">
            </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
        }

    </span><span class="tag">&lt;/table&gt;</span><span class="pln">
}</span></pre>
<p>This code reads the <code>Courses</code> property of the view model to display a list of courses. It also provides a <code>Select</code> hyperlink that sends the ID of the selected course to the <code>Index</code> action method.</p>
<p>Run the page and select an instructor. Now you see a grid that displays courses assigned to the selected instructor, and for each course you see the name of the assigned department.</p>
<p><img src="http://media-www-asp.azureedge.net/media/49053/ic.png" data-original="//media-www-asp.azureedge.net/media/49053/ic.png" alt="Instructors_index_page_with_instructor_selected" border="0" height="1003" width="635" /></p>
<p>After the code block you just added, add the following code. This displays a list of the students who are enrolled in a course when that course is selected.</p>
<pre class="prettyprint prettyprinted"><span class="pln">@if (Model.Enrollments != null)
{
    </span><span class="tag">&lt;h3&gt;</span><span class="pln">
        Students Enrolled in Selected Course
    </span><span class="tag">&lt;/h3&gt;</span><span class="pln">
    </span><span class="tag">&lt;table</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"table"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;tr&gt;</span><span class="pln">
            </span><span class="tag">&lt;th&gt;</span><span class="pln">Name</span><span class="tag">&lt;/th&gt;</span><span class="pln">
            </span><span class="tag">&lt;th&gt;</span><span class="pln">Grade</span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
        @foreach (var item in Model.Enrollments)
        {
            </span><span class="tag">&lt;tr&gt;</span><span class="pln">
                </span><span class="tag">&lt;td&gt;</span><span class="pln">
                    @item.Student.FullName
                </span><span class="tag">&lt;/td&gt;</span><span class="pln">
                </span><span class="tag">&lt;td&gt;</span><span class="pln">
                    @Html.DisplayFor(modelItem =&gt; item.Grade)
                </span><span class="tag">&lt;/td&gt;</span><span class="pln">
            </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
        }
    </span><span class="tag">&lt;/table&gt;</span><span class="pln">
}</span></pre>
<p>This code reads the <code>Enrollments</code> property of the view model in order to display a list of students enrolled in the course.</p>
<p>Run the page and select an instructor. Then select a course to see the list of enrolled students and their grades.</p>
<p><img src="http://media-www-asp.azureedge.net/media/49054/ics.png" data-original="//media-www-asp.azureedge.net/media/49054/ics.png" alt="Instructors_index_page_with_instructor_and_course_selected" height="1207" width="635" /></p>
<h3>Adding Explicit Loading</h3>
<p>Open <em>InstructorController.cs</em> and look at how the <code>Index</code> method gets the list of enrollments for a selected course:</p>
<pre class="prettyprint prettyprinted"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">courseID </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courseID</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">;</span><span class="pln">
        viewModel</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> viewModel</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">
            x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> courseID</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">().</span><span class="typ">Enrollments</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></pre>
<p>When you retrieved the list of instructors, you specified eager loading for the <code>Courses</code> navigation property and for the <code>Department</code> property of each course. Then you put the <code>Courses</code> collection in the view model, and now you're accessing the <code>Enrollments</code> navigation property from one entity in that collection. Because you didn't specify eager loading for the <code>Course.Enrollments</code> navigation property, the data from that property is appearing in the page as a result of lazy loading.</p>
<p>If you disabled lazy loading without changing the code in any other way, the <code>Enrollments</code> property would be null regardless of how many enrollments the course actually had. In that case, to load the <code>Enrollments</code> property, you'd have to specify either eager loading or explicit loading. You've already seen how to do eager loading. In order to see an example of explicit loading, replace the <code>Index</code> method with the following code, which explicitly loads the <code>Enrollments</code> property. The code changed are highlighted.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> courseID</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> viewModel </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">InstructorIndexData</span><span class="pun">();</span><span class="pln">

    viewModel</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">Department</span><span class="pun">))</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">;</span><span class="pln">
        viewModel</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> viewModel</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">
            i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">().</span><span class="typ">Courses</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">courseID </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> courseID</span><span class="pun">.</span><span class="typ">Value</span><span class="pun">;</span><span class="pln">
        </span><mark><span class="com">// Lazy loading</span><span class="pln">
        </span><span class="com">//viewModel.Enrollments = viewModel.Courses.Where(</span><span class="pln">
        </span><span class="com">//    x =&gt; x.CourseID == courseID).Single().Enrollments;</span><span class="pln">
        </span><span class="com">// Explicit loading</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> selectedCourse </span><span class="pun">=</span><span class="pln"> viewModel</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> courseID</span><span class="pun">).</span><span class="typ">Single</span><span class="pun">();</span><span class="pln">
        db</span><span class="pun">.</span><span class="typ">Entry</span><span class="pun">(</span><span class="pln">selectedCourse</span><span class="pun">).</span><span class="typ">Collection</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">).</span><span class="typ">Load</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Enrollment</span><span class="pln"> enrollment </span><span class="kwd">in</span><span class="pln"> selectedCourse</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            db</span><span class="pun">.</span><span class="typ">Entry</span><span class="pun">(</span><span class="pln">enrollment</span><span class="pun">).</span><span class="typ">Reference</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">Student</span><span class="pun">).</span><span class="typ">Load</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        viewModel</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> selectedCourse</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">;</span></mark><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">viewModel</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>After getting the selected <code>Course</code> entity, the new code explicitly loads that course's <code>Enrollments</code> navigation property:</p>
<pre class="prettyprint prettyprinted"><span class="pln">db</span><span class="pun">.</span><span class="typ">Entry</span><span class="pun">(</span><span class="pln">selectedCourse</span><span class="pun">).</span><span class="typ">Collection</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">Enrollments</span><span class="pun">).</span><span class="typ">Load</span><span class="pun">();</span></pre>
<p>Then it explicitly loads each <code>Enrollment</code> entity's related <code>Student</code> entity:</p>
<pre class="prettyprint prettyprinted"><span class="pln">db</span><span class="pun">.</span><span class="typ">Entry</span><span class="pun">(</span><span class="pln">enrollment</span><span class="pun">).</span><span class="typ">Reference</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">Student</span><span class="pun">).</span><span class="typ">Load</span><span class="pun">();</span></pre>
<p>Notice that you use the <code>Collection</code> method to load a collection property, but for a property that holds just one entity, you use the<code>Reference</code> method.</p>
<p>Run the Instructor Index page now and you'll see no difference in what's displayed on the page, although you've changed how the data is retrieved.</p>
<h2>Summary</h2>
<p>You've now used all three ways (lazy, eager, and explicit) to load related data into navigation properties. In the next tutorial you'll learn how to update related data.</p>
</body>
</html>
***********************************
Filename: Sorting, Filtering, and Paging with the Entity Framework in an ASP.NET MVC Application - C# Edition.html
***********************************
<!DOCTYPE html>
<html>
<head>
</head>
<body style="font-family: arial, helvetica, sans-serif;font-size: 12px;">
<div class="important important-box-article">
<p>In the previous tutorial you implemented a set of web pages for basic CRUD operations for <code>Student</code> entities. In this tutorial you'll add sorting, filtering, and paging functionality to the <strong>Students</strong> Index page. You'll also create a page that does simple grouping.</p>
</div>
<p>The following illustration shows what the page will look like when you're done. The column headings are links that the user can click to sort by that column. Clicking a column heading repeatedly toggles between ascending and descending sort order.</p>
<p><img alt="Students_Index_page_with_paging" border="0" src="http://media-www-asp.azureedge.net/media/4472724/studentpaging.png" data-original="//media-www-asp.azureedge.net/media/4472724/studentpaging.png" /></p>
<h2>Add Column Sort Links to the Students Index Page</h2>
<p>To add sorting to the Student Index page, you'll change the <code>Index</code> method of the <code>Student</code> controller and add code to the <code>Student</code> Index view.</p>
<h3>Add Sorting Functionality to the Index Method</h3>
<p>In <em>Controllers\StudentController.cs</em>, replace the <code>Index</code> method with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> sortOrder</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">NameSortParm</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrEmpty</span><span class="pun">(</span><span class="pln">sortOrder</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">"name_desc"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">DateSortParm</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> sortOrder </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Date"</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">"date_desc"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Date"</span><span class="pun">;</span><span class="pln">
   </span><span class="kwd">var</span><span class="pln"> students </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> s </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Students</span><span class="pln">
                  </span><span class="kwd">select</span><span class="pln"> s</span><span class="pun">;</span><span class="pln">
   </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">sortOrder</span><span class="pun">)</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"name_desc"</span><span class="pun">:</span><span class="pln">
         students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderByDescending</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span><span class="pln">
         </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"Date"</span><span class="pun">:</span><span class="pln">
         students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">EnrollmentDate</span><span class="pun">);</span><span class="pln">
         </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"date_desc"</span><span class="pun">:</span><span class="pln">
         students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderByDescending</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">EnrollmentDate</span><span class="pun">);</span><span class="pln">
         </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">
         students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span><span class="pln">
         </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
   </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">students</span><span class="pun">.</span><span class="typ">ToList</span><span class="pun">());</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code receives a <code>sortOrder</code> parameter from the query string in the URL. The query string value is provided by ASP.NET MVC as a parameter to the action method. The parameter will be a string that's either "Name" or "Date", optionally followed by an underscore and the string "desc" to specify descending order. The default sort order is ascending.</p>
<p>The first time the Index page is requested, there's no query string. The students are displayed in ascending order by <code>LastName</code>, which is the default as established by the fall-through case in the <code>switch</code> statement. When the user clicks a column heading hyperlink, the appropriate<code>sortOrder</code> value is provided in the query string.</p>
<p>The two <code>ViewBag</code> variables are used so that the view can configure the column heading hyperlinks with the appropriate query string values:</p>
<pre class="prettyprint prettyprinted"><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">NameSortParm</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrEmpty</span><span class="pun">(</span><span class="pln">sortOrder</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">"name_desc"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">
</span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">DateSortParm</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> sortOrder </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Date"</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">"date_desc"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Date"</span><span class="pun">;</span></pre>
<p>These are ternary statements. The first one specifies that if the <code>sortOrder</code> parameter is null or empty, <code>ViewBag.NameSortParm</code> should be set to "name_desc"; otherwise, it should be set to an empty string. These two statements enable the view to set the column heading hyperlinks as follows:</p>
<table>
<tbody>
<tr bgcolor="lightgray">
<th>Current sort order</th>
<th>Last Name Hyperlink</th>
<th>Date Hyperlink</th>
</tr>
<tr>
<td bgcolor="lightgray" align="center">Last Name ascending</td>
<td align="center">descending</td>
<td align="center">ascending</td>
</tr>
<tr>
<td bgcolor="lightgray" align="center">Last Name descending</td>
<td align="center">ascending</td>
<td align="center">ascending</td>
</tr>
<tr>
<td bgcolor="lightgray" align="center">Date ascending</td>
<td align="center">ascending</td>
<td align="center">descending</td>
</tr>
<tr>
<td bgcolor="lightgray" align="center">Date descending</td>
<td align="center">ascending</td>
<td align="center">ascending</td>
</tr>
</tbody>
</table>
<p>The method uses <a href="http://msdn.microsoft.com/en-us/library/bb386964.aspx">LINQ to Entities</a> to specify the column to sort by. The code creates an <a href="http://msdn.microsoft.com/en-us/library/bb351562.aspx">IQueryable</a> variable before the <code>switch</code> statement, modifies it in the <code>switch</code> statement, and calls the <code>ToList</code> method after the <code>switch</code> statement. When you create and modify <code>IQueryable</code>variables, no query is sent to the database. The query is not executed until you convert the <code>IQueryable</code> object into a collection by calling a method such as <code>ToList</code>. Therefore, this code results in a single query that is not executed until the <code>return View</code> statement.</p>
<p>As an alternative to writing different LINQ statements for each sort order, you can dynamically create a LINQ statement. For information about dynamic LINQ, see <a href="http://go.microsoft.com/fwlink/?LinkID=323957">Dynamic LINQ</a>.</p>
<h3>Add Column Heading Hyperlinks to the Student Index View</h3>
<p>In <em>Views\Student\Index.cshtml</em>, replace the <code>&lt;tr&gt;</code> and <code>&lt;th&gt;</code> elements for the heading row with the highlighted code:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;p&gt;</span><span class="pln">
    @Html.ActionLink("Create New", "Create")
</span><span class="tag">&lt;/p&gt;</span><span class="pln">
</span><span class="tag">&lt;table&gt;</span><span class="pln">
</span><mark><span class="pln">    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.ActionLink("Last Name", "Index", new { sortOrder = ViewBag.NameSortParm })
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">First Name
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.ActionLink("Enrollment Date", "Index", new { sortOrder = ViewBag.DateSortParm })
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;&lt;/th&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span></mark><span class="pln">

@foreach (var item in Model) {</span></pre>
<p>This code uses the information in the <code>ViewBag</code> properties to set up hyperlinks with the appropriate query string values.</p>
<p>Run the page and click the <strong>Last Name</strong> and <strong>Enrollment Date</strong> column headings to verify that sorting works.</p>
<p><img alt="Students_Index_page_with_sort_hyperlinks" border="0" src="http://media-www-asp.azureedge.net/media/48048/studentsort.png" data-original="//media-www-asp.azureedge.net/media/48048/studentsort.png" /></p>
<p>After you click the <strong>Last Name</strong> heading, students are displayed in descending last name order.</p>
<p><img src="http://media-www-asp.azureedge.net/media/48049/studentsortdesc.png" data-original="//media-www-asp.azureedge.net/media/48049/studentsortdesc.png" /></p>
<h2>Add a Search Box to the Students Index Page</h2>
<p>To add filtering to the Students Index page, you'll add a text box and a submit button to the view and make corresponding changes in the<code>Index</code> method. The text box will let you enter a string to search for in the first name and last name fields.</p>
<h3>Add Filtering Functionality to the Index Method</h3>
<p>In <em>Controllers\StudentController.cs</em>, replace the <code>Index</code> method with the following code (the changes are highlighted):</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ViewResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> sortOrder</span><mark><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> searchString</span></mark><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">NameSortParm</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrEmpty</span><span class="pun">(</span><span class="pln">sortOrder</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">"name_desc"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">DateSortParm</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> sortOrder </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Date"</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">"date_desc"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Date"</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> students </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> s </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Students</span><span class="pln">
                   </span><span class="kwd">select</span><span class="pln"> s</span><span class="pun">;</span><span class="pln">
    </span><mark><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrEmpty</span><span class="pun">(</span><span class="pln">searchString</span><span class="pun">))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">searchString</span><span class="pun">)</span><span class="pln">
                               </span><span class="pun">||</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">FirstMidName</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">searchString</span><span class="pun">));</span><span class="pln">
    </span><span class="pun">}</span></mark><span class="pln">
    </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">sortOrder</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"name_desc"</span><span class="pun">:</span><span class="pln">
            students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderByDescending</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"Date"</span><span class="pun">:</span><span class="pln">
            students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">EnrollmentDate</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"date_desc"</span><span class="pun">:</span><span class="pln">
            students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderByDescending</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">EnrollmentDate</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">
            students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">students</span><span class="pun">.</span><span class="typ">ToList</span><span class="pun">());</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>You've added a <code>searchString</code> parameter to the <code>Index</code> method. The search string value is received from a text box that you'll add to the Index view. You've also added to the LINQ statement a <code>where</code> clause that selects only students whose first name or last name contains the search string. The statement that adds the <a href="http://msdn.microsoft.com/en-us/library/bb535040.aspx">where</a> clause is executed only if there's a value to search for.</p>
<div class="note"><span></span>
<p><strong>Note</strong> In many cases you can call the same method either on an Entity Framework entity set or as an extension method on an in-memory collection. The results are normally the same but in some cases may be different.</p>
<p>For example, the .NET Framework implementation of the <code>Contains</code> method returns all rows when you pass an empty string to it, but the Entity Framework provider for SQL Server Compact 4.0 returns zero rows for empty strings. Therefore the code in the example (putting the <code>Where</code> statement inside an <code>if</code> statement) makes sure that you get the same results for all versions of SQL Server. Also, the .NET Framework implementation of the <code>Contains</code> method performs a case-sensitive comparison by default, but Entity Framework SQL Server providers perform case-insensitive comparisons by default. Therefore, calling the <code>ToUpper</code>method to make the test explicitly case-insensitive ensures that results do not change when you change the code later to use a repository, which will return an <code>IEnumerable</code> collection instead of an <code>IQueryable</code> object. (When you call the <code>Contains</code>method on an <code>IEnumerable</code> collection, you get the .NET Framework implementation; when you call it on an <code>IQueryable</code>object, you get the database provider implementation.)</p>
<p>Null handling may also be different for different database providers or when you use an <code>IQueryable</code> object compared to when you use an <code>IEnumerable</code> collection. For example, in some scenarios a <code>Where</code> condition such as <code>table.Column&nbsp;!=&nbsp;0</code> may not return columns that have <code>null</code> as the value. For more information, see <a href="http://data.uservoice.com/forums/72025-entity-framework-feature-suggestions/suggestions/1015361-incorrect-handling-of-null-variables-in-where-cl">Incorrect handling of null variables in 'where' clause</a>.</p>
</div>
<h3>Add a Search Box to the Student Index View</h3>
<p>In <em>Views\Student\Index.cshtml</em>, add the highlighted code immediately before the opening <code>table</code> tag in order to create a caption, a text box, and a <strong>Search</strong> button.</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;p&gt;</span><span class="pln">
    @Html.ActionLink("Create New", "Create")
</span><span class="tag">&lt;/p&gt;</span><span class="pln">

</span><mark><span class="pln">@using (Html.BeginForm())
{
    </span><span class="tag">&lt;p&gt;</span><span class="pln">
        Find by name: @Html.TextBox("SearchString")  
        </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"Search"</span><span class="pln"> </span><span class="tag">/&gt;&lt;/p&gt;</span><span class="pln">
}</span></mark><span class="pln">

</span><span class="tag">&lt;table&gt;</span><span class="pln">
    </span><span class="tag">&lt;tr&gt;</span></pre>
<p>Run the page, enter a search string, and click <strong>Search</strong> to verify that filtering is working.</p>
<p><img alt="Students_Index_page_with_search_box" border="0" src="http://media-www-asp.azureedge.net/media/48045/studentfilter.png" data-original="//media-www-asp.azureedge.net/media/48045/studentfilter.png" /></p>
<p>Notice the URL doesn't contain the "an" search string, which means that if you bookmark this page, you won't get the filtered list when you use the bookmark. You'll change the <strong>Search</strong> button to use query strings for filter criteria later in the tutorial.</p>
<h2>Add Paging to the Students Index Page</h2>
<p>To add paging to the Students Index page, you'll start by installing the <strong>PagedList.Mvc</strong> NuGet package. Then you'll make additional changes in the <code>Index</code> method and add paging links to the <code>Index</code> view. <strong>PagedList.Mvc</strong> is one of many good paging and sorting packages for ASP.NET MVC, and its use here is intended only as an example, not as a recommendation for it over other options. The following illustration shows the paging links.</p>
<p><img alt="Students_index_page_with_paging" border="0" src="http://media-www-asp.azureedge.net/media/4472724/studentpaging.png" data-original="//media-www-asp.azureedge.net/media/4472724/studentpaging.png" /></p>
<h3>Install the PagedList.MVC NuGet Package</h3>
<p>The NuGet <strong>PagedList.Mvc</strong> package automatically installs the <strong>PagedList</strong> package as a dependency. The <strong>PagedList</strong> package installs a<code>PagedList</code> collection type and extension methods for <code>IQueryable</code> and <code>IEnumerable</code> collections. The extension methods create a single page of data in a <code>PagedList</code> collection out of your <code>IQueryable</code> or <code>IEnumerable</code>, and the <code>PagedList</code> collection provides several properties and methods that facilitate paging. The <strong>PagedList.Mvc</strong> package installs a paging helper that displays the paging buttons.</p>
<p>From the <strong>Tools</strong> menu, select <strong>Library Package Manager</strong> and then <strong>Package Manager Console</strong>.</p>
<p>In the <strong>Package Manager Console</strong> window, make sure ghe <strong>Package source</strong> is <strong>nuget.org</strong> and the <strong>Default project</strong> is <strong>ContosoUniversity</strong>, and then enter the following command:</p>
<p><code>Install-Package PagedList.Mvc</code><span></span></p>
<p><img alt="Install PagedList.Mvc" src="http://media-www-asp.azureedge.net/media/48016/installpagedlist.png" data-original="//media-www-asp.azureedge.net/media/48016/installpagedlist.png" /></p>
<p>Build the project.</p>
<h3>Add Paging Functionality to the Index Method</h3>
<p>In <em>Controllers\StudentController.cs</em>, add a <code>using</code> statement for the <code>PagedList</code> namespace:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">PagedList</span><span class="pun">;</span></pre>
<p>Replace the <code>Index</code> method with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ViewResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> sortOrder</span><span class="pun">,</span><span class="pln"> </span><mark><span class="kwd">string</span><span class="pln"> currentFilter</span><span class="pun">,</span></mark><span class="pln"> </span><span class="kwd">string</span><span class="pln"> searchString</span><mark><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> page</span></mark><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><mark><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">CurrentSort</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> sortOrder</span><span class="pun">;</span></mark><span class="pln">
   </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">NameSortParm</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrEmpty</span><span class="pun">(</span><span class="pln">sortOrder</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">"name_desc"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">DateSortParm</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> sortOrder </span><span class="pun">==</span><span class="pln"> </span><span class="str">"Date"</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="str">"date_desc"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Date"</span><span class="pun">;</span><span class="pln">

</span><mark><span class="pln">   </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">searchString </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      page </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
   </span><span class="kwd">else</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      searchString </span><span class="pun">=</span><span class="pln"> currentFilter</span><span class="pun">;</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">

   </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">CurrentFilter</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> searchString</span><span class="pun">;</span></mark><span class="pln">

   </span><span class="kwd">var</span><span class="pln"> students </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> s </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Students</span><span class="pln">
                  </span><span class="kwd">select</span><span class="pln"> s</span><span class="pun">;</span><span class="pln">
   </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrEmpty</span><span class="pun">(</span><span class="pln">searchString</span><span class="pun">))</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">searchString</span><span class="pun">)</span><span class="pln">
                             </span><span class="pun">||</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">FirstMidName</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">searchString</span><span class="pun">));</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
   </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">sortOrder</span><span class="pun">)</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"name_desc"</span><span class="pun">:</span><span class="pln">
         students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderByDescending</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span><span class="pln">
         </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"Date"</span><span class="pun">:</span><span class="pln">
         students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">EnrollmentDate</span><span class="pun">);</span><span class="pln">
         </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"date_desc"</span><span class="pun">:</span><span class="pln">
         students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderByDescending</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">EnrollmentDate</span><span class="pun">);</span><span class="pln">
         </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">  </span><span class="com">// Name ascending </span><span class="pln">
         students </span><span class="pun">=</span><span class="pln"> students</span><span class="pun">.</span><span class="typ">OrderBy</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">LastName</span><span class="pun">);</span><span class="pln">
         </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">

</span><mark><span class="pln">   </span><span class="kwd">int</span><span class="pln"> pageSize </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln">
   </span><span class="kwd">int</span><span class="pln"> pageNumber </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">page </span><span class="pun">??</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">students</span><span class="pun">.</span><span class="typ">ToPagedList</span><span class="pun">(</span><span class="pln">pageNumber</span><span class="pun">,</span><span class="pln"> pageSize</span><span class="pun">));</span></mark><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code adds a <code>page</code> parameter, a current sort order parameter, and a current filter parameter to the method signature:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> sortOrder</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> currentFilter</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> searchString</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> page</span><span class="pun">)</span></pre>
<p>The first time the page is displayed, or if the user hasn't clicked a paging or sorting link, all the parameters will be null.&nbsp; If a paging link is clicked, the <code>page</code> variable will contain the page number to display.</p>
<p><code>A ViewBag</code> property provides the view with the current sort order, because this must be included in the paging links in order to keep the sort order the same while paging:</p>
<pre class="prettyprint prettyprinted"><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">CurrentSort</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> sortOrder</span><span class="pun">;</span></pre>
<p>Another property, <code>ViewBag.CurrentFilter</code>, provides the view with the current filter string. This value must be included in the paging links in order to maintain the filter settings during paging, and it must be restored to the text box when the page is redisplayed. If the search string is changed during paging, the page has to be reset to 1, because the new filter can result in different data to display. The search string is changed when a value is entered in the text box and the submit button is pressed. In that case, the <code>searchString </code>parameter is not null.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">searchString </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    page </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="kwd">else</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    searchString </span><span class="pun">=</span><span class="pln"> currentFilter</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>At the end of the method, the <code>ToPagedList</code> extension method on the students <code>IQueryable</code> object converts the student query to a single page of students in a collection type that supports paging. That single page of students is then passed to the view:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">int</span><span class="pln"> pageSize </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">int</span><span class="pln"> pageNumber </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">page </span><span class="pun">??</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">students</span><span class="pun">.</span><span class="typ">ToPagedList</span><span class="pun">(</span><span class="pln">pageNumber</span><span class="pun">,</span><span class="pln"> pageSize</span><span class="pun">));</span></pre>
<p>The <code>ToPagedList</code> method takes a page number. The two question marks represent the <a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx">null-coalescing operator</a>. The null-coalescing operator defines a default value for a nullable type; the expression <code>(page ?? 1)</code> means return the value of <code>page</code> if it has a value, or return 1 if <code>page</code> is null.</p>
<h3>Add Paging Links to the Student Index View</h3>
<p>In <em>Views\Student\Index.cshtml</em>, replace the existing code with the following code. the changes are highlighted.</p>
<pre class="prettyprint prettyprinted"><mark><span class="pln">@model PagedList.IPagedList</span><span class="tag">&lt;ContosoUniversity.Models.Student&gt;</span></mark><span class="pln">
</span><mark><span class="pln">@using PagedList.Mvc;</span></mark><span class="pln">
</span><mark><span class="tag">&lt;link</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"~/Content/PagedList.css"</span><span class="pln"> </span><span class="atn">rel</span><span class="pun">=</span><span class="atv">"stylesheet"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"text/css"</span><span class="pln"> </span><span class="tag">/&gt;</span></mark><span class="pln">

@{
    ViewBag.Title = "</span><mark><span class="pln">Students</span></mark><span class="pln">";
}

</span><span class="tag">&lt;h2&gt;</span><mark><span class="pln">Students</span></mark><span class="tag">&lt;/h2&gt;</span><span class="pln">

</span><span class="tag">&lt;p&gt;</span><span class="pln">
    @Html.ActionLink("Create New", "Create")
</span><span class="tag">&lt;/p&gt;</span><span class="pln">
@using (Html.BeginForm(</span><mark><span class="pln">"Index", "Student", FormMethod.Get</span></mark><span class="pln">))
{
    </span><span class="tag">&lt;p&gt;</span><span class="pln">
        Find by name: @Html.TextBox("SearchString"</span><mark><span class="pln">, ViewBag.CurrentFilter as string</span></mark><span class="pln">)
        </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"Search"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/p&gt;</span><span class="pln">
}
</span><span class="tag">&lt;table</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"table"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.ActionLink("Last Name", "Index", new { sortOrder = ViewBag.NameSortParm, </span><mark><span class="pln">currentFilter=ViewBag.CurrentFilter</span></mark><span class="pln"> })
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            First Name
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            @Html.ActionLink("Enrollment Date", "Index", new { sortOrder = ViewBag.DateSortParm, </span><mark><span class="pln">currentFilter=ViewBag.CurrentFilter</span></mark><span class="pln"> })
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;&lt;/th&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">


@foreach (var item in Model) {
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.LastName)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.FirstMidName)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.EnrollmentDate)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) |
            @Html.ActionLink("Details", "Details", new { id=item.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ID })
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
}

</span><span class="tag">&lt;/table&gt;</span><span class="pln">
</span><mark><span class="tag">&lt;br</span><span class="pln"> </span><span class="tag">/&gt;</span></mark><span class="pln">
</span><mark><span class="pln">Page @(Model.PageCount &lt; Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</span></mark><span class="pln">

</span><mark><span class="pln">@Html.PagedListPager(Model, page =&gt; Url.Action("Index", </span></mark><span class="pln">
    </span><mark><span class="pln">new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))</span></mark>
</pre>
<p>The <code>@model</code> statement at the top of the page specifies that the view now gets a <code>PagedList</code> object instead of a <code>List</code> object.</p>
<p>The&nbsp; <code>using</code> statement for <code>PagedList.Mvc</code> gives access to the MVC helper for the paging buttons.&nbsp;</p>
<p>The code uses an overload of <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.html.formextensions.beginform(v=vs.108).aspx">BeginForm</a> that allows it to specify <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.formmethod(v=vs.100).aspx/css">FormMethod.Get</a>.</p>
<pre class="prettyprint prettyprinted"><span class="pln">@using (Html.BeginForm("Index", "Student", </span><mark><span class="pln">FormMethod.Get</span></mark><span class="pln">))
{
    </span><span class="tag">&lt;p&gt;</span><span class="pln">
        Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)  
        </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"Search"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/p&gt;</span><span class="pln">
}&nbsp;</span></pre>
<p>The default <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.html.formextensions.beginform(v=vs.108).aspx">BeginForm</a> submits form data with a POST, which means that parameters are passed in the HTTP message body and not in the URL as query strings. When you specify HTTP GET, the form data is passed in the URL as query strings, which enables users to bookmark the URL.&nbsp;The <a href="http://www.w3.org/2001/tag/doc/whenToUseGet.html">W3C guidelines for the use of HTTP GET</a> recommend that you should use GET when the action does not result in an update.</p>
<p>The text box is initialized with the current search string so when you click a new page you can see the current search string.</p>
<pre class="prettyprint prettyprinted"><span class="pln"> </span><span class="typ">Find</span><span class="pln"> </span><span class="kwd">by</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="lit">@Html</span><span class="pun">.</span><span class="typ">TextBox</span><span class="pun">(</span><span class="str">"SearchString"</span><span class="pun">,</span><span class="pln"> </span><mark><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">CurrentFilter</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> </span><span class="kwd">string</span></mark><span class="pun">)</span><span class="pln">  </span></pre>
<p>The column header links use the query string to pass the current search string to the controller so that the user can sort within filter results:</p>
<pre class="prettyprint prettyprinted"><span class="pln"> @Html.ActionLink("Last Name", "Index", new { sortOrder=ViewBag.NameSortParm, </span><mark><span class="pln">currentFilter=ViewBag.CurrentFilter</span></mark><span class="pln"> })</span></pre>
<p>The current page and total number of pages are displayed.</p>
<pre class="prettyprint prettyprinted"><span class="typ">Page</span><span class="pln"> </span><span class="pun">@(</span><span class="typ">Model</span><span class="pun">.</span><span class="typ">PageCount</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> </span><span class="typ">Model</span><span class="pun">.</span><span class="typ">PageNumber</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">Model</span><span class="pun">.</span><span class="typ">PageNumber</span><span class="pun">)</span><span class="pln"> of </span><span class="lit">@Model</span><span class="pun">.</span><span class="typ">PageCount</span></pre>
<p>If there are no pages to display, "Page 0 of 0" is shown. (In that case the page number is greater than the page count because<code>Model.PageNumber</code> is 1, and <code>Model.PageCount</code> is 0.)</p>
<p>The paging buttons are displayed by the <code>PagedListPager</code> helper:</p>
<pre class="prettyprint prettyprinted"><span class="pln">@Html.PagedListPager( Model, page =&gt; Url.Action("Index", new { page }) )</span></pre>
<p>The <code>PagedListPager</code> helper provides a number of options that you can customize, including URLs and styling.&nbsp; For more information, see<a href="https://github.com/TroyGoode/PagedList">TroyGoode&nbsp; / PagedList</a> on the GitHub site.</p>
<p>Run the page.</p>
<p><img alt="Students_index_page_with_paging" border="0" src="http://media-www-asp.azureedge.net/media/4472724/studentpaging.png" data-original="//media-www-asp.azureedge.net/media/4472724/studentpaging.png" /></p>
<p>Click the paging links in different sort orders to make sure paging works. Then enter a search string and try paging again to verify that paging also works correctly with sorting and filtering.</p>
<p><img src="http://media-www-asp.azureedge.net/media/4472730/studentpagingsearch.png" data-original="//media-www-asp.azureedge.net/media/4472730/studentpagingsearch.png" /></p>
<h2>Create an About Page That Shows Student Statistics</h2>
<p>For the Contoso University website's About page, you'll display how many students have enrolled for each enrollment date. This requires grouping and simple calculations on the groups. To accomplish this, you'll do the following:</p>
<ul>
<li>Create a view model class for the data that you need to pass to the view.</li>
<li>Modify the <code>About</code> method in the <code>Home</code> controller.</li>
<li>Modify the <code>About</code> view.</li>
</ul>
<h3>Create the View Model</h3>
<p>Create a <em>ViewModels</em> folder in the project folder. In that folder, add a class file <em>EnrollmentDateGroup.cs</em> and replace the template code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">ComponentModel</span><span class="pun">.</span><span class="typ">DataAnnotations</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">ViewModels</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">EnrollmentDateGroup</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">DataType</span><span class="pun">(</span><span class="typ">DataType</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pun">?</span><span class="pln"> </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">StudentCount</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<h3>Modify the Home Controller</h3>
<p>In <em>HomeController.cs</em>, add the following <code>using</code> statements at the top of the file:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="pln">DAL</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">ViewModels</span><span class="pun">;</span></pre>
<p>Add a class variable for the database context immediately after the opening curly brace for the class:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HomeController</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">Controller</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><mark><span class="kwd">private</span><span class="pln"> </span><span class="typ">SchoolContext</span><span class="pln"> db </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SchoolContext</span><span class="pun">();</span></mark></pre>
<p>Replace the <code>About</code> method with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">About</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="typ">IQueryable</span><span class="pun">&lt;</span><span class="typ">EnrollmentDateGroup</span><span class="pun">&gt;</span><span class="pln"> data </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> student </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Students</span><span class="pln">
               </span><span class="kwd">group</span><span class="pln"> student </span><span class="kwd">by</span><span class="pln"> student</span><span class="pun">.</span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="kwd">into</span><span class="pln"> dateGroup
               </span><span class="kwd">select</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">EnrollmentDateGroup</span><span class="pun">()</span><span class="pln">
               </span><span class="pun">{</span><span class="pln">
                   </span><span class="typ">EnrollmentDate</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> dateGroup</span><span class="pun">.</span><span class="typ">Key</span><span class="pun">,</span><span class="pln">
                   </span><span class="typ">StudentCount</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> dateGroup</span><span class="pun">.</span><span class="typ">Count</span><span class="pun">()</span><span class="pln">
               </span><span class="pun">};</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">data</span><span class="pun">.</span><span class="typ">ToList</span><span class="pun">());</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The LINQ statement groups the student entities by enrollment date, calculates the number of entities in each group, and stores the results in a collection of <code>EnrollmentDateGroup</code> view model objects.</p>
<p>Add a <code>Dispose</code> method:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Dispose</span><span class="pun">(</span><span class="kwd">bool</span><span class="pln"> disposing</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    db</span><span class="pun">.</span><span class="typ">Dispose</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">Dispose</span><span class="pun">(</span><span class="pln">disposing</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<h3>Modify the About View</h3>
<p>Replace the code in the <em>Views\Home\About.cshtml</em> file with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="pln">@model IEnumerable</span><span class="tag">&lt;ContosoUniversity.ViewModels.EnrollmentDateGroup&gt;</span><span class="pln">
           
@{
    ViewBag.Title = "Student Body Statistics";
}

</span><span class="tag">&lt;h2&gt;</span><span class="pln">Student Body Statistics</span><span class="tag">&lt;/h2&gt;</span><span class="pln">

</span><span class="tag">&lt;table&gt;</span><span class="pln">
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            Enrollment Date
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
        </span><span class="tag">&lt;th&gt;</span><span class="pln">
            Students
        </span><span class="tag">&lt;/th&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">

@foreach (var item in Model) {
    </span><span class="tag">&lt;tr&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @Html.DisplayFor(modelItem =&gt; item.EnrollmentDate)
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
        </span><span class="tag">&lt;td&gt;</span><span class="pln">
            @item.StudentCount
        </span><span class="tag">&lt;/td&gt;</span><span class="pln">
    </span><span class="tag">&lt;/tr&gt;</span><span class="pln">
}
</span><span class="tag">&lt;/table&gt;</span></pre>
<p>Run the app and click the <strong>About</strong> link. The count of students for each enrollment date is displayed in a table.</p>
<p><img alt="About_page" src="http://media-www-asp.azureedge.net/media/47994/about.png" data-original="//media-www-asp.azureedge.net/media/47994/about.png" /></p>
<h2>Summary</h2>
<p>In this tutorial you've seen how to create a data model and implement basic CRUD, sorting, filtering, paging, and grouping functionality. In the next tutorial you'll begin looking at more advanced topics by expanding the data model.</p>
</body>
</html>
***********************************
Filename: Updating Related Data with ASP.NET MVC & EF C# Edition.html
***********************************
<!DOCTYPE html>
<html>
<head>
</head>
<body style="font-family: arial, helvetica, sans-serif;font-size: 12px;">
<p>In the previous tutorial you displayed related data; in this tutorial you'll update related data. For most relationships, this can be done by updating either foreign key fields or navigation properties. For many-to-many relationships, the Entity Framework doesn't expose the join table directly, so you add and remove entities to and from the appropriate navigation properties.</p>
<p>The following illustrations show some of the pages that you'll work with.</p>
<p><img src="https://media-www-asp.azureedge.net/media/4482080/createcourse.png" data-original="https://media-www-asp.azureedge.net/media/4482080/createcourse.png" alt="Course_create_page" border="0" /></p>
<p><img src="https://media-www-asp.azureedge.net/media/4482074/coursesedit.png" data-original="https://media-www-asp.azureedge.net/media/4482074/coursesedit.png" alt="Instructor_edit_page_with_courses" border="0" /></p>
<p><img alt="Instructor edit with courses" src="https://media-www-asp.azureedge.net/media/4482062/instructoreditwithcourses.png" data-original="https://media-www-asp.azureedge.net/media/4482062/instructoreditwithcourses.png" /></p>
<h2>Customize the Create and Edit Pages for Courses</h2>
<p>When a new course entity is created, it must have a relationship to an existing department. To facilitate this, the scaffolded code includes controller methods and Create and Edit views that include a drop-down list for selecting the department. The drop-down list sets the<code>Course.DepartmentID</code> foreign key property, and that's all the Entity Framework needs in order to load the <code>Department</code> navigation property with the appropriate <code>Department</code> entity. You'll use the scaffolded code, but change it slightly to add error handling and sort the drop-down list.</p>
<p>In <em>CourseController.cs</em>, delete the four <code>Create</code> and <code>Edit</code> methods and replace them with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Create</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><mark><span class="typ">PopulateDepartmentsDropDownList</span><span class="pun">();</span></mark><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Create</span><span class="pun">([</span><span class="typ">Bind</span><span class="pun">(</span><span class="typ">Include</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"CourseID,Title,Credits,DepartmentID"</span><span class="pun">)]</span><span class="typ">Course</span><span class="pln"> course</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><mark><span class="kwd">try</span><span class="pln">
    </span><span class="pun">{</span></mark><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">IsValid</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            db</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span><span class="pln">
            db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><mark><span class="pun">}</span><span class="pln">
    </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">RetryLimitExceededException</span><span class="pln"> </span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.)</span><span class="pln">
        </span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">AddModelError</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Unable to save changes. Try again, and if the problem persists, see your system administrator."</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">PopulateDepartmentsDropDownList</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">DepartmentID</span><span class="pun">);</span></mark><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Edit</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">Course</span><span class="pln"> course </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">course </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">HttpNotFound</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><mark><span class="typ">PopulateDepartmentsDropDownList</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">DepartmentID</span><span class="pun">);</span></mark><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="pun">[</span><span class="typ">HttpPost</span><mark><span class="pun">,</span><span class="pln"> </span><span class="typ">ActionName</span><span class="pun">(</span><span class="str">"Edit"</span><span class="pun">)</span></mark><span class="pun">]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Edit</span><mark><span class="typ">Post</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">)</span></mark><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><mark><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> courseToUpdate </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">TryUpdateModel</span><span class="pun">(</span><span class="pln">courseToUpdate</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">,</span><span class="pln">
       </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"Title"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Credits"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"DepartmentID"</span><span class="pln"> </span><span class="pun">}))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">try</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">RetryLimitExceededException</span><span class="pln"> </span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.</span><span class="pln">
            </span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">AddModelError</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Unable to save changes. Try again, and if the problem persists, see your system administrator."</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">PopulateDepartmentsDropDownList</span><span class="pun">(</span><span class="pln">courseToUpdate</span><span class="pun">.</span><span class="typ">DepartmentID</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">courseToUpdate</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">PopulateDepartmentsDropDownList</span><span class="pun">(</span><span class="kwd">object</span><span class="pln"> selectedDepartment </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> departmentsQuery </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> d </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Departments</span><span class="pln">
                           </span><span class="kwd">orderby</span><span class="pln"> d</span><span class="pun">.</span><span class="typ">Name</span><span class="pln">
                           </span><span class="kwd">select</span><span class="pln"> d</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">DepartmentID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SelectList</span><span class="pun">(</span><span class="pln">departmentsQuery</span><span class="pun">,</span><span class="pln"> </span><span class="str">"DepartmentID"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Name"</span><span class="pun">,</span><span class="pln"> selectedDepartment</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span></mark></pre>
<p>Add the following <code>using</code> statement at the beginning of the file:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">using</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">.</span><span class="typ">Infrastructure</span><span class="pun">;</span></pre>
<p>The <code>PopulateDepartmentsDropDownList</code> method gets a list of all departments sorted by name, creates a <code>SelectList</code> collection for a drop-down list, and passes the collection to the view in a <code>ViewBag</code> property. The method accepts the optional <code>selectedDepartment</code> parameter that allows the calling code to specify the item that will be selected when the drop-down list is rendered. The view will pass the name<code>DepartmentID</code> to the <a href="https://www.asp.net/mvc/tutorials/javascript/working-with-the-dropdownlist-box-and-jquery/using-the-dropdownlist-helper-with-aspnet-mvc">DropDownList</a> helper, and the helper then knows to look in the <code>ViewBag</code> object for a <code>SelectList</code> named<code>DepartmentID</code>.</p>
<p>The <code>HttpGet</code> <code>Create</code> method calls the <code>PopulateDepartmentsDropDownList</code> method without setting the selected item, because for a new course the department is not established yet:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Create</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="typ">PopulateDepartmentsDropDownList</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <code>HttpGet</code> <code>Edit</code> method sets the selected item, based on the ID of the department that is already assigned to the course being edited:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Edit</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">Course</span><span class="pln"> course </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">course </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">HttpNotFound</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">PopulateDepartmentsDropDownList</span><span class="pun">(</span><mark><span class="pln">course</span><span class="pun">.</span><span class="typ">DepartmentID</span></mark><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The <code>HttpPost</code> methods for both <code>Create</code> and <code>Edit</code> also include code that sets the selected item when they redisplay the page after an error:</p>
<pre class="prettyprint prettyprinted"><span class="pln">   </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">RetryLimitExceededException</span><span class="pln"> </span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.)</span><span class="pln">
      </span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">AddModelError</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Unable to save changes. Try again, and if the problem persists, see your system administrator."</span><span class="pun">);</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
   </span><mark><span class="typ">PopulateDepartmentsDropDownList</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">DepartmentID</span><span class="pun">);</span></mark><span class="pln">
   </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span></pre>
<p>This code ensures that when the page is redisplayed to show the error message, whatever department was selected stays selected.</p>
<p>The Course views are already scaffolded with drop-down lists for the department field, but you don't want the DepartmentID caption for this field, so make the following highlighted change to the <em>Views\Course\Create.cshtml</em> file to change the caption.</p>
<pre class="prettyprint prettyprinted"><span class="pln">@model ContosoUniversity.Models.Course

@{
    ViewBag.Title = "Create";
}

</span><span class="tag">&lt;h2&gt;</span><span class="pln">Create</span><span class="tag">&lt;/h2&gt;</span><span class="pln">


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-horizontal"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;h4&gt;</span><span class="pln">Course</span><span class="tag">&lt;/h4&gt;</span><span class="pln">
        </span><span class="tag">&lt;hr</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
        @Html.ValidationSummary(true)

        </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
            @Html.LabelFor(model =&gt; model.CourseID, new { @class = "control-label col-md-2" })
            </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-10"</span><span class="tag">&gt;</span><span class="pln">
                @Html.EditorFor(model =&gt; model.CourseID)
                @Html.ValidationMessageFor(model =&gt; model.CourseID)
            </span><span class="tag">&lt;/div&gt;</span><span class="pln">
        </span><span class="tag">&lt;/div&gt;</span><span class="pln">

        </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
            @Html.LabelFor(model =&gt; model.Title, new { @class = "control-label col-md-2" })
            </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-10"</span><span class="tag">&gt;</span><span class="pln">
                @Html.EditorFor(model =&gt; model.Title)
                @Html.ValidationMessageFor(model =&gt; model.Title)
            </span><span class="tag">&lt;/div&gt;</span><span class="pln">
        </span><span class="tag">&lt;/div&gt;</span><span class="pln">

        </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
            @Html.LabelFor(model =&gt; model.Credits, new { @class = "control-label col-md-2" })
            </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-10"</span><span class="tag">&gt;</span><span class="pln">
                @Html.EditorFor(model =&gt; model.Credits)
                @Html.ValidationMessageFor(model =&gt; model.Credits)
            </span><span class="tag">&lt;/div&gt;</span><span class="pln">
        </span><span class="tag">&lt;/div&gt;</span><span class="pln">

        </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
            </span><mark><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"control-label col-md-2"</span><span class="pln"> </span><span class="atn">for</span><span class="pun">=</span><span class="atv">"DepartmentID"</span><span class="tag">&gt;</span><span class="pln">Department</span><span class="tag">&lt;/label&gt;</span></mark><span class="pln">
            </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-10"</span><span class="tag">&gt;</span><span class="pln">
                @Html.DropDownList("DepartmentID", String.Empty)
                @Html.ValidationMessageFor(model =&gt; model.DepartmentID)
            </span><span class="tag">&lt;/div&gt;</span><span class="pln">
        </span><span class="tag">&lt;/div&gt;</span><span class="pln">

        </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
            </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-offset-2 col-md-10"</span><span class="tag">&gt;</span><span class="pln">
                </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"Create"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"btn btn-default"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
            </span><span class="tag">&lt;/div&gt;</span><span class="pln">
        </span><span class="tag">&lt;/div&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
}

</span><span class="tag">&lt;div&gt;</span><span class="pln">
    @Html.ActionLink("Back to List", "Index")
</span><span class="tag">&lt;/div&gt;</span><span class="pln">

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}</span></pre>
<p>Make the same change in <em>Views\Course\Edit.cshtml</em>.</p>
<p>Normally the scaffolder doesn't scaffold a primary key because the key value is generated by the database and can't be changed and isn't a meaningful value to be displayed to users. For Course entities the scaffolder does include an text box for the <code>CourseID</code> field because it understands that the <code>DatabaseGeneratedOption.None</code> attribute means the user should be able enter the primary key value. But it doesn't understand that because the number is meaningful you want to see it in the other views, so you need to add it manually.</p>
<p>In <em>Views\Course\Edit.cshtml</em>, add a course number field before the <strong>Title</strong> field. Because it's the primary key, it's displayed, but it can't be changed.</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    @Html.LabelFor(model =&gt; model.CourseID, new { @class = "control-label col-md-2" })
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-10"</span><span class="tag">&gt;</span><span class="pln">
        @Html.DisplayFor(model =&gt; model.CourseID)
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p>There's already a hidden field (<code>Html.HiddenFor</code> helper) for the course number in the Edit view. Adding an <em>Html.LabelFor</em> helper doesn't eliminate the need for the hidden field because it doesn't cause the course number to be included in the posted data when the user clicks<strong>Save</strong> on the Edit page.</p>
<p>In <em>Views\Course\Delete.cshtml</em> and <em>Views\Course\Details.cshtml</em>, change the department name caption from "Name" to "Department" and add a course number field before the <strong>Title</strong> field.</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;dt&gt;</span><span class="pln">
    </span><mark><span class="pln">Department</span></mark><span class="pln">
</span><span class="tag">&lt;/dt&gt;</span><span class="pln">

</span><span class="tag">&lt;dd&gt;</span><span class="pln">
    @Html.DisplayFor(model =&gt; model.Department.Name)
</span><span class="tag">&lt;/dd&gt;</span><span class="pln">

</span><mark><span class="tag">&lt;dt&gt;</span><span class="pln">
    @Html.DisplayNameFor(model =&gt; model.CourseID)
</span><span class="tag">&lt;/dt&gt;</span><span class="pln">

</span><span class="tag">&lt;dd&gt;</span><span class="pln">
    @Html.DisplayFor(model =&gt; model.CourseID)
</span><span class="tag">&lt;/dd&gt;</span></mark></pre>
<p>Run the <strong>Create</strong> page (display the Course Index page and click <strong>Create New</strong>) and enter data for a new course:</p>
<p><img src="https://media-www-asp.azureedge.net/media/4482080/createcourse.png" data-original="https://media-www-asp.azureedge.net/media/4482080/createcourse.png" alt="Course_create_page" border="0" /></p>
<p>Click <strong>Create</strong>. The Course Index page is displayed with the new course added to the list. The department name in the Index page list comes from the navigation property, showing that the relationship was established correctly.</p>
<p><img src="https://media-www-asp.azureedge.net/media/48033/newcourseinindex.png" data-original="https://media-www-asp.azureedge.net/media/48033/newcourseinindex.png" alt="Course_Index_page_showing_new_course" border="0" /></p>
<p>Run the <strong>Edit</strong> page (display the Course Index page and click <strong>Edit</strong> on a course).</p>
<p><img src="https://media-www-asp.azureedge.net/media/4482074/coursesedit.png" data-original="https://media-www-asp.azureedge.net/media/4482074/coursesedit.png" alt="Course_edit_page" border="0" /></p>
<p>Change data on the page and click <strong>Save</strong>. The Course Index page is displayed with the updated course data.</p>
<h2>Adding an Edit Page for Instructors</h2>
<p>When you edit an instructor record, you want to be able to update the instructor's office assignment. The <code>Instructor</code> entity has a one-to-zero-or-one relationship with the <code>OfficeAssignment</code> entity, which means you must handle the following situations:</p>
<ul>
<li>If the user clears the office assignment and it originally had a value, you must remove and delete the <code>OfficeAssignment</code> entity.</li>
<li>If the user enters an office assignment value and it originally was empty, you must create a new <code>OfficeAssignment</code> entity.</li>
<li>If the user changes the value of an office assignment, you must change the value in an existing <code>OfficeAssignment</code> entity.</li>
</ul>
<p>Open <em>InstructorController.cs</em> and look at the <code>HttpGet</code> <code>Edit</code> method:</p>
<pre class="prettyprint prettyprinted"><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">Instructor</span><span class="pln"> instructor </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">instructor </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">HttpNotFound</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SelectList</span><span class="pun">(</span><span class="pln">db</span><span class="pun">.</span><span class="typ">OfficeAssignments</span><span class="pun">,</span><span class="pln"> </span><span class="str">"InstructorID"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Location"</span><span class="pun">,</span><span class="pln"> instructor</span><span class="pun">.</span><span class="pln">ID</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The scaffolded code here isn't what you want. It's setting up data for a drop-down list, but you what you need is a text box. Replace this method with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Edit</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><mark><span class="typ">Instructor</span><span class="pln"> instructor </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Single</span><span class="pun">();</span></mark><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">instructor </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">HttpNotFound</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code drops the <code>ViewBag</code> statement and adds eager loading for the associated <code>OfficeAssignment</code> entity. You can't perform eager loading with the <code>Find</code> method, so the <code>Where</code> and <code>Single</code> methods are used instead to select the instructor.</p>
<p>Replace the <code>HttpPost</code> <code>Edit</code> method with the following code. which handles office assignment updates:</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ActionName</span><span class="pun">(</span><span class="str">"Edit"</span><span class="pun">)]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">EditPost</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> instructorToUpdate </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln">
       </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">.</span><span class="typ">Single</span><span class="pun">();</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">TryUpdateModel</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">,</span><span class="pln">
       </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"LastName"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"FirstMidName"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"HireDate"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"OfficeAssignment"</span><span class="pln"> </span><span class="pun">}))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
       </span><span class="kwd">try</span><span class="pln">
       </span><span class="pun">{</span><span class="pln">
          </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrWhiteSpace</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">.</span><span class="typ">Location</span><span class="pun">))</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
             instructorToUpdate</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
          </span><span class="pun">}</span><span class="pln">

          db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

          </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
       </span><span class="pun">}</span><span class="pln">
       </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">RetryLimitExceededException</span><span class="pln"> </span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
         </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.</span><span class="pln">
         </span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">AddModelError</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Unable to save changes. Try again, and if the problem persists, see your system administrator."</span><span class="pun">);</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
   </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The reference to <code>RetryLimitExceededException</code> requires a <code>using</code> statement; to add it, right-click <code>RetryLimitExceededException</code>, and then click <strong>Resolve</strong> - <strong>using System.Data.Entity.Infrastructure</strong>.</p>
<p><img alt="Resolve Retry exception" src="https://media-www-asp.azureedge.net/media/48037/resolve.png" data-original="https://media-www-asp.azureedge.net/media/48037/resolve.png" /></p>
<p>The code does the following:</p>
<ul>
<li>
<p>Changes the method name to <code>EditPost</code> because the signature is now the same as the <code>HttpGet</code> method (the <code>ActionName</code> attribute specifies that the /Edit/ URL is still used).</p>
</li>
<li>
<p>Gets the current <code>Instructor</code> entity from the database using eager loading for the <code>OfficeAssignment</code> navigation property. This is the same as what you did in the <code>HttpGet</code> <code>Edit</code> method.</p>
</li>
<li>
<p>Updates the retrieved <code>Instructor</code> entity with values from the model binder. The <a href="http://msdn.microsoft.com/en-us/library/dd470908(v=vs.108).aspx">TryUpdateModel</a> overload used enables you to <em>whitelist</em>the properties you want to include. This prevents over-posting, as explained in <a href="https://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application">the second tutorial</a>.</p>
<pre class="prettyprint prettyprinted"><span class="pln">   </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">TryUpdateModel</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">,</span><span class="pln">
      </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"LastName"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"FirstMidName"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"HireDate"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"OfficeAssignment"</span><span class="pln"> </span><span class="pun">}))</span></pre>
</li>
<li>
<p>If the office location is blank, sets the <code>Instructor.OfficeAssignment</code> property to null so that the related row in the <code>OfficeAssignment</code>table will be deleted.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrWhiteSpace</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">.</span><span class="typ">Location</span><span class="pun">))</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    instructorToUpdate</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></pre>
</li>
<li>Saves the changes to the database.</li>
</ul>
<p>In <em>Views\Instructor\Edit.cshtml</em>, after the <code>div</code> elements for the <strong>Hire Date</strong> field, add a new field for editing the office location:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    @Html.LabelFor(model =&gt; model.OfficeAssignment.Location, new { @class = "control-label col-md-2" })
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-10"</span><span class="tag">&gt;</span><span class="pln">
        @Html.EditorFor(model =&gt; model.OfficeAssignment.Location)
        @Html.ValidationMessageFor(model =&gt; model.OfficeAssignment.Location)
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p>Run the page (select the <strong>Instructors</strong> tab and then click <strong>Edit</strong> on an instructor). Change the <strong>Office Location</strong> and click <strong>Save</strong>.</p>
<p><img src="https://media-www-asp.azureedge.net/media/4482068/instructoredit.png" data-original="https://media-www-asp.azureedge.net/media/4482068/instructoredit.png" alt="Changing_the_office_location" border="0" /></p>
<h2>Adding Course Assignments to the Instructor Edit Page</h2>
<p>Instructors may teach any number of courses. Now you'll enhance the Instructor Edit page by adding the ability to change course assignments using a group of check boxes, as shown in the following screen shot:</p>
<p><img src="https://media-www-asp.azureedge.net/media/4482062/instructoreditwithcourses.png" data-original="https://media-www-asp.azureedge.net/media/4482062/instructoreditwithcourses.png" alt="Instructor_edit_page_with_courses" border="0" /></p>
<p>The relationship between the <code>Course</code> and <code>Instructor</code> entities is many-to-many, which means you do not have direct access to the foreign key properties which are in the join table. Instead, you add and remove entities to and from the <code>Instructor.Courses</code> navigation property.</p>
<p>The UI that enables you to change which courses an instructor is assigned to is a group of check boxes. A check box for every course in the database is displayed, and the ones that the instructor is currently assigned to are selected. The user can select or clear check boxes to change course assignments. If the number of courses were much greater, you would probably want to use a different method of presenting the data in the view, but you'd use the same method of manipulating navigation properties in order to create or delete relationships.</p>
<p>To provide data to the view for the list of check boxes, you'll use a view model class. Create <em>AssignedCourseData.cs</em> in the <em>ViewModels</em> folder and replace the existing code with the following code:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">namespace</span><span class="pln"> </span><span class="typ">ContosoUniversity</span><span class="pun">.</span><span class="typ">ViewModels</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AssignedCourseData</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="typ">Assigned</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">set</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>In <em>InstructorController.cs</em>, replace the <code>HttpGet</code> <code>Edit</code> method with the following code. The changes are highlighted.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Edit</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">Instructor</span><span class="pln"> instructor </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">)</span><span class="pln">
        </span><mark><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">)</span></mark><span class="pln">
        </span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Single</span><span class="pun">();</span><span class="pln">
    </span><mark><span class="typ">PopulateAssignedCourseData</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span></mark><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">instructor </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">HttpNotFound</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><mark><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">PopulateAssignedCourseData</span><span class="pun">(</span><span class="typ">Instructor</span><span class="pln"> instructor</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> allCourses </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> instructorCourses </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashSet</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> viewModel </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">AssignedCourseData</span><span class="pun">&gt;();</span><span class="pln">
    </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> course </span><span class="kwd">in</span><span class="pln"> allCourses</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        viewModel</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AssignedCourseData</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">CourseID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">,</span><span class="pln">
            </span><span class="typ">Title</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> course</span><span class="pun">.</span><span class="typ">Title</span><span class="pun">,</span><span class="pln">
            </span><span class="typ">Assigned</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> instructorCourses</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">});</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">ViewBag</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> viewModel</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></mark></pre>
<p>The code adds eager loading for the <code>Courses</code> navigation property and calls the new <code>PopulateAssignedCourseData </code>method to provide information for the check box array using the <code>AssignedCourseData </code>view model class.</p>
<p>The code in the <code>PopulateAssignedCourseData </code>method reads through all <code>Course</code> entities in order to load a list of courses using the view model class. For each course, the code checks whether the course exists in the instructor's <code>Courses</code> navigation property. To create efficient lookup when checking whether a course is assigned to the instructor, the courses assigned to the instructor are put into a <a href="http://msdn.microsoft.com/en-us/library/bb359438.aspx">HashSet</a> collection. The <code>Assigned</code> property&nbsp; is set to <code>true</code>&nbsp; for courses the instructor is assigned. The view will use this property to determine which check boxes must be displayed as selected. Finally, the list is passed to the view in a <code>ViewBag</code> property.</p>
<p>Next, add the code that's executed when the user clicks <strong>Save</strong>. Replace the <code>EditPost</code> method with the following code, which calls a new method that updates the <code>Courses</code> navigation property of the <code>Instructor</code> entity. The changes are highlighted.</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Edit</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">?</span><span class="pln"> id</span><span class="pun">,</span><span class="pln"> </span><mark><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> selectedCourses</span></mark><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">id </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HttpStatusCodeResult</span><span class="pun">(</span><span class="typ">HttpStatusCode</span><span class="pun">.</span><span class="typ">BadRequest</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> instructorToUpdate </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln">
       </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">)</span><span class="pln">
       </span><mark><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">)</span></mark><span class="pln">
       </span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">.</span><span class="typ">Single</span><span class="pun">();</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">TryUpdateModel</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">,</span><span class="pln">
       </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"LastName"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"FirstMidName"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"HireDate"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"OfficeAssignment"</span><span class="pln"> </span><span class="pun">}))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">try</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrWhiteSpace</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">.</span><span class="typ">Location</span><span class="pun">))</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                instructorToUpdate</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><mark><span class="typ">UpdateInstructorCourses</span><span class="pun">(</span><span class="pln">selectedCourses</span><span class="pun">,</span><span class="pln"> instructorToUpdate</span><span class="pun">);</span></mark><span class="pln">

            db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">RetryLimitExceededException</span><span class="pln"> </span><span class="com">/* dex */</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">//Log the error (uncomment dex variable name and add a line here to write a log.</span><span class="pln">
            </span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">AddModelError</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Unable to save changes. Try again, and if the problem persists, see your system administrator."</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><mark><span class="typ">PopulateAssignedCourseData</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">);</span></mark><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><mark><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">UpdateInstructorCourses</span><span class="pun">(</span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> selectedCourses</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pln"> instructorToUpdate</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectedCourses </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      instructorToUpdate</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><course><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;();</span><span class="pln">
      </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
&nbsp;
   </span><span class="kwd">var</span><span class="pln"> selectedCoursesHS </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashSet</span><span class="str">&lt;string&gt;</span><string><span class="pun">(</span><span class="pln">selectedCourses</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">var</span><span class="pln"> instructorCourses </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashSet</span><span class="str">&lt;int&gt;</span><int><span class="pln">
       </span><span class="pun">(</span><span class="pln">instructorToUpdate</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">c </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">));</span><span class="pln">
   </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> course </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">)</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectedCoursesHS</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">.</span><span class="typ">ToString</span><span class="pun">()))</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
         </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">instructorCourses</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">))</span><span class="pln">
         </span><span class="pun">{</span><span class="pln">
            instructorToUpdate</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span><span class="pln">
         </span><span class="pun">}</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">else</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
         </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">instructorCourses</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">))</span><span class="pln">
         </span><span class="pun">{</span><span class="pln">
            instructorToUpdate</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Remove</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span><span class="pln">
         </span><span class="pun">}</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></int></string></course></mark></pre>
<p>The method signature is now different from the <code>HttpGet</code> <code>Edit</code> method, so the method name changes from <code>EditPost</code> back to <code>Edit</code>.</p>
<p>Since the view doesn't have a collection of <code>Course</code> entities, the model binder can't automatically update the <code>Courses </code>navigation property. Instead of using the model binder to update the <code>Courses</code> navigation property, you'll do that in the new <code>UpdateInstructorCourses</code> method. Therefore you need to exclude the <code>Courses</code> property from model binding. This doesn't require any change to the code that calls<a href="http://msdn.microsoft.com/en-us/library/dd470908(v=vs.98).aspx">TryUpdateModel</a> because you're using the <em>whitelisting </em>overload and <code>Courses</code> isn't in the include list.</p>
<p>If no check boxes were selected, the code in <code>UpdateInstructorCourses</code> initializes the <code>Courses</code> navigation property with an empty collection:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectedCourses </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    instructorToUpdate</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;();</span><span class="pln">
    </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The code then loops through all courses in the database and checks each course against the ones currently assigned to the instructor versus the ones that were selected in the view. To facilitate efficient lookups, the latter two collections are stored in <code>HashSet</code> objects.</p>
<p>If the check box for a course was selected but the course isn't in the <code>Instructor.Courses</code> navigation property, the course is added to the collection in the navigation property.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectedCoursesHS</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">.</span><span class="typ">ToString</span><span class="pun">()))</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">instructorCourses</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        instructorToUpdate</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>If the check box for a course wasn't selected, but the course is in the <code>Instructor.Courses</code> navigation property, the course is removed from the navigation property.</p>
<pre class="prettyprint prettyprinted"><span class="kwd">else</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">instructorCourses</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="pln">course</span><span class="pun">.</span><span class="typ">CourseID</span><span class="pun">))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        instructorToUpdate</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Remove</span><span class="pun">(</span><span class="pln">course</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>In <em>Views\Instructor\Edit.cshtml</em>, add a <strong>Courses</strong> field with an array of check boxes by adding the following code immediately after the <code>div</code>elements for the <code>OfficeAssignment</code> field and before the <code>div</code> element for the <strong>Save</strong> button:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-offset-2 col-md-10"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;table&gt;</span><span class="pln">
            </span><span class="tag">&lt;tr&gt;</span><span class="pln">
                @{
                    int cnt = 0;
                    List</span><span class="tag">&lt;ContosoUniversity.ViewModels.AssignedCourseData&gt;</span><span class="pln"> courses = ViewBag.Courses;

                    foreach (var course in courses)
                    {
                        if (cnt++ % 3 == 0)
                        {
                            @:</span><span class="tag">&lt;/tr&gt;&lt;tr&gt;</span><span class="pln">
                        }
                        @:</span><span class="tag">&lt;td&gt;</span><span class="pln">
                            </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"checkbox"</span><span class="pln">
                               </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"selectedCourses"</span><span class="pln">
                               </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"@course.CourseID"</span><span class="pln">
                               @(</span><span class="atn">Html</span><span class="pln">.</span><span class="atn">Raw</span><span class="pln">(</span><span class="atn">course</span><span class="pln">.</span><span class="atn">Assigned</span><span class="pln"> ? </span><span class="atv">"checked=\"</span><span class="atn">checked</span><span class="pln">\</span><span class="atv">""</span><span class="pln"> : </span><span class="atv">""</span><span class="pln">)) </span><span class="tag">/&gt;</span><span class="pln">
                               @course.CourseID @:  @course.Title
                        @:</span><span class="tag">&lt;/td&gt;</span><span class="pln">
                    }
                    @:</span><span class="tag">&lt;/tr&gt;</span><span class="pln">
                }
        </span><span class="tag">&lt;/table&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p>After you paste the code, if line breaks and indentation don't look like they do here, manually fix everything so that it looks like what you see here. The indentation doesn't have to be perfect, but the <code>@&lt;/tr&gt;&lt;tr&gt;</code>, <code>@:&lt;td&gt;</code>, <code>@:&lt;/td&gt;</code>, and <code>@&lt;/tr&gt;</code> lines must each be on a single line as shown or you'll get a runtime error.</p>
<p>This code creates an HTML table that has three columns. In each column is a check box followed by a caption that consists of the course number and title. The check boxes all have the same name ("selectedCourses"), which informs the model binder that they are to be treated as a group. The <code>value</code> attribute of each check box is set to the value of <code>CourseID.</code> When the page is posted, the model binder passes an array to the controller that consists of the <code>CourseID</code> values for only the check boxes which are selected.</p>
<p>When the check boxes are initially rendered, those that are for courses assigned to the instructor have <code>checked</code> attributes, which selects them (displays them checked).</p>
<p>After changing course assignments, you'll want to be able to verify the changes when the site returns to the <code>Index </code>page. Therefore, you need to add a column to the table in that page. In this case you don't need to use the <code>ViewBag</code> object, because the information you want to display is already in the <code>Courses</code> navigation property of the <code>Instructor</code> entity that you're passing to the page as the model.</p>
<p>In <em>Views\Instructor\Index.cshtml</em>, add a <strong>Courses</strong> heading immediately following the <strong>Office</strong> heading, as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;tr&gt;</span><span class="pln"> 
    </span><span class="tag">&lt;th&gt;</span><span class="pln">Last Name</span><span class="tag">&lt;/th&gt;</span><span class="pln"> 
    </span><span class="tag">&lt;th&gt;</span><span class="pln">First Name</span><span class="tag">&lt;/th&gt;</span><span class="pln"> 
    </span><span class="tag">&lt;th&gt;</span><span class="pln">Hire Date</span><span class="tag">&lt;/th&gt;</span><span class="pln"> 
    </span><span class="tag">&lt;th&gt;</span><span class="pln">Office</span><span class="tag">&lt;/th&gt;</span><span class="pln">
    </span><mark><span class="tag">&lt;th&gt;</span><span class="pln">Courses</span><span class="tag">&lt;/th&gt;</span></mark><span class="pln">
    </span><span class="tag">&lt;th&gt;&lt;/th&gt;</span><span class="pln"> 
</span><span class="tag">&lt;/tr&gt;</span><span class="pln"> </span></pre>
<p>Then add a new detail cell immediately following the office location detail cell:</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;td&gt;</span><span class="pln">
    @if (item.OfficeAssignment != null)
    {
        @item.OfficeAssignment.Location
    }
</span><span class="tag">&lt;/td&gt;</span><span class="pln">
</span><mark><span class="tag">&lt;td&gt;</span><span class="pln">
    @{
        foreach (var course in item.Courses)
        {
            @course.CourseID @:  @course.Title </span><span class="tag">&lt;br</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
        }
    }
</span><span class="tag">&lt;/td&gt;</span></mark><span class="pln">
</span><span class="tag">&lt;td&gt;</span><span class="pln">
    @Html.ActionLink("Select", "Index", new { id = item.ID }) |
    @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
    @Html.ActionLink("Details", "Details", new { id = item.ID }) |
    @Html.ActionLink("Delete", "Delete", new { id = item.ID })
</span><span class="tag">&lt;/td&gt;</span></pre>
<p>Run the <strong>Instructor Index</strong> page to see the courses assigned to each instructor:</p>
<p><img src="https://media-www-asp.azureedge.net/media/48025/instructorswithcourses.png" data-original="https://media-www-asp.azureedge.net/media/48025/instructorswithcourses.png" alt="Instructor_index_page" border="0" /></p>
<p>Click <strong>Edit</strong> on an instructor to see the Edit page.</p>
<p><img src="https://media-www-asp.azureedge.net/media/4482062/instructoreditwithcourses.png" data-original="https://media-www-asp.azureedge.net/media/4482062/instructoreditwithcourses.png" alt="Instructor_edit_page_with_courses" border="0" /></p>
<p>Change some course assignments and click <strong>Save</strong>. The changes you make are reflected on the Index page.</p>
<p><span class="Note">Note: The approach taken here to edit instructor course data works well when there is a limited number of courses. For collections that are much larger, a different UI and a different updating method would be required.<br />&nbsp;</span></p>
<h2>Update the DeleteConfirmed Method</h2>
<p>In <em>InstructorController.cs</em>, delete the <code>DeleteConfirmed</code> method and insert the following code in its place.</p>
<pre class="prettyprint prettyprinted"><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ActionName</span><span class="pun">(</span><span class="str">"Delete"</span><span class="pun">)]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">DeleteConfirmed</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><mark><span class="typ">Instructor</span><span class="pln"> instructor </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pln">
     </span><span class="pun">.</span><span class="typ">Include</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="typ">OfficeAssignment</span><span class="pun">)</span><span class="pln">
     </span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">ID </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
     </span><span class="pun">.</span><span class="typ">Single</span><span class="pun">();</span></mark><span class="pln">

   db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Remove</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span><span class="pln">

    </span><mark><span class="kwd">var</span><span class="pln"> department </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Departments</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">Where</span><span class="pun">(</span><span class="pln">d </span><span class="pun">=&gt;</span><span class="pln"> d</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> id</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="typ">SingleOrDefault</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">department </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        department</span><span class="pun">.</span><span class="typ">InstructorID</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></mark><span class="pln">

   db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
   </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code makes the following change:</p>
<ul>
<li>If the instructor is assigned as administrator of any department, removes the instructor assignment from that department. Without this code, you would get a referential integrity error if you tried to delete an instructor who was assigned as administrator for a department.</li>
</ul>
<p>This code doesn't handle the scenario of one instructor assigned as administrator for multiple departments. In the last tutorial you'll add code that prevents that scenario from happening.</p>
<h2>Add office location and courses to the Create page</h2>
<p>In <em>InstructorController.cs</em>, delete the <code>HttpGet</code> and <code>HttpPost</code> <code>Create</code> methods, and then add the following code in their place:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Create</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> instructor </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Instructor</span><span class="pun">();</span><span class="pln">
    instructor</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;();</span><span class="pln">
    </span><span class="typ">PopulateAssignedCourseData</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">]</span><span class="pln">
</span><span class="pun">[</span><span class="typ">ValidateAntiForgeryToken</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ActionResult</span><span class="pln"> </span><span class="typ">Create</span><span class="pun">([</span><span class="typ">Bind</span><span class="pun">(</span><span class="typ">Include</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"LastName,FirstMidName,HireDate,OfficeAssignment"</span><span class="pln"> </span><span class="pun">)]</span><span class="typ">Instructor</span><span class="pln"> instructor</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> selectedCourses</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">selectedCourses </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        instructor</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;();</span><span class="pln">
        </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> course </span><span class="kwd">in</span><span class="pln"> selectedCourses</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> courseToAdd </span><span class="pun">=</span><span class="pln"> db</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Find</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="pln">course</span><span class="pun">));</span><span class="pln">
            instructor</span><span class="pun">.</span><span class="typ">Courses</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">courseToAdd</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">ModelState</span><span class="pun">.</span><span class="typ">IsValid</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        db</span><span class="pun">.</span><span class="typ">Instructors</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span><span class="pln">
        db</span><span class="pun">.</span><span class="typ">SaveChanges</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">RedirectToAction</span><span class="pun">(</span><span class="str">"Index"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">PopulateAssignedCourseData</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">View</span><span class="pun">(</span><span class="pln">instructor</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>This code is similar to what you saw for the Edit methods except that initially no courses are selected. The <code>HttpGet</code> <code>Create</code> method calls the<code>PopulateAssignedCourseData</code> method not because there might be courses selected but in order to provide an empty collection for the<code>foreach</code> loop in the view (otherwise the view code would throw a null reference exception).</p>
<p>The HttpPost Create method adds each selected course to the Courses navigation property before the template code that checks for validation errors and adds the new instructor to the database. Courses are added even if there are model errors so that when there are model errors (for an example, the user keyed an invalid date) so that when the page is redisplayed with an error message, any course selections that were made are automatically restored.</p>
<p>Notice that in order to be able to add courses to the <code>Courses</code> navigation property you have to initialize the property as an empty collection:</p>
<pre class="prettyprint prettyprinted"><span class="pln">instructor</span><span class="pun">.</span><span class="typ">Courses</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;();</span></pre>
<p>As an alternative to doing this in controller code, you could do it in the Instructor model by changing the property getter to automatically create the collection if it doesn't exist, as shown in the following example:</p>
<pre class="prettyprint prettyprinted"><span class="kwd">private</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> _courses</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">virtual</span><span class="pln"> </span><span class="typ">ICollection</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Courses</span><span class="pln"> 
</span><span class="pun">{</span><span class="pln"> 
    </span><span class="kwd">get</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> _courses </span><span class="pun">??</span><span class="pln"> </span><span class="pun">(</span><span class="pln">_courses </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Course</span><span class="pun">&gt;());</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">set</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        _courses </span><span class="pun">=</span><span class="pln"> value</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> 
</span><span class="pun">}</span></pre>
<p>If you modify the <code>Courses</code> property in this way, you can remove the explicit property initialization code in the controller.</p>
<p>In <em>Views\Instructor\Create.cshtml</em>, add an office location text box and course check boxes after the hire date field and before the <strong>Submit</strong>button.</p>
<pre class="prettyprint prettyprinted"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    @Html.LabelFor(model =&gt; model.OfficeAssignment.Location, new { @class = "control-label col-md-2" })
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-10"</span><span class="tag">&gt;</span><span class="pln">
        @Html.EditorFor(model =&gt; model.OfficeAssignment.Location)
        @Html.ValidationMessageFor(model =&gt; model.OfficeAssignment.Location)
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">

</span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-md-offset-2 col-md-10"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;table&gt;</span><span class="pln">
            </span><span class="tag">&lt;tr&gt;</span><span class="pln">
                @{
                    int cnt = 0;
                    List</span><span class="tag">&lt;ContosoUniversity.ViewModels.AssignedCourseData&gt;</span><span class="pln"> courses = ViewBag.Courses;

                    foreach (var course in courses)
                    {
                        if (cnt++ % 3 == 0)
                        {
                            @:</span><span class="tag">&lt;/tr&gt;&lt;tr&gt;</span><span class="pln">
                        }
                        @:</span><span class="tag">&lt;td&gt;</span><span class="pln">
                            </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"checkbox"</span><span class="pln">
                               </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"selectedCourses"</span><span class="pln">
                               </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"@course.CourseID"</span><span class="pln">
                               @(</span><span class="atn">Html</span><span class="pln">.</span><span class="atn">Raw</span><span class="pln">(</span><span class="atn">course</span><span class="pln">.</span><span class="atn">Assigned</span><span class="pln"> ? </span><span class="atv">"checked=\"</span><span class="atn">checked</span><span class="pln">\</span><span class="atv">""</span><span class="pln"> : </span><span class="atv">""</span><span class="pln">)) </span><span class="tag">/&gt;</span><span class="pln">
                               @course.CourseID @:  @course.Title
                        @:</span><span class="tag">&lt;/td&gt;</span><span class="pln">
                    }
                    @:</span><span class="tag">&lt;/tr&gt;</span><span class="pln">
                }
        </span><span class="tag">&lt;/table&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p>After you paste the code, fix line breaks and indentation as you did earlier for the Edit page.</p>
<p>Run the Create page and add an instructor.</p>
<p><img alt="Instructor Create with Courses" src="https://media-www-asp.azureedge.net/media/4482056/instructorcreatewithcourses.png" data-original="https://media-www-asp.azureedge.net/media/4482056/instructorcreatewithcourses.png" /></p>
<h2 id="transactions">Handling Transactions</h2>
<p>As explained in the <a href="https://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application">Basic CRUD Functionality tutorial</a>, by default the Entity Framework implicitly implements transactions. For scenarios where you need more control -- for example, if you want to include operations done outside of Entity Framework in a transaction -- see <a href="http://msdn.microsoft.com/en-US/data/dn456843">Working with Transactions</a> on MSDN.</p>
<h2>Summary</h2>
<p>You have now completed this introduction to working with related data. So far in these tutorials you've worked with code that does synchronous I/O.</p>
</body>
</html>
***********************************
Filename: Project_Readme.html
***********************************
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Your ASP.NET application</title>
    <style>
        body {
            background: #fff;
            color: #505050;
            font: 14px 'Segoe UI', tahoma, arial, helvetica, sans-serif;
            margin: 20px;
            padding: 0;
        }

        #header {
            background: #efefef;
            padding: 0;
        }

        h1 {
            font-size: 48px;
            font-weight: normal;
            margin: 0;
            padding: 0 30px;
            line-height: 150px;
        }

        p {
            font-size: 20px;
            color: #fff;
            background: #969696;
            padding: 0 30px;
            line-height: 50px;
        }

        #main {
            padding: 5px 30px;
        }

        .section {
            width: 21.7%;
            float: left;
            margin: 0 0 0 4%;
        }

            .section h2 {
                font-size: 13px;
                text-transform: uppercase;
                margin: 0;
                border-bottom: 1px solid silver;
                padding-bottom: 12px;
                margin-bottom: 8px;
            }

            .section.first {
                margin-left: 0;
            }

                .section.first h2 {
                    font-size: 24px;
                    text-transform: none;
                    margin-bottom: 25px;
                    border: none;
                }

                .section.first li {
                    border-top: 1px solid silver;
                    padding: 8px 0;
                }

            .section.last {
                margin-right: 0;
            }

        ul {
            list-style: none;
            padding: 0;
            margin: 0;
            line-height: 20px;
        }

        li {
            padding: 4px 0;
        }

        a {
            color: #267cb2;
            text-decoration: none;
        }

            a:hover {
                text-decoration: underline;
            }
    </style>
</head>
<body>

    <div id="header">
        <h1>Your ASP.NET application</h1>
        <p>Congratulations! You've created a project</p>
    </div>

    <div id="main">
        <div class="section first">
            <h2>This application consists of:</h2>
            <ul>
                <li>Sample pages showing basic nav between Home, About, and Contact</li>
                <li>Theming using <a href="http://go.microsoft.com/fwlink/?LinkID=615519">Bootstrap</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615520">Authentication</a>, if selected, shows how to register and sign in</li>
                <li>ASP.NET features managed using <a href="http://go.microsoft.com/fwlink/?LinkID=320756">NuGet</a></li>
            </ul>
        </div>

        <div class="section">
            <h2>Customize app</h2>
            <ul>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615541">Get started with ASP.NET MVC</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615523">Change the site's theme</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615524">Add more libraries using NuGet</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615542">Configure authentication</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615526">Customize information about the website users</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615527">Get information from social providers</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615528">Add HTTP services using ASP.NET Web API</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615529">Secure your web API</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615530">Add real-time web with ASP.NET SignalR</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615531">Add components using Scaffolding</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615532">Test your app with Browser Link</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615533">Share your project</a></li>
            </ul>
        </div>

        <div class="section">
            <h2>Deploy</h2>
            <ul>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615534">Ensure your app is ready for production</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615535">Microsoft Azure</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615536">Hosting providers</a></li>
            </ul>
        </div>

        <div class="section last">
            <h2>Get help</h2>
            <ul>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615537">Get help</a></li>
                <li><a href="http://go.microsoft.com/fwlink/?LinkID=615538">Get more templates</a></li>
            </ul>
        </div>
    </div>

</body>
</html>